{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/butterfly/source/css/index.styl","path":"css/index.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/css/var.styl","path":"css/var.styl","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/404.jpg","path":"img/404.jpg","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/favicon.png","path":"img/favicon.png","modified":1,"renderable":1},{"_id":"themes/butterfly/source/img/friend_404.gif","path":"img/friend_404.gif","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/main.js","path":"js/main.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/tw_cn.js","path":"js/tw_cn.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/local-search.js","path":"js/search/local-search.js","modified":1,"renderable":1},{"_id":"themes/butterfly/source/js/search/algolia.js","path":"js/search/algolia.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/2023-Meta-Hacker-Cup.md","hash":"1c58307b727288e94aa8bfde85af24ea0a222d61","modified":1735176598356},{"_id":"source/_posts/2024-Summer-REU-experience.md","hash":"8598089b5162b0e8d20a86c09083e14f089797f6","modified":1735176598362},{"_id":"source/_posts/CF-1904D-Set-To-Max.md","hash":"2918e3b40f1c6dc9cfda076ec057c5e71845f58c","modified":1735176598460},{"_id":"source/_posts/CF-892-Div-2-ABC-314.md","hash":"bba11fc24e41395b59923f8da0a700b19b02134f","modified":1735176598461},{"_id":"source/_posts/CM-CF-Practice.md","hash":"ec61f4aba826208934aebee450accea325aa962a","modified":1735176598462},{"_id":"source/_posts/End-of-2023-New-Year-s-Resolution.md","hash":"f732bc2cdb41e60bc832881c18df364441ac1e89","modified":1735176598463},{"_id":"source/_posts/End-of-2024-New-Year-s-Resolution.md","hash":"21814eb67f7566dbf3d4811abfa9c5791ccad43a","modified":1735720739237},{"_id":"source/_posts/ICPC-Practice-1-ECNA-2018-NCNA-2019.md","hash":"37b4c68f5384304448c851b3b2aa4c319c5e5517","modified":1735176598471},{"_id":"source/_posts/End-of-Freshman-Year.md","hash":"3b318814c3aea45df435fe8b390eaba74a4c3a0e","modified":1735176598471},{"_id":"source/_posts/Interesting-CodeChef-Problem.md","hash":"41351141678107742dfd7c874e982b05658b0d88","modified":1735176598473},{"_id":"source/_posts/Linear-Algebra-in-ML-1-PCA.md","hash":"485aa480c7456e59832dd51405a6f1a4b3cc0d92","modified":1735176598473},{"_id":"source/_posts/Music-I-enjoyed-recently-2.md","hash":"c8bad0d853ca9250c380314ec14f536568340f17","modified":1735176598478},{"_id":"source/_posts/Mashup-grind-feast-1.md","hash":"375a86b7f9a277c62d4454cb87f71a0741a055a4","modified":1735176598476},{"_id":"source/_posts/New-Goal-Read-Papers.md","hash":"9ff4af1a2792cab48ff35895a224bb2402e3c18a","modified":1735176598480},{"_id":"source/_posts/NAQ-2023.md","hash":"ad5c5f1e312fe7c9552c8cc070355e17f7bef69e","modified":1735176598478},{"_id":"source/_posts/One-month-what-now.md","hash":"2d77eb36bee56adfe6bb257eb6991f33fb89c799","modified":1735176598480},{"_id":"source/_posts/Music-I-enjoyed-recently.md","hash":"6a9d9d88cad30010a9a8d7c3260e987c914785f6","modified":1735176598478},{"_id":"source/_posts/Open-source-contribution-cool-problems.md","hash":"84e4f1fe45e81aa3eafec777cfce96178675d56c","modified":1735176598481},{"_id":"source/_posts/Paper-Reading-1-AlexNet-VGG-and-U-Net.md","hash":"5efec19fb17dd0a8ed4ac7cb82dd8728712afd2f","modified":1735176598482},{"_id":"source/_posts/Paper-Reading-3-BERT-RoBERTa-LoRA.md","hash":"5e4e8603f8a47d69b903b3ea6a5ad240d9b8bdd5","modified":1735176598497},{"_id":"source/_posts/Paper-Reading-2-R-CNN-Fast-R-CNN-Faster-R-CNN.md","hash":"16236233f378de3e85047b98c1b7f1c82a1ecfdb","modified":1735176598485},{"_id":"source/_posts/Quick-Review-of-Janurary.md","hash":"c9d1dbc105240fffccc74009f84dc128b997fde0","modified":1735176598499},{"_id":"source/_posts/Perm-hair-CF-mashups.md","hash":"9fdc4903ef5915041ffc274e3263e2ba9ec524d5","modified":1735176598499},{"_id":"source/_posts/Recent-Learnings-and-Contests.md","hash":"7822f128d09c9a9b1880a43104138f7ce086176a","modified":1735176598500},{"_id":"source/_posts/UW-Madison.md","hash":"6e52ab8ab9251bf1e8537de9fc2966a37b867b47","modified":1735176598506},{"_id":"source/_posts/Reroot-DP.md","hash":"5cdc17e48241a8b7eee616050c82f5d4e7718b18","modified":1735176598500},{"_id":"source/_posts/nostalgic-problem.md","hash":"f542fe87d26aaa3f59c02dcab8633422f029a64d","modified":1735176598507},{"_id":"source/_posts/Some-thought-about-CP-some-CF.md","hash":"69cae380fca0cb0534179537bb030050bab8995c","modified":1735176598506},{"_id":"source/_posts/Blog-again.md","hash":"bc59663f329f996993d63dbd313af1b4ecad0d6d","modified":1735176598458},{"_id":"source/css/modify.css","hash":"0e790c5be62e131b004d09564df16a119287e71a","modified":1735176598507},{"_id":"source/_posts/CF-1904D-Set-To-Max/dumb.png","hash":"ff96e06446a30aa9f6a19ffdbd4f958970d37ed9","modified":1735176598461},{"_id":"source/_posts/Linear-Algebra-in-ML-1-PCA/PCA.png","hash":"3d83814aa8e9d70173fd15eefe91f579e182737a","modified":1735176598475},{"_id":"source/_posts/Mashup-grind-feast-1/mashup1.png","hash":"b668586a296bdb68d8d80fb77d13bdbec315d1c6","modified":1735176598477},{"_id":"source/_posts/End-of-2023-New-Year-s-Resolution/comeback.png","hash":"14ff9b19635491839f5ec109f9e890dcda8b35a2","modified":1735176598464},{"_id":"source/_posts/Open-source-contribution-cool-problems/merge.png","hash":"6a2fa72f6719439a76d565136b544140e7a89fcf","modified":1735176598481},{"_id":"source/_posts/Quick-Review-of-Janurary/score.png","hash":"f6b77ef3e3b53c7a4794fc78c39acaa23ef8ca35","modified":1735176598500},{"_id":"source/_posts/Paper-Reading-3-BERT-RoBERTa-LoRA/image.png","hash":"87480a3675120c7d429b4acbb01d38941e628307","modified":1735176598498},{"_id":"source/_posts/Reroot-DP/depthroot2.png","hash":"531a2c12b554f3738533549f314cecdb659fb663","modified":1735176598502},{"_id":"source/_posts/Reroot-DP/depthroot.png","hash":"3ecc2818d41807fe3c97f62c258426b9f4c4ae75","modified":1735176598501},{"_id":"source/_posts/Reroot-DP/subtreecomp1.png","hash":"c9d9439d48ecfcd18871af19c14c743989c1a181","modified":1735176598504},{"_id":"source/_posts/Reroot-DP/subtree3.png","hash":"943a908d6d368b5148ad72cf00942e9498ce4248","modified":1735176598503},{"_id":"source/_posts/Reroot-DP/treexor.jpg","hash":"463244c58002a95931fb7c3df6fa3f2e5691b1f9","modified":1735176598505},{"_id":"source/_posts/Reroot-DP/subtreecomp2.png","hash":"7985c2fd5df77fbd278b98873b231b63bd4d36fb","modified":1735176598504},{"_id":"source/_posts/NAQ-2023/scoreboard.png","hash":"970c0dbb8a9f00b236dc4383938ae7eeff8a2554","modified":1735176598480},{"_id":"source/_posts/Paper-Reading-2-R-CNN-Fast-R-CNN-Faster-R-CNN/compare.png","hash":"288103ff8933787fb01c82599050f2b14b1cd2b9","modified":1735176598490},{"_id":"source/_posts/Paper-Reading-1-AlexNet-VGG-and-U-Net/unet.png","hash":"0ecd2835e25ee92eaf7fe589629245097e828818","modified":1735176598485},{"_id":"source/_posts/2023-Meta-Hacker-Cup/image-6.png","hash":"88213d3536be11ac061a52694bdbf33a5684bcf2","modified":1735176598360},{"_id":"source/_posts/2024-Summer-REU-experience/present.jpg","hash":"bc49120c081ffdb5baec3f599cf0c30dbf748070","modified":1735176598452},{"_id":"source/_posts/Paper-Reading-2-R-CNN-Fast-R-CNN-Faster-R-CNN/R-CNN-Flow.png","hash":"b1d250a7dbca8891eeeb4860752b7c4e364d54cd","modified":1735176598488},{"_id":"source/_posts/2024-Summer-REU-experience/IMG_20240602_130433.jpg","hash":"5b7423b471fc03f553ed512142a3605aa7912c1b","modified":1735176598390},{"_id":"source/_posts/2024-Summer-REU-experience/burger.jpg","hash":"07894070cb70fd527321d03bc431197d06a9a0af","modified":1735176598417},{"_id":"themes/butterfly/LICENSE","hash":"c8bc7df08db9dd3b39c2c2259a163a36cf2f6808","modified":1703956997586},{"_id":"themes/butterfly/_config.yml","hash":"c6fab3700a6502b5790ca20d20113020544ea048","modified":1703956997587},{"_id":"themes/butterfly/README.md","hash":"20a91bea7f7ada8b8195d2abff106a7ce21bba20","modified":1703956997586},{"_id":"themes/butterfly/package.json","hash":"58300c8f776c115ac8e069a39e9460faafc60122","modified":1703956997617},{"_id":"themes/butterfly/plugins.yml","hash":"5dea6a045a9b33b35809c7f180f256431a6fba09","modified":1703956997618},{"_id":"themes/butterfly/README_CN.md","hash":"9d729ee2ffc5e5f703ccfbfbbb7b286d59071125","modified":1703956997587},{"_id":"themes/butterfly/languages/default.yml","hash":"90e9e2f36dc51aa77eb7804ae048b4876035b12d","modified":1703956997587},{"_id":"themes/butterfly/languages/zh-CN.yml","hash":"2dcc70a011b37890215ae0fd6d8f8c78aa8af6b0","modified":1703956997587},{"_id":"themes/butterfly/.github/FUNDING.yml","hash":"3b572099a992e30267f5fe4cd3c582ff7ac9f083","modified":1703956997584},{"_id":"themes/butterfly/languages/en.yml","hash":"68127be0e6b44cfc5f31353d8b275c02939b3ff9","modified":1703956997587},{"_id":"themes/butterfly/languages/zh-TW.yml","hash":"1392e7b8c678cdfb54f55523693e66abc7d80538","modified":1703956997587},{"_id":"themes/butterfly/layout/index.pug","hash":"648dcbdb3d145a710de81c909e000e8664d2ac9c","modified":1703956997616},{"_id":"themes/butterfly/layout/category.pug","hash":"bf979aec88d78b644fc5d31518f8679ad7625792","modified":1703956997589},{"_id":"themes/butterfly/layout/page.pug","hash":"bf2d6c6d2d156777b55292e51be02b0b3acf0af8","modified":1703956997616},{"_id":"themes/butterfly/layout/archive.pug","hash":"bc77220dfc269b8faad0930e1a4142ebf68165e5","modified":1703956997589},{"_id":"themes/butterfly/layout/post.pug","hash":"fdbb508b5e6dec30fb8753c5a7fdd494410c4fc0","modified":1703956997616},{"_id":"themes/butterfly/layout/tag.pug","hash":"4bb5efc6dabdf1626685bf6771aaa1467155ae86","modified":1703956997617},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/config.yml","hash":"63ad2249ad09fb3fe21bd5ff9adefb304a7ab24a","modified":1703956997585},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"eed9190301095b35081aa2658204cc3f15b9f5e1","modified":1703956997585},{"_id":"themes/butterfly/.github/workflows/publish.yml","hash":"e320b40c051bae1549156cd5ea4a51383cf78598","modified":1703956997586},{"_id":"themes/butterfly/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"6e0f9470b18bd37d4891282ac73d61676b040e8c","modified":1703956997585},{"_id":"themes/butterfly/layout/includes/404.pug","hash":"aace9ddff469de4226e47a52ede1c81e66d66d5c","modified":1703956997589},{"_id":"themes/butterfly/.github/workflows/stale.yml","hash":"4040c76547e270aaf184e9b219a44ca41bbb1b9f","modified":1703956997586},{"_id":"themes/butterfly/layout/includes/footer.pug","hash":"8715948b93e7508b84d913be1969b28c6b067b9b","modified":1703956997590},{"_id":"themes/butterfly/layout/includes/additional-js.pug","hash":"50eea5aa78cdeb6c72dd22f0aeabc407cc0f712e","modified":1703956997589},{"_id":"themes/butterfly/layout/includes/rightside.pug","hash":"f448bf73103b88de4443e52d600e871cf3de3e32","modified":1703956997597},{"_id":"themes/butterfly/layout/includes/layout.pug","hash":"96df62e34661d8ca4a45267286127479e5178a79","modified":1703956997594},{"_id":"themes/butterfly/layout/includes/head.pug","hash":"ea8d4e8ac6af93cd268ba8f6ffcb80417bc2501e","modified":1703956997590},{"_id":"themes/butterfly/scripts/filters/post_lazyload.js","hash":"5ed2d7ef240c927fe1b7a7fb5bf9e55e2bfd55a5","modified":1703956997620},{"_id":"themes/butterfly/layout/includes/pagination.pug","hash":"c5c58714fb3cb839653e5c32e6094784c8662935","modified":1703956997596},{"_id":"themes/butterfly/scripts/helpers/aside_archives.js","hash":"4f712b4ea383b59a3122683db1d54c04a79ccc5d","modified":1703956997621},{"_id":"themes/butterfly/scripts/helpers/findArchiveLength.js","hash":"b12895e0765d596494e5526d121de0dd5a7c23d3","modified":1703956997621},{"_id":"themes/butterfly/layout/includes/sidebar.pug","hash":"9277fead4c29dbe93976f078adaa26e8f9253da3","modified":1703956997598},{"_id":"themes/butterfly/scripts/filters/random_cover.js","hash":"0df22d7dbfa766a65cb6032a1f003348f4307cfe","modified":1703956997620},{"_id":"themes/butterfly/scripts/helpers/aside_categories.js","hash":"cdd992c8577d583c237b6aac9f5077d8200879b2","modified":1703956997621},{"_id":"themes/butterfly/scripts/helpers/page.js","hash":"c74d6a9b8f71e69447f7847a5f5e81555d68b140","modified":1703956997622},{"_id":"themes/butterfly/scripts/helpers/inject_head_js.js","hash":"b55f71347d2ead097c7f98c0ec792b091433345c","modified":1703956997621},{"_id":"themes/butterfly/source/css/index.styl","hash":"b13d96924a5534bff91d75566b196ac87b4fac22","modified":1703956997636},{"_id":"themes/butterfly/scripts/helpers/related_post.js","hash":"76343ac8422c9c8539082e77eda6ffee4b877eb2","modified":1703956997622},{"_id":"themes/butterfly/source/css/var.styl","hash":"950250f66faeb611a67540e0fa6cedbcf5a7a321","modified":1703956997636},{"_id":"themes/butterfly/scripts/tag/button.js","hash":"164d5f1c2d1b4cb5a813a6fc574016743a53c019","modified":1703956997622},{"_id":"themes/butterfly/source/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1703956997636},{"_id":"themes/butterfly/scripts/tag/flink.js","hash":"3ba7677969ff01fab06fc6713455ddc6861f0024","modified":1703956997622},{"_id":"themes/butterfly/scripts/tag/hide.js","hash":"5d08c3552f7d3c80a724ca628bff66321abe2e5a","modified":1703956997623},{"_id":"themes/butterfly/scripts/tag/gallery.js","hash":"7ec77b3093f5de67e7032f40a5b12f1389f6f6ff","modified":1703956997623},{"_id":"themes/butterfly/scripts/tag/label.js","hash":"b013dc0a3d57d2caa18b89263f23871da9ec456d","modified":1703956997623},{"_id":"themes/butterfly/source/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1703956997636},{"_id":"themes/butterfly/scripts/tag/inlineImg.js","hash":"c863d2732ce4bdc084f2d0db92f50f80328c1007","modified":1703956997623},{"_id":"themes/butterfly/scripts/tag/note.js","hash":"e68d8d21f3a86e3646907a3685550ee20e8d4a9f","modified":1703956997624},{"_id":"themes/butterfly/source/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1703956997637},{"_id":"themes/butterfly/scripts/tag/series.js","hash":"dc56e5182dd3813dc977c9bf8556dcc7615e467b","modified":1703956997624},{"_id":"themes/butterfly/scripts/tag/mermaid.js","hash":"289f85847c58f0b2b7d98a68e370a2896edb8949","modified":1703956997623},{"_id":"themes/butterfly/scripts/tag/score.js","hash":"35d54adc92e717cc32e13515122b025fd1a98ea2","modified":1703956997624},{"_id":"themes/butterfly/scripts/tag/tabs.js","hash":"7c448886f230adb4f4a0208c88fff809abcb5637","modified":1703956997624},{"_id":"themes/butterfly/scripts/events/cdn.js","hash":"7864ba45716c51aef8d8b04fd4bc212e0008ce3b","modified":1703956997619},{"_id":"themes/butterfly/scripts/tag/timeline.js","hash":"e611074a5a7f489a8b04afac0a3f7f882ce26532","modified":1703956997624},{"_id":"themes/butterfly/scripts/events/404.js","hash":"f1d1c378356b776e9b2a8411e6dca88dc8c3245c","modified":1703956997618},{"_id":"themes/butterfly/scripts/events/comment.js","hash":"95479790234c291b064d031577d71214cdd1d820","modified":1703956997619},{"_id":"themes/butterfly/scripts/events/stylus.js","hash":"0a336dfe5ed08952fa0df1532421df38a74a20d6","modified":1703956997619},{"_id":"themes/butterfly/scripts/events/welcome.js","hash":"f59e10305fef59ea3e62a7395106c0927582879d","modified":1703956997620},{"_id":"themes/butterfly/scripts/events/merge_config.js","hash":"b1dfc3c898b886eab1241b068fc27d7a26a3b7d2","modified":1703956997619},{"_id":"themes/butterfly/scripts/helpers/series.js","hash":"17c0095bc8d612a268cdcab000b1742dc4c6f811","modified":1703956997622},{"_id":"themes/butterfly/source/js/main.js","hash":"59cd756a94ecdf3ec7b18f50691a8a6305f7a65a","modified":1703956997637},{"_id":"themes/butterfly/layout/includes/header/nav.pug","hash":"962ee70a35e60a13c31eea47d16b9f98069fe417","modified":1703956997592},{"_id":"themes/butterfly/source/js/utils.js","hash":"7b871fe0c4456660cff4c7b9cc4ed089adac2caf","modified":1703956997638},{"_id":"themes/butterfly/source/js/tw_cn.js","hash":"d776c670e4076ad6049dbb64cdee7a734b51d37f","modified":1703956997638},{"_id":"themes/butterfly/scripts/events/init.js","hash":"ce68e84a9ccfcf91100befbaa9afc392a0cd93bb","modified":1703956997619},{"_id":"themes/butterfly/layout/includes/header/social.pug","hash":"7a641b5dd45b970e1dafd1433eb32ea149e55cf2","modified":1703956997593},{"_id":"themes/butterfly/layout/includes/head/Open_Graph.pug","hash":"c8dbdfe6145a0bc6f7691c9551be8169a2698f0a","modified":1703956997590},{"_id":"themes/butterfly/layout/includes/header/menu_item.pug","hash":"ca8bcd90ad9467819330bfe7c02b76322754bccf","modified":1703956997592},{"_id":"themes/butterfly/layout/includes/header/post-info.pug","hash":"e7b25a322ae861dca06d458d3f914220e92758cf","modified":1703956997593},{"_id":"themes/butterfly/layout/includes/head/analytics.pug","hash":"c7666a10448edd93f5ace37296051b7670495f1b","modified":1703956997590},{"_id":"themes/butterfly/layout/includes/head/config.pug","hash":"39e1ca0a54eb5fd3688a78737417a1aaa50914c9","modified":1703956997590},{"_id":"themes/butterfly/layout/includes/head/google_adsense.pug","hash":"f29123e603cbbcc6ce277d4e8f600ba67498077c","modified":1703956997591},{"_id":"themes/butterfly/layout/includes/head/preconnect.pug","hash":"a7c929b90ae52b78b39b1728e3ab0e3db1cb7b9a","modified":1703956997591},{"_id":"themes/butterfly/layout/includes/head/config_site.pug","hash":"bd5dd5452e28a4fe94c3241a758ec6f4fdb7a149","modified":1703956997591},{"_id":"themes/butterfly/layout/includes/head/pwa.pug","hash":"6dc2c9b85df9ab4f5b554305339fd80a90a6cf43","modified":1703956997591},{"_id":"themes/butterfly/layout/includes/loading/fullpage-loading.pug","hash":"766baca6ddce49d1724a02312387b292ff2d0bdc","modified":1703956997594},{"_id":"themes/butterfly/layout/includes/loading/index.pug","hash":"00ae419f527d8225a2dc03d4f977cec737248423","modified":1703956997595},{"_id":"themes/butterfly/layout/includes/header/index.pug","hash":"1bef867c799ba158c5417272fb137539951aa120","modified":1703956997592},{"_id":"themes/butterfly/layout/includes/head/site_verification.pug","hash":"5168caadc4cf541f5d6676a9c5e8ae47a948f9ad","modified":1703956997591},{"_id":"themes/butterfly/layout/includes/loading/pace.pug","hash":"a6fde4835d6460ce7baf792fd5e1977fad73db25","modified":1703956997595},{"_id":"themes/butterfly/layout/includes/page/categories.pug","hash":"5276a8d2835e05bd535fedc9f593a0ce8c3e8437","modified":1703956997596},{"_id":"themes/butterfly/layout/includes/page/default-page.pug","hash":"e9459f122af7b733398578f9f0f8ab3c5e12a217","modified":1703956997596},{"_id":"themes/butterfly/layout/includes/page/flink.pug","hash":"e37681bc9c169d4220f26ecda2b3d5c02b6b9a0f","modified":1703956997596},{"_id":"themes/butterfly/layout/includes/page/tags.pug","hash":"12be059c536490af216a397e8f2a7abbf6d4610e","modified":1703956997596},{"_id":"themes/butterfly/layout/includes/mixins/article-sort.pug","hash":"9155f01d4c644a2e19b2b13b2d3c6d5e34dd0abf","modified":1703956997595},{"_id":"themes/butterfly/layout/includes/widget/card_ad.pug","hash":"a8312b527493dabbadbb1280760168d3bc909a3b","modified":1703956997613},{"_id":"themes/butterfly/layout/includes/post/reward.pug","hash":"912df10a053db3135968e92b6fd1a707ee94c968","modified":1703956997597},{"_id":"themes/butterfly/layout/includes/mixins/post-ui.pug","hash":"194a5f310dccecee3ae0b648e4e5318f6fbbddcd","modified":1703956997596},{"_id":"themes/butterfly/layout/includes/widget/card_announcement.pug","hash":"21e019bdc3b1e796bb00976bb29af2d51f873624","modified":1703956997613},{"_id":"themes/butterfly/layout/includes/widget/card_archives.pug","hash":"73d33b6930e7944187a4b3403daf25d27077a2dd","modified":1703956997613},{"_id":"themes/butterfly/layout/includes/widget/card_bottom_self.pug","hash":"1dba77d250eeebfb6e293d504352c7e9ea31980b","modified":1703956997614},{"_id":"themes/butterfly/layout/includes/widget/card_author.pug","hash":"ab037bf5794638bd30da4cf7cf106e5d03b5f696","modified":1703956997614},{"_id":"themes/butterfly/layout/includes/widget/card_post_series.pug","hash":"e0bb72fa0ce15964b11b8fe421cae3432394e35f","modified":1703956997615},{"_id":"themes/butterfly/layout/includes/post/post-copyright.pug","hash":"0abad416b1974a17e5be7817931d5fe799180170","modified":1703956997597},{"_id":"themes/butterfly/layout/includes/widget/card_newest_comment.pug","hash":"8e22f53886a57a68286970d8af8b4c950fd4a1d7","modified":1703956997615},{"_id":"themes/butterfly/layout/includes/widget/card_categories.pug","hash":"66e383b4ef374951eb87dd1bf4cdb7a667193fb5","modified":1703956997615},{"_id":"themes/butterfly/layout/includes/widget/card_recent_post.pug","hash":"bb842d2aa6469d65bf06af1372f0a19a9e4ef44c","modified":1703956997616},{"_id":"themes/butterfly/layout/includes/widget/card_post_toc.pug","hash":"d48d77af1670bd568d784794408bf524a448bfcc","modified":1703956997615},{"_id":"themes/butterfly/layout/includes/widget/card_tags.pug","hash":"842b772a387b576550fa127030e1c2e9bf65716d","modified":1703956997616},{"_id":"themes/butterfly/layout/includes/widget/card_top_self.pug","hash":"7b5ae404a1205546b7de4be42291315cf918f2b3","modified":1703956997616},{"_id":"themes/butterfly/layout/includes/widget/index.pug","hash":"8df529f71e25f1c0a00e533de7944ed3d1ba7bd8","modified":1703956997616},{"_id":"themes/butterfly/layout/includes/widget/card_webinfo.pug","hash":"12185713f9ca08984fc74e3b69d8cd6828d23da8","modified":1703956997616},{"_id":"themes/butterfly/layout/includes/third-party/pjax.pug","hash":"9b734d99963f3e7f562597dcf60485ccbf6e961c","modified":1703956997609},{"_id":"themes/butterfly/layout/includes/third-party/aplayer.pug","hash":"e939344fd389aeb11864ee697d5fd9b036d8325f","modified":1703956997599},{"_id":"themes/butterfly/layout/includes/third-party/pangu.pug","hash":"f0898509da70388b5c532f19e762756d74080200","modified":1703956997609},{"_id":"themes/butterfly/layout/includes/third-party/effect.pug","hash":"43014bfc63583d3ee8808d526dd165848c0ed52f","modified":1703956997605},{"_id":"themes/butterfly/layout/includes/third-party/prismjs.pug","hash":"08979afbfecb4476a5ae8e360947b92624d285b8","modified":1703956997609},{"_id":"themes/butterfly/source/css/_global/function.styl","hash":"e920dae9ce00177922468db49240f5aca0af4f64","modified":1703956997625},{"_id":"themes/butterfly/layout/includes/third-party/subtitle.pug","hash":"dfb5e16a7e7106bb20b2ac2d0df1251d0fc79609","modified":1703956997613},{"_id":"themes/butterfly/source/css/_global/index.styl","hash":"0421da07907b3d98df64239e073b23fbb3f04149","modified":1703956997625},{"_id":"themes/butterfly/source/css/_highlight/theme.styl","hash":"3c178608406c31d768af355ef1d7326da37cc75f","modified":1703956997628},{"_id":"themes/butterfly/source/css/_layout/comments.styl","hash":"fbfce4d67cacd1df22fb73d89d008693f59d9d91","modified":1703956997629},{"_id":"themes/butterfly/source/css/_layout/chat.styl","hash":"792a04d36de32f230ca3256ad87a90fe8392f333","modified":1703956997628},{"_id":"themes/butterfly/source/css/_layout/aside.styl","hash":"aae70ddd126b2e40158e45036abecbfa33cbfbba","modified":1703956997628},{"_id":"themes/butterfly/source/css/_highlight/highlight.styl","hash":"41054740cfbd1357138785464f6859681ca58493","modified":1703956997626},{"_id":"themes/butterfly/source/css/_layout/post.styl","hash":"7ae27854a737a02eca89b0b92db94cb298fef59e","modified":1703956997630},{"_id":"themes/butterfly/source/css/_layout/head.styl","hash":"66a7a0e3c58ac23c81afe9fe18834b9db9c42698","modified":1703956997629},{"_id":"themes/butterfly/source/css/_layout/footer.styl","hash":"5e27f7842af82ff7498d4b59787ce9ca90fa9e6f","modified":1703956997629},{"_id":"themes/butterfly/source/css/_layout/pagination.styl","hash":"bd099f7d3adef4b7edd24c0a25a07415b156e587","modified":1703956997630},{"_id":"themes/butterfly/source/css/_layout/relatedposts.styl","hash":"6dcf19c0933c8828a439f801b0f4b256447dec07","modified":1703956997630},{"_id":"themes/butterfly/source/css/_layout/rightside.styl","hash":"0322237e762db401d7b4aa33168d0b9334a9ec26","modified":1703956997630},{"_id":"themes/butterfly/source/css/_layout/loading.styl","hash":"f0b01bbf321c2c24fdccaee367dd9fd448031a72","modified":1703956997629},{"_id":"themes/butterfly/source/css/_layout/third-party.styl","hash":"15ea7564b2e3bf46bc91fb6e49c94d057b37caaf","modified":1703956997631},{"_id":"themes/butterfly/source/css/_layout/sidebar.styl","hash":"80ee9d0bfe5d38aac1f0cdcea5fc88b71d310041","modified":1703956997630},{"_id":"themes/butterfly/source/css/_layout/reward.styl","hash":"c0b11a1a5f52e3a6af4e312a8134c93eda18a7dd","modified":1703956997630},{"_id":"themes/butterfly/source/css/_page/categories.styl","hash":"68bc8cbea25dbb3cdc170f09f9b43ce130547717","modified":1703956997632},{"_id":"themes/butterfly/source/css/_page/common.styl","hash":"df7a51fcabbadab5aa31770e3202a47c9599bbb7","modified":1703956997632},{"_id":"themes/butterfly/source/css/_page/404.styl","hash":"a7223a8fcc4fa7b81e552c9a2554be7df9de312e","modified":1703956997631},{"_id":"themes/butterfly/source/css/_page/tags.styl","hash":"9e35f91847773b915c74a78b8aa66c7bdb950ad0","modified":1703956997633},{"_id":"themes/butterfly/source/css/_page/homepage.styl","hash":"a977cd8161ef4d6ddd5293e81403519076657430","modified":1703956997633},{"_id":"themes/butterfly/source/css/_mode/darkmode.styl","hash":"dbc855795a881f8c805bf5c9c5c4d5d542a648ec","modified":1703956997631},{"_id":"themes/butterfly/source/css/_page/flink.styl","hash":"ecc2b2e28c179eb9406fc2c6f00e141078249cdd","modified":1703956997632},{"_id":"themes/butterfly/source/css/_mode/readmode.styl","hash":"a22fd15048d21452f0015d0765d295d730203308","modified":1703956997631},{"_id":"themes/butterfly/source/css/_tags/gallery.styl","hash":"3e9355b76f87e2ee90f652855282b37ab5ae0b3e","modified":1703956997634},{"_id":"themes/butterfly/source/css/_search/index.styl","hash":"0b23010154e19f37f0c4af0110f9f834d6d41a13","modified":1703956997633},{"_id":"themes/butterfly/source/css/_search/local-search.styl","hash":"8a53d7ba5ca2f5eb4124b684e7845b648583f658","modified":1703956997633},{"_id":"themes/butterfly/source/css/_tags/button.styl","hash":"62da1de0d5b8453fcecbfacddb16985265638ba5","modified":1703956997634},{"_id":"themes/butterfly/source/css/_search/algolia.styl","hash":"37db99299af380e9111dce2a78a5049b301b13e0","modified":1703956997633},{"_id":"themes/butterfly/source/css/_tags/hexo.styl","hash":"985b183db7b7bfd8f9bdb60494549fb7f850348b","modified":1703956997634},{"_id":"themes/butterfly/source/css/_tags/inlineImg.styl","hash":"5a873d01fabebcf7ddf7a6b1c2e2e5e2714097f4","modified":1703956997634},{"_id":"themes/butterfly/source/css/_tags/hide.styl","hash":"b7cf7753479fcf2fe07287ffdb0e568adbba4c18","modified":1703956997634},{"_id":"themes/butterfly/source/css/_tags/tabs.styl","hash":"353b95f9a6c2c1e777d978118cb61f909ccbf89c","modified":1703956997635},{"_id":"themes/butterfly/source/css/_tags/note.styl","hash":"4929382bd60788d34752a66e2fe764ef797a72a0","modified":1703956997635},{"_id":"themes/butterfly/source/css/_third-party/normalize.min.css","hash":"8549829fb7d3c21cd9e119884962e8c463a4a267","modified":1703956997636},{"_id":"themes/butterfly/source/css/_tags/label.styl","hash":"2f83bd145b870d80d4b18b0ac603235229a5694e","modified":1703956997635},{"_id":"themes/butterfly/source/js/search/local-search.js","hash":"ab3904451ae1d78903424b8b2ef815c8571e1749","modified":1703956997638},{"_id":"themes/butterfly/source/css/_tags/timeline.styl","hash":"07ea7134db7a66c87658116f089fb1a2a6906563","modified":1703956997635},{"_id":"themes/butterfly/source/js/search/algolia.js","hash":"a7c2fe73cc05ad3525909b86ad0ede1a9f2d3b48","modified":1703956997638},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/index.pug","hash":"58f37823f6cd9a194fb50f7ca7c2233e49939034","modified":1703956997598},{"_id":"themes/butterfly/layout/includes/third-party/abcjs/abcjs.pug","hash":"8f95aca305b56ccd7c8c7367b03d26db816ebd5f","modified":1703956997598},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/index.pug","hash":"846cabae287ae31b3bbfac3da022475713dd5ecc","modified":1703956997599},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/disqus.pug","hash":"d6fff5a7f84c8b09f282f9ddc0020a68a8aac9ea","modified":1703956997599},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/artalk.pug","hash":"19b5cfa1f77781246e02967cefe149f19170e45f","modified":1703956997599},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/fb.pug","hash":"4b98145d6584d586cabf033493282afc72ae816a","modified":1703956997599},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/remark42.pug","hash":"716dc463fe4ef5112e7018ed60804125fdfa5cad","modified":1703956997600},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/valine.pug","hash":"cd4fc9c5a61608a5dedf645c1295430a1623040f","modified":1703956997600},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/twikoo.pug","hash":"7e233f872aea6fd6beccdc9efd86b1bf9ec9f12d","modified":1703956997600},{"_id":"themes/butterfly/layout/includes/third-party/card-post-count/waline.pug","hash":"fd2320ee25507bb8ef49f932c2d170586b44ea4d","modified":1703956997600},{"_id":"themes/butterfly/layout/includes/third-party/chat/chatra.pug","hash":"08a85e52fc800d3562df869e5e2613313e76fce6","modified":1703956997601},{"_id":"themes/butterfly/layout/includes/third-party/chat/crisp.pug","hash":"09d2ab2570b67e6f09244a898ccab5567cb82ace","modified":1703956997601},{"_id":"themes/butterfly/layout/includes/third-party/chat/daovoice.pug","hash":"0d960849d5b05d27ec87627b983ca35f2411b9e8","modified":1703956997601},{"_id":"themes/butterfly/layout/includes/third-party/chat/tidio.pug","hash":"6d40b521eec4136f6742c548a4445ed593470b1b","modified":1703956997602},{"_id":"themes/butterfly/layout/includes/third-party/chat/messenger.pug","hash":"799da8f3015e6fe440681b21644bcb3810a5518c","modified":1703956997601},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqusjs.pug","hash":"f78c9c20c86d58c7cf099f6f8d6097103d7d43e5","modified":1703956997602},{"_id":"themes/butterfly/layout/includes/third-party/comments/artalk.pug","hash":"2dc9f36085ed33d040549fa3954e8fdecf1e5c6d","modified":1703956997602},{"_id":"themes/butterfly/layout/includes/third-party/comments/facebook_comments.pug","hash":"11f5dca1432e59f22955aaf4ac3e9de6b286d887","modified":1703956997603},{"_id":"themes/butterfly/layout/includes/third-party/comments/disqus.pug","hash":"364d1fd655baca9132038ef1e312abde2c0bc7de","modified":1703956997602},{"_id":"themes/butterfly/layout/includes/third-party/chat/index.pug","hash":"1157118db9f5d7c0c5a0fc7c346f6e934ca00d52","modified":1703956997601},{"_id":"themes/butterfly/layout/includes/third-party/comments/index.pug","hash":"db6713d2b90eb8183f86ac92c26761a8501c0ddb","modified":1703956997603},{"_id":"themes/butterfly/layout/includes/third-party/comments/gitalk.pug","hash":"1c86c8fc1a28514a02a1f6a25ca9ec05eb3955b7","modified":1703956997603},{"_id":"themes/butterfly/layout/includes/third-party/comments/giscus.pug","hash":"1eab7ca1cb16c6786f9c3ca0efef8cc15e444ab4","modified":1703956997603},{"_id":"themes/butterfly/layout/includes/third-party/comments/livere.pug","hash":"09c2ef4bc6d005f96dfa48b1d9af1ec095c5266d","modified":1703956997604},{"_id":"themes/butterfly/source/css/_page/archives.styl","hash":"5dd1ba997741d02894ff846eda939ad8051c0bb2","modified":1703956997632},{"_id":"themes/butterfly/layout/includes/third-party/comments/js.pug","hash":"3abbaaa4ea575c45b3cebffd40bad1acc6ffce84","modified":1703956997604},{"_id":"themes/butterfly/layout/includes/third-party/comments/utterances.pug","hash":"b65a42167df5fb07e2a63f312a58c321d3112a90","modified":1703956997604},{"_id":"themes/butterfly/layout/includes/third-party/comments/valine.pug","hash":"4ed7c74087e81c6fcaf4fca7dced58b4e19f4cb1","modified":1703956997605},{"_id":"themes/butterfly/layout/includes/third-party/math/index.pug","hash":"2afa4c21dd19890f47fb568cfb0d90efb676a253","modified":1703956997605},{"_id":"themes/butterfly/layout/includes/third-party/comments/remark42.pug","hash":"7f450664e6323a076ae59c393b0f22167cfa82e5","modified":1703956997604},{"_id":"themes/butterfly/layout/includes/third-party/math/mathjax.pug","hash":"bb944185f4bb9f9a9b9d70ee215f66ccd6d4c6cf","modified":1703956997606},{"_id":"themes/butterfly/layout/includes/third-party/comments/waline.pug","hash":"a7d794987bde815607206254df6549a5a53e2cb0","modified":1703956997605},{"_id":"themes/butterfly/layout/includes/third-party/math/katex.pug","hash":"f0d3eddd2bed68e5517274b3530bfe0fa5057d8e","modified":1703956997606},{"_id":"themes/butterfly/layout/includes/third-party/share/share-js.pug","hash":"8106bd031586f075a994956ee4438eb13be25d7b","modified":1703956997612},{"_id":"themes/butterfly/layout/includes/third-party/share/index.pug","hash":"c16ee69b5ca8db016db0508d014ae0867c4ce929","modified":1703956997612},{"_id":"themes/butterfly/layout/includes/third-party/share/addtoany.pug","hash":"1f02a26730e5f36cc2dfec7ff4d5c93a099ed5ba","modified":1703956997612},{"_id":"themes/butterfly/layout/includes/third-party/search/algolia.pug","hash":"90338ac4cd114d324fe1caaaeea8be9ca05d6a46","modified":1703956997610},{"_id":"themes/butterfly/layout/includes/third-party/search/index.pug","hash":"3adcf28a8d205ea3ee19828eda0e668702fac07a","modified":1703956997611},{"_id":"themes/butterfly/layout/includes/third-party/math/mermaid.pug","hash":"c682e4d61017fb0dd2e837bfcc242371f1a13364","modified":1703956997606},{"_id":"themes/butterfly/layout/includes/third-party/comments/twikoo.pug","hash":"0b44f6de0f5632b55298d506833f45dae46a6346","modified":1703956997604},{"_id":"themes/butterfly/layout/includes/third-party/search/docsearch.pug","hash":"52a06a2e039f44383085333cac69f3f4e7d0ad3a","modified":1703956997610},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/index.pug","hash":"f8b65460c399973090c1fb7ab81e3708c252e7cc","modified":1703956997608},{"_id":"themes/butterfly/layout/includes/third-party/search/local-search.pug","hash":"420a86e73d0d748ac234fd00d06d9e433ca5e3f2","modified":1703956997611},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/remark42.pug","hash":"a4e52188b6effeee1df2a01dcbf4105de76a61a8","modified":1703956997608},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/artalk.pug","hash":"6de0c412a4d9b65c576ec79e1949925823c90fa6","modified":1703956997606},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/github-issues.pug","hash":"fc8814bd016d039874ec2fc24dcb78587892e2a6","modified":1703956997607},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/twikoo-comment.pug","hash":"17520a86de12ae585289463c066d3ac91b78a2ff","modified":1703956997608},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/valine.pug","hash":"ecfff55b2c7f6d87ce4d5028fdf9f8c0bf155c73","modified":1703956997608},{"_id":"themes/butterfly/source/css/_highlight/prismjs/index.styl","hash":"01ff9e77eb1bd454bec65a6ff5972c8e219bc708","modified":1703956997627},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/disqus-comment.pug","hash":"d8898e427acd91ceb97d6a7ee3acb011ca86b9fc","modified":1703956997607},{"_id":"themes/butterfly/source/css/_highlight/highlight/index.styl","hash":"fc702a4614d0562a381907b083f71ba63d301d86","modified":1703956997626},{"_id":"themes/butterfly/source/css/_highlight/prismjs/diff.styl","hash":"1309292f1c8c53d96cd7333507b106bcc24ca8fc","modified":1703956997627},{"_id":"themes/butterfly/source/css/_highlight/highlight/diff.styl","hash":"6e77f1ca0cfb0db6b028f5c0238780e66d344f3d","modified":1703956997626},{"_id":"themes/butterfly/layout/includes/third-party/newest-comments/waline.pug","hash":"0544d91c0bc9e26e0fe1b5ff490f4a8540ed1ee1","modified":1703956997608},{"_id":"themes/butterfly/source/css/_highlight/prismjs/line-number.styl","hash":"7c9cc43e1d2577f7151039d58e603c30860fd281","modified":1703956997627},{"_id":"source/_posts/2024-Summer-REU-experience/HPC.jpg","hash":"ae21d3c62dcbae63f96a9cdb0e7104cc80d73bea","modified":1735176598382},{"_id":"source/_posts/End-of-2023-New-Year-s-Resolution/stuff.png","hash":"2ef5507193ba3f1e10ad095bd58d97204ce01472","modified":1735176598470},{"_id":"source/_posts/2024-Summer-REU-experience/reugang.jfif","hash":"18c55347bf4da73871cddb6252c88b1a1a61a55a","modified":1735176598457},{"_id":"source/_posts/Paper-Reading-2-R-CNN-Fast-R-CNN-Faster-R-CNN/selective.png","hash":"c197d5f337b1150121a84bef98ee17f4dd9eac95","modified":1735176598496},{"_id":"source/_posts/2024-Summer-REU-experience/poster.jpg","hash":"f417e9df398c4b99b8b16b305a66ffb75bec000c","modified":1735176598447},{"_id":"source/_posts/2024-Summer-REU-experience/1606.05908v3.pdf","hash":"d23599c6b30275aff46c3299b5c22f60dbcff9f6","modified":1735176598373},{"_id":"source/_posts/2024-Summer-REU-experience/mayo1.jpg","hash":"0c94185e067c8c17e1a99fa5728fd478c664a789","modified":1735176598429},{"_id":"source/_posts/2024-Summer-REU-experience/IMG_20240602_182202.jpg","hash":"09acfb35462eb922153746ab63d881aa60e1405a","modified":1735176598404},{"_id":"source/_posts/2024-Summer-REU-experience/IMG_20240607_120039.jpg","hash":"db2f761faffc62c1f0baf74b772870330e3408f5","modified":1735176598411},{"_id":"source/_posts/2024-Summer-REU-experience/mayo2.jpg","hash":"f4fbe3511f497e3a0d3fabe81da884dd3e4226c5","modified":1735176598439},{"_id":"source/_posts/2024-Summer-REU-experience/food.jpg","hash":"800e2b2d40175d1ad523e29e0f556de7c61da57f","modified":1735176598423},{"_id":"public/css/modify.css","hash":"7e9d4ed9356a0f360f35a0acdf4c8c75e334b11d","modified":1735720750627},{"_id":"public/2025/01/01/End-of-2024-New-Year-s-Resolution/index.html","hash":"b9940c72b3b0674fdc4dec3d71769090645d5fea","modified":1735720750627},{"_id":"public/404.html","hash":"569f0853552ee884a8828806f64cd7e1afae1ae1","modified":1735720750627},{"_id":"public/2024/12/25/Paper-Reading-3-BERT-RoBERTa-LoRA/index.html","hash":"42da2bd41c79b47dbac9e2cf91862f516a642139","modified":1735720750627},{"_id":"public/2024/05/11/Linear-Algebra-in-ML-1-PCA/index.html","hash":"b5e19bf9f1a47f61bfcf63da69409a3ec3cefe53","modified":1735720750627},{"_id":"public/2024/03/02/Paper-Reading-2-R-CNN-Fast-R-CNN-Faster-R-CNN/index.html","hash":"5871debabda96536235b424d4710e09fbd50113d","modified":1735720750627},{"_id":"public/2024/02/24/Paper-Reading-1-AlexNet-VGG-and-U-Net/index.html","hash":"6bd1a9cb4d9a13f19a082b3edae95f7edc858ea7","modified":1735720750627},{"_id":"public/2024/03/23/CM-CF-Practice/index.html","hash":"4ed311c99fff8bd7d82c9752b7f34aadfa678378","modified":1735720750627},{"_id":"public/2024/02/21/New-Goal-Read-Papers/index.html","hash":"1d618d14ab8b9bd7892a6ecd74b0c2667859133a","modified":1735720750627},{"_id":"public/2024/02/11/Interesting-CodeChef-Problem/index.html","hash":"219f6d8bb48b69137ed37ee4b02ad3f6f079fafd","modified":1735720750627},{"_id":"public/2024/08/22/2024-Summer-REU-experience/index.html","hash":"ba2bdf3b59caa150f1f858c4dabe06be4fd1b61c","modified":1735720750627},{"_id":"public/2024/02/04/Quick-Review-of-Janurary/index.html","hash":"1012abcb585e78b9e75ce9a22e2f6549264d5905","modified":1735720750627},{"_id":"public/2024/02/19/Music-I-enjoyed-recently-2/index.html","hash":"9e50744fe8d6af5eaddebea1a02ac781ae37c463","modified":1735720750627},{"_id":"public/2024/05/14/End-of-Freshman-Year/index.html","hash":"0cabb262149976bdcaa24bc81aea575f195c0e00","modified":1735720750627},{"_id":"public/2023/12/30/End-of-2023-New-Year-s-Resolution/index.html","hash":"c1070042779beb0adb6672ca964cc36c6ea034cb","modified":1735720750627},{"_id":"public/2023/10/29/Recent-Learnings-and-Contests/index.html","hash":"0a9a65ba82a958816ee9368b41062291dc6b0167","modified":1735720750627},{"_id":"public/2023/10/20/Mashup-grind-feast-1/index.html","hash":"8d66bcd0084438e5b182d32bea616b44103402a3","modified":1735720750627},{"_id":"public/2023/10/12/Music-I-enjoyed-recently/index.html","hash":"a92ec2a671a21ddf941905493c16140b3a24c4a6","modified":1735720750627},{"_id":"public/2023/10/11/Reroot-DP/index.html","hash":"11b7c7fcea69bd8ed58d257fc292ed3df2ff6a2e","modified":1735720750627},{"_id":"public/2023/10/15/ICPC-Practice-1-ECNA-2018-NCNA-2019/index.html","hash":"b62a955846dc1af3e26ad91bbcb51ca60408bebc","modified":1735720750627},{"_id":"public/2023/10/01/NAQ-2023/index.html","hash":"9e830b1d276aaf586f9ed7d782ca92a85cf3ee4e","modified":1735720750627},{"_id":"public/2023/09/28/One-month-what-now/index.html","hash":"dd9d12d4ffe14cfa8cc028e93a47a5acdc2c0ba6","modified":1735720750627},{"_id":"public/2023/09/09/UW-Madison/index.html","hash":"a2a00eaa9c8e4a1e838fa9946dad3deb2cf7aaa4","modified":1735720750627},{"_id":"public/2023/09/28/nostalgic-problem/index.html","hash":"6c3b8eb6ca3843f76c6b96fdf30ef8cfb39f0508","modified":1735720750627},{"_id":"public/2023/08/15/CF-892-Div-2-ABC-314/index.html","hash":"98f6525e37542a540c94d130efa6311998094c6a","modified":1735720750627},{"_id":"public/2023/08/07/Some-thought-about-CP-some-CF/index.html","hash":"5a52ba4671853090deeb9830407d25c3db9a2986","modified":1735720750627},{"_id":"public/2023/08/04/Perm-hair-CF-mashups/index.html","hash":"6d989c5ce019398991b156dc99966f8d49a77b2a","modified":1735720750627},{"_id":"public/2023/08/04/Blog-again/index.html","hash":"5d755cb74d2af07f095812f023f53e49ec31dcd8","modified":1735720750627},{"_id":"public/2023/08/10/Open-source-contribution-cool-problems/index.html","hash":"7499da3385425fa8f6dd0ff8764837147438b8fa","modified":1735720750627},{"_id":"public/archives/index.html","hash":"71c6bfeae5a919d1159c5df6ce3da05857fa81a7","modified":1735720750627},{"_id":"public/archives/page/3/index.html","hash":"4c1e067fb93bc5ecf53dc2cd8ac5662320eb5627","modified":1735720750627},{"_id":"public/archives/2023/index.html","hash":"e66cddffc4ee363d1b64138f25abd00f2904198b","modified":1735720750627},{"_id":"public/archives/page/2/index.html","hash":"dc38cfcb5bf4c97b3ccbfd733c0844a06969f020","modified":1735720750627},{"_id":"public/archives/2023/page/2/index.html","hash":"ac63c51588eab23a697b6013a4cc02c24ed9ec71","modified":1735720750627},{"_id":"public/archives/2023/09/index.html","hash":"e7447cbd3bc71897e4571907031fdcdeb6d59c3c","modified":1735720750627},{"_id":"public/archives/2023/10/index.html","hash":"bb1e430c27a23290d46b94c1637033925f8cfa36","modified":1735720750627},{"_id":"public/archives/2023/08/index.html","hash":"8b92ae85b7aee579c4ad65604f34dec0798859bc","modified":1735720750627},{"_id":"public/archives/2023/12/index.html","hash":"4a047203e651f3b76e5d9e2ca363b468423f94e0","modified":1735720750627},{"_id":"public/archives/2024/page/2/index.html","hash":"3c76ff95c5e5079e65beb38baed53def8d73cc7b","modified":1735720750627},{"_id":"public/archives/2024/01/index.html","hash":"8740d93e5d7f48190612bce98bf606b4ec22c107","modified":1735720750627},{"_id":"public/archives/2024/index.html","hash":"e4c823c9ac43e76b69d4e3d616e982b32c299b41","modified":1735720750627},{"_id":"public/archives/2024/02/index.html","hash":"815e2edf26d3aa45d1ec4f612384a8be611a5376","modified":1735720750627},{"_id":"public/archives/2024/05/index.html","hash":"51916bf0c455ec3b5bdee1d3f96abbe84bb87887","modified":1735720750627},{"_id":"public/archives/2024/08/index.html","hash":"13473336f9852235d5f657b94a19c5a2846eb86c","modified":1735720750627},{"_id":"public/archives/2024/03/index.html","hash":"a017f7d4c273908c8330dac55a4be21fbbdf9bb9","modified":1735720750627},{"_id":"public/archives/2024/12/index.html","hash":"8a5f3a5ce3949b67daef669fe62fe205f686a1f1","modified":1735720750627},{"_id":"public/archives/2025/01/index.html","hash":"bfdd2e9d625a0743e5aa39f10b92edc5c2d4d9c5","modified":1735720750627},{"_id":"public/index.html","hash":"8afd2eb89164d8beb3fa6caf1873c06d3f8b7d63","modified":1735720750627},{"_id":"public/archives/2025/index.html","hash":"f98fb11dbd0097f8970bcbc1f06ace753524e3c9","modified":1735720750627},{"_id":"public/tags/Life/index.html","hash":"ca9938bef050be7f75a1a73af54deaf3ec220a91","modified":1735720750627},{"_id":"public/tags/AI/index.html","hash":"880c7dbb2753d7414a9e2e6e6da323c375172ea0","modified":1735720750627},{"_id":"public/tags/CP/index.html","hash":"767c07ce8a5ef337986bab84d7e35cced251169f","modified":1735720750627},{"_id":"public/tags/Life/page/2/index.html","hash":"809828a882ba4c00cc127a88ae76caff94a4e644","modified":1735720750627},{"_id":"public/tags/CP/page/2/index.html","hash":"bb990e80bc0f0a02677bef0893ac8210bfb1cbe0","modified":1735720750627},{"_id":"public/2023/10/21/2023-Meta-Hacker-Cup/index.html","hash":"03ad2dbad7512dda0d672f9bfff15b6396482c37","modified":1735720750627},{"_id":"public/2024/01/07/CF-1904D-Set-To-Max/index.html","hash":"ef19df652d051d783588ae8ea288fe5be8265af7","modified":1735720750627},{"_id":"public/tags/Math/index.html","hash":"8a2ef9f2b3a3fc1ad634361a1dd7a8027fb27b6d","modified":1735720750627},{"_id":"public/img/favicon.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1735720750627},{"_id":"public/img/404.jpg","hash":"fb4489bc1d30c93d28f7332158c1c6c1416148de","modified":1735720750627},{"_id":"public/img/friend_404.gif","hash":"8d2d0ebef70a8eb07329f57e645889b0e420fa48","modified":1735720750627},{"_id":"public/2023/12/30/End-of-2023-New-Year-s-Resolution/comeback.png","hash":"14ff9b19635491839f5ec109f9e890dcda8b35a2","modified":1735720750627},{"_id":"public/2023/10/20/Mashup-grind-feast-1/mashup1.png","hash":"b668586a296bdb68d8d80fb77d13bdbec315d1c6","modified":1735720750627},{"_id":"public/2024/05/11/Linear-Algebra-in-ML-1-PCA/PCA.png","hash":"3d83814aa8e9d70173fd15eefe91f579e182737a","modified":1735720750627},{"_id":"public/2024/01/07/CF-1904D-Set-To-Max/dumb.png","hash":"ff96e06446a30aa9f6a19ffdbd4f958970d37ed9","modified":1735720750627},{"_id":"public/2023/08/10/Open-source-contribution-cool-problems/merge.png","hash":"6a2fa72f6719439a76d565136b544140e7a89fcf","modified":1735720750627},{"_id":"public/2024/12/25/Paper-Reading-3-BERT-RoBERTa-LoRA/image.png","hash":"87480a3675120c7d429b4acbb01d38941e628307","modified":1735720750627},{"_id":"public/2024/02/04/Quick-Review-of-Janurary/score.png","hash":"f6b77ef3e3b53c7a4794fc78c39acaa23ef8ca35","modified":1735720750627},{"_id":"public/2023/10/11/Reroot-DP/subtreecomp1.png","hash":"c9d9439d48ecfcd18871af19c14c743989c1a181","modified":1735720750627},{"_id":"public/2023/10/11/Reroot-DP/depthroot2.png","hash":"531a2c12b554f3738533549f314cecdb659fb663","modified":1735720750627},{"_id":"public/2023/10/11/Reroot-DP/subtreecomp2.png","hash":"7985c2fd5df77fbd278b98873b231b63bd4d36fb","modified":1735720750627},{"_id":"public/2023/10/11/Reroot-DP/depthroot.png","hash":"3ecc2818d41807fe3c97f62c258426b9f4c4ae75","modified":1735720750627},{"_id":"public/2023/10/11/Reroot-DP/subtree3.png","hash":"943a908d6d368b5148ad72cf00942e9498ce4248","modified":1735720750627},{"_id":"public/2023/10/11/Reroot-DP/treexor.jpg","hash":"463244c58002a95931fb7c3df6fa3f2e5691b1f9","modified":1735720750627},{"_id":"public/css/index.css","hash":"a5ff9d31de6470dcab7618b83c043d2c01ac9534","modified":1735720750627},{"_id":"public/css/var.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1735720750627},{"_id":"public/js/tw_cn.js","hash":"f8d2e3f31468991a7f5171cbfdb157dfb86d3372","modified":1735720750627},{"_id":"public/js/main.js","hash":"0dac585446445e0c419b86eec5580bc9b0657dc6","modified":1735720750627},{"_id":"public/2023/10/01/NAQ-2023/scoreboard.png","hash":"970c0dbb8a9f00b236dc4383938ae7eeff8a2554","modified":1735720750627},{"_id":"public/js/utils.js","hash":"8e6b48d294e7aeaba8ff6348c43b2271cf865547","modified":1735720750627},{"_id":"public/js/search/algolia.js","hash":"108988d046da9a4716148df43b3975217c8ceaae","modified":1735720750627},{"_id":"public/js/search/local-search.js","hash":"e1f60ebac53a3f596fd0a4769b4f9275c48c6542","modified":1735720750627},{"_id":"public/2024/03/02/Paper-Reading-2-R-CNN-Fast-R-CNN-Faster-R-CNN/compare.png","hash":"288103ff8933787fb01c82599050f2b14b1cd2b9","modified":1735720750627},{"_id":"public/2024/02/24/Paper-Reading-1-AlexNet-VGG-and-U-Net/unet.png","hash":"0ecd2835e25ee92eaf7fe589629245097e828818","modified":1735720750627},{"_id":"public/2023/10/21/2023-Meta-Hacker-Cup/image-6.png","hash":"88213d3536be11ac061a52694bdbf33a5684bcf2","modified":1735720750627},{"_id":"public/2024/03/02/Paper-Reading-2-R-CNN-Fast-R-CNN-Faster-R-CNN/R-CNN-Flow.png","hash":"b1d250a7dbca8891eeeb4860752b7c4e364d54cd","modified":1735720750627},{"_id":"public/2024/08/22/2024-Summer-REU-experience/present.jpg","hash":"bc49120c081ffdb5baec3f599cf0c30dbf748070","modified":1735720750627},{"_id":"public/2024/08/22/2024-Summer-REU-experience/IMG_20240602_130433.jpg","hash":"5b7423b471fc03f553ed512142a3605aa7912c1b","modified":1735720750627},{"_id":"public/2024/08/22/2024-Summer-REU-experience/burger.jpg","hash":"07894070cb70fd527321d03bc431197d06a9a0af","modified":1735720750627},{"_id":"public/2024/08/22/2024-Summer-REU-experience/HPC.jpg","hash":"ae21d3c62dcbae63f96a9cdb0e7104cc80d73bea","modified":1735720750627},{"_id":"public/2023/12/30/End-of-2023-New-Year-s-Resolution/stuff.png","hash":"2ef5507193ba3f1e10ad095bd58d97204ce01472","modified":1735720750627},{"_id":"public/2024/08/22/2024-Summer-REU-experience/reugang.jfif","hash":"18c55347bf4da73871cddb6252c88b1a1a61a55a","modified":1735720750627},{"_id":"public/2024/03/02/Paper-Reading-2-R-CNN-Fast-R-CNN-Faster-R-CNN/selective.png","hash":"c197d5f337b1150121a84bef98ee17f4dd9eac95","modified":1735720750627},{"_id":"public/2024/08/22/2024-Summer-REU-experience/poster.jpg","hash":"f417e9df398c4b99b8b16b305a66ffb75bec000c","modified":1735720750627},{"_id":"public/2024/08/22/2024-Summer-REU-experience/mayo1.jpg","hash":"0c94185e067c8c17e1a99fa5728fd478c664a789","modified":1735720750627},{"_id":"public/2024/08/22/2024-Summer-REU-experience/IMG_20240602_182202.jpg","hash":"09acfb35462eb922153746ab63d881aa60e1405a","modified":1735720750627},{"_id":"public/2024/08/22/2024-Summer-REU-experience/1606.05908v3.pdf","hash":"d23599c6b30275aff46c3299b5c22f60dbcff9f6","modified":1735720750627},{"_id":"public/2024/08/22/2024-Summer-REU-experience/IMG_20240607_120039.jpg","hash":"db2f761faffc62c1f0baf74b772870330e3408f5","modified":1735720750627},{"_id":"public/2024/08/22/2024-Summer-REU-experience/mayo2.jpg","hash":"f4fbe3511f497e3a0d3fabe81da884dd3e4226c5","modified":1735720750627},{"_id":"public/2024/08/22/2024-Summer-REU-experience/food.jpg","hash":"800e2b2d40175d1ad523e29e0f556de7c61da57f","modified":1735720750627}],"Category":[],"Data":[],"Page":[{"_content":"/* 侧边栏个人信息卡片动态渐变色 */\n#aside-content>.card-widget.card-info{\n  background: linear-gradient(-45deg, rgba(225,235,255,.6), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.6));\n}\n[data-theme=dark] #aside-content>.card-widget.card-info {\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n/* 侧边栏公告栏卡片渐变色 */\n#aside-content>.card-widget.card-announcement{\n  background: linear-gradient(-45deg, rgba(225,235,255,.6), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.6));\n}\n[data-theme=dark] #aside-content>.card-widget.card-announcement{\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n/* 侧边栏目录最新文章卡片渐变色 */\n#aside-content>.sticky_layout>.card-widget{\n  background: linear-gradient(-45deg, rgba(225,235,255,.6), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.6));\n}\n[data-theme=dark] #aside-content>.sticky_layout>.card-widget{\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n/* 个人信息Follow me按钮 */\n#aside-content>.card-widget.card-info>#card-info-btn {\n  background-color: #3eb8be;\n  border-radius: 8px;\n}\n/*文章页面*/\n.layout>#post {\n  background: linear-gradient(-45deg, rgba(225,235,255,.8), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.8));\n}\n[data-theme=dark] .layout>#post {\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n/*主页文章预览页面*/\n#recent-posts>.recent-post-item{\n  background: linear-gradient(-45deg, rgba(225,235,255,.8), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.8));\n}\n[data-theme=dark] #recent-posts>.recent-post-item{\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n\n/*分类页面*/\n.layout>#page {\n  background: linear-gradient(-45deg, rgba(225,235,255,.8), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.8));\n}\n[data-theme=dark] .layout>#page {\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n\n/*时间轴页面*/\n.layout>#archive {\n  background: linear-gradient(-45deg, rgba(225,235,255,.8), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.8));\n}\n[data-theme=dark] .layout>#archive {\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n/* 侧边栏个人信息卡片动态渐变色 */\n#pagination>.card-widget.card-info{\n  background: linear-gradient(-45deg, rgba(225,235,255,.6), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.6));\n}\n[data-theme=dark] #pagination>.card-widget.card-info {\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}","source":"css/modify.css","raw":"/* 侧边栏个人信息卡片动态渐变色 */\n#aside-content>.card-widget.card-info{\n  background: linear-gradient(-45deg, rgba(225,235,255,.6), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.6));\n}\n[data-theme=dark] #aside-content>.card-widget.card-info {\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n/* 侧边栏公告栏卡片渐变色 */\n#aside-content>.card-widget.card-announcement{\n  background: linear-gradient(-45deg, rgba(225,235,255,.6), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.6));\n}\n[data-theme=dark] #aside-content>.card-widget.card-announcement{\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n/* 侧边栏目录最新文章卡片渐变色 */\n#aside-content>.sticky_layout>.card-widget{\n  background: linear-gradient(-45deg, rgba(225,235,255,.6), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.6));\n}\n[data-theme=dark] #aside-content>.sticky_layout>.card-widget{\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n/* 个人信息Follow me按钮 */\n#aside-content>.card-widget.card-info>#card-info-btn {\n  background-color: #3eb8be;\n  border-radius: 8px;\n}\n/*文章页面*/\n.layout>#post {\n  background: linear-gradient(-45deg, rgba(225,235,255,.8), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.8));\n}\n[data-theme=dark] .layout>#post {\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n/*主页文章预览页面*/\n#recent-posts>.recent-post-item{\n  background: linear-gradient(-45deg, rgba(225,235,255,.8), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.8));\n}\n[data-theme=dark] #recent-posts>.recent-post-item{\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n\n/*分类页面*/\n.layout>#page {\n  background: linear-gradient(-45deg, rgba(225,235,255,.8), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.8));\n}\n[data-theme=dark] .layout>#page {\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n\n/*时间轴页面*/\n.layout>#archive {\n  background: linear-gradient(-45deg, rgba(225,235,255,.8), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.8));\n}\n[data-theme=dark] .layout>#archive {\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n/* 侧边栏个人信息卡片动态渐变色 */\n#pagination>.card-widget.card-info{\n  background: linear-gradient(-45deg, rgba(225,235,255,.6), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.6));\n}\n[data-theme=dark] #pagination>.card-widget.card-info {\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}","date":"2024-12-26T01:29:58.507Z","updated":"2024-12-26T01:29:58.507Z","path":"css/modify.css","layout":"false","title":"","comments":1,"_id":"cm5dnblgc0000b0u9hnbo3nva","content":"/* 侧边栏个人信息卡片动态渐变色 */\n#aside-content>.card-widget.card-info{\n  background: linear-gradient(-45deg, rgba(225,235,255,.6), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.6));\n}\n[data-theme=dark] #aside-content>.card-widget.card-info {\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n/* 侧边栏公告栏卡片渐变色 */\n#aside-content>.card-widget.card-announcement{\n  background: linear-gradient(-45deg, rgba(225,235,255,.6), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.6));\n}\n[data-theme=dark] #aside-content>.card-widget.card-announcement{\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n/* 侧边栏目录最新文章卡片渐变色 */\n#aside-content>.sticky_layout>.card-widget{\n  background: linear-gradient(-45deg, rgba(225,235,255,.6), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.6));\n}\n[data-theme=dark] #aside-content>.sticky_layout>.card-widget{\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n/* 个人信息Follow me按钮 */\n#aside-content>.card-widget.card-info>#card-info-btn {\n  background-color: #3eb8be;\n  border-radius: 8px;\n}\n/*文章页面*/\n.layout>#post {\n  background: linear-gradient(-45deg, rgba(225,235,255,.8), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.8));\n}\n[data-theme=dark] .layout>#post {\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n/*主页文章预览页面*/\n#recent-posts>.recent-post-item{\n  background: linear-gradient(-45deg, rgba(225,235,255,.8), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.8));\n}\n[data-theme=dark] #recent-posts>.recent-post-item{\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n\n/*分类页面*/\n.layout>#page {\n  background: linear-gradient(-45deg, rgba(225,235,255,.8), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.8));\n}\n[data-theme=dark] .layout>#page {\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n\n/*时间轴页面*/\n.layout>#archive {\n  background: linear-gradient(-45deg, rgba(225,235,255,.8), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.8));\n}\n[data-theme=dark] .layout>#archive {\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n/* 侧边栏个人信息卡片动态渐变色 */\n#pagination>.card-widget.card-info{\n  background: linear-gradient(-45deg, rgba(225,235,255,.6), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.6));\n}\n[data-theme=dark] #pagination>.card-widget.card-info {\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}","site":{"data":{}},"cover":"transparent","excerpt":"","more":"/* 侧边栏个人信息卡片动态渐变色 */\n#aside-content>.card-widget.card-info{\n  background: linear-gradient(-45deg, rgba(225,235,255,.6), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.6));\n}\n[data-theme=dark] #aside-content>.card-widget.card-info {\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n/* 侧边栏公告栏卡片渐变色 */\n#aside-content>.card-widget.card-announcement{\n  background: linear-gradient(-45deg, rgba(225,235,255,.6), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.6));\n}\n[data-theme=dark] #aside-content>.card-widget.card-announcement{\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n/* 侧边栏目录最新文章卡片渐变色 */\n#aside-content>.sticky_layout>.card-widget{\n  background: linear-gradient(-45deg, rgba(225,235,255,.6), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.6));\n}\n[data-theme=dark] #aside-content>.sticky_layout>.card-widget{\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n/* 个人信息Follow me按钮 */\n#aside-content>.card-widget.card-info>#card-info-btn {\n  background-color: #3eb8be;\n  border-radius: 8px;\n}\n/*文章页面*/\n.layout>#post {\n  background: linear-gradient(-45deg, rgba(225,235,255,.8), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.8));\n}\n[data-theme=dark] .layout>#post {\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n/*主页文章预览页面*/\n#recent-posts>.recent-post-item{\n  background: linear-gradient(-45deg, rgba(225,235,255,.8), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.8));\n}\n[data-theme=dark] #recent-posts>.recent-post-item{\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n\n/*分类页面*/\n.layout>#page {\n  background: linear-gradient(-45deg, rgba(225,235,255,.8), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.8));\n}\n[data-theme=dark] .layout>#page {\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n\n/*时间轴页面*/\n.layout>#archive {\n  background: linear-gradient(-45deg, rgba(225,235,255,.8), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.8));\n}\n[data-theme=dark] .layout>#archive {\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}\n/* 侧边栏个人信息卡片动态渐变色 */\n#pagination>.card-widget.card-info{\n  background: linear-gradient(-45deg, rgba(225,235,255,.6), \nrgba(225,235,255,.9), \nrgba(225,235,255,.9), \nrgba(225,235,255,.6));\n}\n[data-theme=dark] #pagination>.card-widget.card-info {\n  background: linear-gradient(-45deg, rgba(24,40,72,.2), \nrgba(35,37,58,.9), \nrgba(35,37,58,.9), \nrgba(24,40,72,.2));\n}"}],"Post":[{"title":"2024 Summer REU experience","date":"2024-08-22T20:15:09.000Z","_content":"This is a simple blog post talking about my REU experience at UW Eau Claire in summer 2024.\n\nFirst, I want to explain what REU is. Research Experience for Undergraduates (REU) is a program that provides research opportunities for undergraduates in various fields of science and engineering. Essentially, it's a summer research program for college students funded by the National Science Foundation (NSF). \n\nIt's actually a pretty competitive program, and I was lucky to be selected just before giving up hope, and had to change plans last minute regarding my Taiwan trip.\n\nIt was quite an excruciating journey there, as I went from Taiwan to Chicago, took a bus to Madison first, and then another bus to Eau Claire.\n\nMy first impression of Eau Claire was that it is really beautiful, with lots of greenery and lakes, something only a rural area can offer.\n\n<img src=\"IMG_20240607_120039.jpg\" width=\"400\">\n\n<img src=\"IMG_20240602_182202.jpg\" width=\"400\">\n\nThen, I met other students in the program, most were pretty chill, while some I only was able to talk to for a few times. There was 10 students in the program, ranging from CS, Biology, Physics, and Chemistry. It's really interesting how everyone has different backgrounds and how they ended up in this program. One skipped half of high school and one was already 36 years old!\n\nThis was the room that I stayed in for the summer. Looks small, but it was actually pretty spacious for me.\n\n<img src=\"IMG_20240602_130433.jpg\" width=\"400\">\n\nNow let's talk about the project I worked on. I worked on a extremely new topic called \"Open Set Domain Adpatiation for Semantic Segmentation\". Originally, Dr. Gomes wanted to work on using generative models for UDA, but I thought it was too simple and wanted to do something more challenging. Coincidentally, A CVPR paper just came out about tackling UDA for semantic segmentation in a open set manner, and I thought it was a good opportunity to try it out. I was the only person in this project, and unfortunately my mentor was also quite busy dealing with other projects, so I was on my own for most of the time.\n\nHonestly, I wasn't really able to do much, as the code was only released a month after the program started, and my ideas were all unsuccessful. I did have a much better understanding of the topic (OOD especially), and I learned a lot of new things, so it wasn't a waste. I will continue to work on this project in the future, and see if I can make it work. We did present our results at the end in a symposium, but it was pretty small, so it was not that exciting. I did meet some cool people though!\n\n<img src=\"present.jpg\" width=\"400\">\n\n<img src=\"poster.jpg\" width=\"400\">\n\nNext, I want to talk about some activities I did with people during the program. First, we went to quite a few local dining places in Eau Claire, and they were all pretty good. The burgers were huge and delicious, although a bit too greasy for my liking at the end. The ice cream was also very good, as Wisconsin is known for its dairy products. We also went to watch the movie \"Deadpool and Wolverine\", and the seats in the theater was adjustable, which was pretty cool. We also went kayaking, which was a lot of fun, although extremely exhausting (It was also raining cats and dogs at the end, which made it super chaotic but fun). We were also on a local news channel by accident, and it was pretty funny.\n\n<img src=\"burger.jpg\" width=\"400\">\n\n<img src=\"food.jpg\" width=\"400\">\n\nThe most memorable activity was our trip to Mayo Clinic in Rochester, MN. We had a short tour of the clinic, and was explained how AI is currently developed and used in the clinic. It was really cool to see how AI is used in a real-world setting, and I learned a lot of new things. I connected with several people there, and I am considering to apply for a summer AI research internship there next year.\n\n<img src=\"mayo1.jpg\" width=\"400\">\n\n<img src=\"mayo2.jpg\" width=\"400\">\n\nLastly, we also visited the HPC center, where I saw the GPUs that ran my code for the project.\n\n<img src=\"HPC.jpg\" width=\"400\">\n\nIn summary, this was a really cool experience, and I learned a lot of new things. I also met some cool people and established connections. It also made me understand the hardships of doing research, and I am more motivated to do well in the future.\n\n<img src=\"reugang.jfif\" width=\"700\">\n\n\n\n\n","source":"_posts/2024-Summer-REU-experience.md","raw":"---\ntitle: 2024 Summer REU experience\ndate: 2024-08-22 15:15:09\ntags: [\"Life\", \"AI\"]\n---\nThis is a simple blog post talking about my REU experience at UW Eau Claire in summer 2024.\n\nFirst, I want to explain what REU is. Research Experience for Undergraduates (REU) is a program that provides research opportunities for undergraduates in various fields of science and engineering. Essentially, it's a summer research program for college students funded by the National Science Foundation (NSF). \n\nIt's actually a pretty competitive program, and I was lucky to be selected just before giving up hope, and had to change plans last minute regarding my Taiwan trip.\n\nIt was quite an excruciating journey there, as I went from Taiwan to Chicago, took a bus to Madison first, and then another bus to Eau Claire.\n\nMy first impression of Eau Claire was that it is really beautiful, with lots of greenery and lakes, something only a rural area can offer.\n\n<img src=\"IMG_20240607_120039.jpg\" width=\"400\">\n\n<img src=\"IMG_20240602_182202.jpg\" width=\"400\">\n\nThen, I met other students in the program, most were pretty chill, while some I only was able to talk to for a few times. There was 10 students in the program, ranging from CS, Biology, Physics, and Chemistry. It's really interesting how everyone has different backgrounds and how they ended up in this program. One skipped half of high school and one was already 36 years old!\n\nThis was the room that I stayed in for the summer. Looks small, but it was actually pretty spacious for me.\n\n<img src=\"IMG_20240602_130433.jpg\" width=\"400\">\n\nNow let's talk about the project I worked on. I worked on a extremely new topic called \"Open Set Domain Adpatiation for Semantic Segmentation\". Originally, Dr. Gomes wanted to work on using generative models for UDA, but I thought it was too simple and wanted to do something more challenging. Coincidentally, A CVPR paper just came out about tackling UDA for semantic segmentation in a open set manner, and I thought it was a good opportunity to try it out. I was the only person in this project, and unfortunately my mentor was also quite busy dealing with other projects, so I was on my own for most of the time.\n\nHonestly, I wasn't really able to do much, as the code was only released a month after the program started, and my ideas were all unsuccessful. I did have a much better understanding of the topic (OOD especially), and I learned a lot of new things, so it wasn't a waste. I will continue to work on this project in the future, and see if I can make it work. We did present our results at the end in a symposium, but it was pretty small, so it was not that exciting. I did meet some cool people though!\n\n<img src=\"present.jpg\" width=\"400\">\n\n<img src=\"poster.jpg\" width=\"400\">\n\nNext, I want to talk about some activities I did with people during the program. First, we went to quite a few local dining places in Eau Claire, and they were all pretty good. The burgers were huge and delicious, although a bit too greasy for my liking at the end. The ice cream was also very good, as Wisconsin is known for its dairy products. We also went to watch the movie \"Deadpool and Wolverine\", and the seats in the theater was adjustable, which was pretty cool. We also went kayaking, which was a lot of fun, although extremely exhausting (It was also raining cats and dogs at the end, which made it super chaotic but fun). We were also on a local news channel by accident, and it was pretty funny.\n\n<img src=\"burger.jpg\" width=\"400\">\n\n<img src=\"food.jpg\" width=\"400\">\n\nThe most memorable activity was our trip to Mayo Clinic in Rochester, MN. We had a short tour of the clinic, and was explained how AI is currently developed and used in the clinic. It was really cool to see how AI is used in a real-world setting, and I learned a lot of new things. I connected with several people there, and I am considering to apply for a summer AI research internship there next year.\n\n<img src=\"mayo1.jpg\" width=\"400\">\n\n<img src=\"mayo2.jpg\" width=\"400\">\n\nLastly, we also visited the HPC center, where I saw the GPUs that ran my code for the project.\n\n<img src=\"HPC.jpg\" width=\"400\">\n\nIn summary, this was a really cool experience, and I learned a lot of new things. I also met some cool people and established connections. It also made me understand the hardships of doing research, and I am more motivated to do well in the future.\n\n<img src=\"reugang.jfif\" width=\"700\">\n\n\n\n\n","slug":"2024-Summer-REU-experience","published":1,"updated":"2024-12-26T01:29:58.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblgk0001b0u9g8y5e4gm","content":"<p>This is a simple blog post talking about my REU experience at UW Eau Claire in summer 2024.</p>\n<p>First, I want to explain what REU is. Research Experience for Undergraduates (REU) is a program that provides research opportunities for undergraduates in various fields of science and engineering. Essentially, it’s a summer research program for college students funded by the National Science Foundation (NSF).</p>\n<p>It’s actually a pretty competitive program, and I was lucky to be selected just before giving up hope, and had to change plans last minute regarding my Taiwan trip.</p>\n<p>It was quite an excruciating journey there, as I went from Taiwan to Chicago, took a bus to Madison first, and then another bus to Eau Claire.</p>\n<p>My first impression of Eau Claire was that it is really beautiful, with lots of greenery and lakes, something only a rural area can offer.</p>\n<img src=\"IMG_20240607_120039.jpg\" width=\"400\">\n<img src=\"IMG_20240602_182202.jpg\" width=\"400\">\n<p>Then, I met other students in the program, most were pretty chill, while some I only was able to talk to for a few times. There was 10 students in the program, ranging from CS, Biology, Physics, and Chemistry. It’s really interesting how everyone has different backgrounds and how they ended up in this program. One skipped half of high school and one was already 36 years old!</p>\n<p>This was the room that I stayed in for the summer. Looks small, but it was actually pretty spacious for me.</p>\n<img src=\"IMG_20240602_130433.jpg\" width=\"400\">\n<p>Now let’s talk about the project I worked on. I worked on a extremely new topic called “Open Set Domain Adpatiation for Semantic Segmentation”. Originally, Dr. Gomes wanted to work on using generative models for UDA, but I thought it was too simple and wanted to do something more challenging. Coincidentally, A CVPR paper just came out about tackling UDA for semantic segmentation in a open set manner, and I thought it was a good opportunity to try it out. I was the only person in this project, and unfortunately my mentor was also quite busy dealing with other projects, so I was on my own for most of the time.</p>\n<p>Honestly, I wasn’t really able to do much, as the code was only released a month after the program started, and my ideas were all unsuccessful. I did have a much better understanding of the topic (OOD especially), and I learned a lot of new things, so it wasn’t a waste. I will continue to work on this project in the future, and see if I can make it work. We did present our results at the end in a symposium, but it was pretty small, so it was not that exciting. I did meet some cool people though!</p>\n<img src=\"present.jpg\" width=\"400\">\n<img src=\"poster.jpg\" width=\"400\">\n<p>Next, I want to talk about some activities I did with people during the program. First, we went to quite a few local dining places in Eau Claire, and they were all pretty good. The burgers were huge and delicious, although a bit too greasy for my liking at the end. The ice cream was also very good, as Wisconsin is known for its dairy products. We also went to watch the movie “Deadpool and Wolverine”, and the seats in the theater was adjustable, which was pretty cool. We also went kayaking, which was a lot of fun, although extremely exhausting (It was also raining cats and dogs at the end, which made it super chaotic but fun). We were also on a local news channel by accident, and it was pretty funny.</p>\n<img src=\"burger.jpg\" width=\"400\">\n<img src=\"food.jpg\" width=\"400\">\n<p>The most memorable activity was our trip to Mayo Clinic in Rochester, MN. We had a short tour of the clinic, and was explained how AI is currently developed and used in the clinic. It was really cool to see how AI is used in a real-world setting, and I learned a lot of new things. I connected with several people there, and I am considering to apply for a summer AI research internship there next year.</p>\n<img src=\"mayo1.jpg\" width=\"400\">\n<img src=\"mayo2.jpg\" width=\"400\">\n<p>Lastly, we also visited the HPC center, where I saw the GPUs that ran my code for the project.</p>\n<img src=\"HPC.jpg\" width=\"400\">\n<p>In summary, this was a really cool experience, and I learned a lot of new things. I also met some cool people and established connections. It also made me understand the hardships of doing research, and I am more motivated to do well in the future.</p>\n<img src=\"reugang.jfif\" width=\"700\">\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>This is a simple blog post talking about my REU experience at UW Eau Claire in summer 2024.</p>\n<p>First, I want to explain what REU is. Research Experience for Undergraduates (REU) is a program that provides research opportunities for undergraduates in various fields of science and engineering. Essentially, it’s a summer research program for college students funded by the National Science Foundation (NSF).</p>\n<p>It’s actually a pretty competitive program, and I was lucky to be selected just before giving up hope, and had to change plans last minute regarding my Taiwan trip.</p>\n<p>It was quite an excruciating journey there, as I went from Taiwan to Chicago, took a bus to Madison first, and then another bus to Eau Claire.</p>\n<p>My first impression of Eau Claire was that it is really beautiful, with lots of greenery and lakes, something only a rural area can offer.</p>\n<img src=\"IMG_20240607_120039.jpg\" width=\"400\">\n<img src=\"IMG_20240602_182202.jpg\" width=\"400\">\n<p>Then, I met other students in the program, most were pretty chill, while some I only was able to talk to for a few times. There was 10 students in the program, ranging from CS, Biology, Physics, and Chemistry. It’s really interesting how everyone has different backgrounds and how they ended up in this program. One skipped half of high school and one was already 36 years old!</p>\n<p>This was the room that I stayed in for the summer. Looks small, but it was actually pretty spacious for me.</p>\n<img src=\"IMG_20240602_130433.jpg\" width=\"400\">\n<p>Now let’s talk about the project I worked on. I worked on a extremely new topic called “Open Set Domain Adpatiation for Semantic Segmentation”. Originally, Dr. Gomes wanted to work on using generative models for UDA, but I thought it was too simple and wanted to do something more challenging. Coincidentally, A CVPR paper just came out about tackling UDA for semantic segmentation in a open set manner, and I thought it was a good opportunity to try it out. I was the only person in this project, and unfortunately my mentor was also quite busy dealing with other projects, so I was on my own for most of the time.</p>\n<p>Honestly, I wasn’t really able to do much, as the code was only released a month after the program started, and my ideas were all unsuccessful. I did have a much better understanding of the topic (OOD especially), and I learned a lot of new things, so it wasn’t a waste. I will continue to work on this project in the future, and see if I can make it work. We did present our results at the end in a symposium, but it was pretty small, so it was not that exciting. I did meet some cool people though!</p>\n<img src=\"present.jpg\" width=\"400\">\n<img src=\"poster.jpg\" width=\"400\">\n<p>Next, I want to talk about some activities I did with people during the program. First, we went to quite a few local dining places in Eau Claire, and they were all pretty good. The burgers were huge and delicious, although a bit too greasy for my liking at the end. The ice cream was also very good, as Wisconsin is known for its dairy products. We also went to watch the movie “Deadpool and Wolverine”, and the seats in the theater was adjustable, which was pretty cool. We also went kayaking, which was a lot of fun, although extremely exhausting (It was also raining cats and dogs at the end, which made it super chaotic but fun). We were also on a local news channel by accident, and it was pretty funny.</p>\n<img src=\"burger.jpg\" width=\"400\">\n<img src=\"food.jpg\" width=\"400\">\n<p>The most memorable activity was our trip to Mayo Clinic in Rochester, MN. We had a short tour of the clinic, and was explained how AI is currently developed and used in the clinic. It was really cool to see how AI is used in a real-world setting, and I learned a lot of new things. I connected with several people there, and I am considering to apply for a summer AI research internship there next year.</p>\n<img src=\"mayo1.jpg\" width=\"400\">\n<img src=\"mayo2.jpg\" width=\"400\">\n<p>Lastly, we also visited the HPC center, where I saw the GPUs that ran my code for the project.</p>\n<img src=\"HPC.jpg\" width=\"400\">\n<p>In summary, this was a really cool experience, and I learned a lot of new things. I also met some cool people and established connections. It also made me understand the hardships of doing research, and I am more motivated to do well in the future.</p>\n<img src=\"reugang.jfif\" width=\"700\">\n"},{"title":"2023 Meta Hacker Cup","date":"2023-10-22T03:05:07.000Z","_content":"\nOkay, I know yesterday I said I'm going to grind a mashup every morning, and I didn't do it today, because today is Meta Hacker Cup Round 2!\n\nThis blog will be a short recap and summary for my meta hacker cup experience.\n\n## 9/22 ~ 9/27 Practice Round\n\nRank: 1711 / 12138\nAC Count: 2 / 5 (FST 2)\n\nThis is a round made for understanding how the contest works (and also making me realise how weak the pretests are).\n\nA1 and B are extremely simple, B even only has 4 lines of code! Although A2 and C has weak pretests, even alot of top coders got FST here.\n\n## 10/7 Round 1\n\nRank: 1478 / 20324\nAC Count: 4 / 7\n\nThis round is probably the worst contest experience I've ever had. I couldn't submit solutions for the first hour, and the validation test set was even missing test cases! It was just a big shitshow in summary.\nProblem wise, pA was a really simple problem, but I just used brute force $O(t \\cdot n^2)$ with $n \\leq 1e5$ and $t \\leq 20$. This obviously would TLE in codeforces, but in MHC we run code locally, and you have 6 minutes to run the code, so it finished in around 30 seconds.\nB is a bruteforce problem, I solved B1 quickly, but my original analysis for B2 was wrong, so I didn't think the bruteforce idea would pass.\nC is a beautiful greedy problem. I like this problem the most in the whole MHC event. The observation for C2 was pretty satisfying, and after that the implementation was quite simple yet elegant.\n\nI did not solve D in contest, but I'm ashamed that I didn't notice that $x \\cdot 1000000006 \\% 1000000007$ is actually equivilent to $x \\cdot -1 \\% 1000000007$, then it can be converted to a straight forward lazy segment tree problem.\n\n## 10/21 Round 2\n\nRank: 753 / 6193\nAC Count: 3 / 5\n\nMy goal for this round was to get in top $2000$, as you can get a free t-shirt!\n\npA was a very simple BFS implementation problem, which really required not much skill (But apparently because of FSTs you could get in top $2000$ just by solving A1 and A2!).\n\npB was a pretty tricky problem, and alot of people got FST in this problem. I used a sliding window + prefix sums to check the first two conditions, and bruteforce check palindromes, which when amortized the complexity is quite fast.\n\nAll in all, I could've got in round 3 if I solved pB quick enough, but I am still really happy that I got rank 753 (yay t-shirt!). I hope I can get in round 3 next year, good luck to future me!\n\n![certificate](image-6.png)\n\n(I accidentally used my alt fb account lol)\n","source":"_posts/2023-Meta-Hacker-Cup.md","raw":"---\ntitle: 2023 Meta Hacker Cup\ndate: 2023-10-21 22:05:07\ntags: [\"CP\"]\n---\n\nOkay, I know yesterday I said I'm going to grind a mashup every morning, and I didn't do it today, because today is Meta Hacker Cup Round 2!\n\nThis blog will be a short recap and summary for my meta hacker cup experience.\n\n## 9/22 ~ 9/27 Practice Round\n\nRank: 1711 / 12138\nAC Count: 2 / 5 (FST 2)\n\nThis is a round made for understanding how the contest works (and also making me realise how weak the pretests are).\n\nA1 and B are extremely simple, B even only has 4 lines of code! Although A2 and C has weak pretests, even alot of top coders got FST here.\n\n## 10/7 Round 1\n\nRank: 1478 / 20324\nAC Count: 4 / 7\n\nThis round is probably the worst contest experience I've ever had. I couldn't submit solutions for the first hour, and the validation test set was even missing test cases! It was just a big shitshow in summary.\nProblem wise, pA was a really simple problem, but I just used brute force $O(t \\cdot n^2)$ with $n \\leq 1e5$ and $t \\leq 20$. This obviously would TLE in codeforces, but in MHC we run code locally, and you have 6 minutes to run the code, so it finished in around 30 seconds.\nB is a bruteforce problem, I solved B1 quickly, but my original analysis for B2 was wrong, so I didn't think the bruteforce idea would pass.\nC is a beautiful greedy problem. I like this problem the most in the whole MHC event. The observation for C2 was pretty satisfying, and after that the implementation was quite simple yet elegant.\n\nI did not solve D in contest, but I'm ashamed that I didn't notice that $x \\cdot 1000000006 \\% 1000000007$ is actually equivilent to $x \\cdot -1 \\% 1000000007$, then it can be converted to a straight forward lazy segment tree problem.\n\n## 10/21 Round 2\n\nRank: 753 / 6193\nAC Count: 3 / 5\n\nMy goal for this round was to get in top $2000$, as you can get a free t-shirt!\n\npA was a very simple BFS implementation problem, which really required not much skill (But apparently because of FSTs you could get in top $2000$ just by solving A1 and A2!).\n\npB was a pretty tricky problem, and alot of people got FST in this problem. I used a sliding window + prefix sums to check the first two conditions, and bruteforce check palindromes, which when amortized the complexity is quite fast.\n\nAll in all, I could've got in round 3 if I solved pB quick enough, but I am still really happy that I got rank 753 (yay t-shirt!). I hope I can get in round 3 next year, good luck to future me!\n\n![certificate](image-6.png)\n\n(I accidentally used my alt fb account lol)\n","slug":"2023-Meta-Hacker-Cup","published":1,"updated":"2024-12-26T01:29:58.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblgn0002b0u9fdjagpbl","content":"<p>Okay, I know yesterday I said I’m going to grind a mashup every morning, and I didn’t do it today, because today is Meta Hacker Cup Round 2!</p>\n<p>This blog will be a short recap and summary for my meta hacker cup experience.</p>\n<h2 id=\"9-22-9-27-practice-round\">9/22 ~ 9/27 Practice Round</h2>\n<p>Rank: 1711 / 12138<br>\nAC Count: 2 / 5 (FST 2)</p>\n<p>This is a round made for understanding how the contest works (and also making me realise how weak the pretests are).</p>\n<p>A1 and B are extremely simple, B even only has 4 lines of code! Although A2 and C has weak pretests, even alot of top coders got FST here.</p>\n<h2 id=\"10-7-round-1\">10/7 Round 1</h2>\n<p>Rank: 1478 / 20324<br>\nAC Count: 4 / 7</p>\n<p>This round is probably the worst contest experience I’ve ever had. I couldn’t submit solutions for the first hour, and the validation test set was even missing test cases! It was just a big shitshow in summary.<br>\nProblem wise, pA was a really simple problem, but I just used brute force <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo>⋅</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(t \\cdot n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>1</mn><mi>e</mi><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">n \\leq 1e5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">5</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>≤</mo><mn>20</mn></mrow><annotation encoding=\"application/x-tex\">t \\leq 20</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span></span></span></span>. This obviously would TLE in codeforces, but in MHC we run code locally, and you have 6 minutes to run the code, so it finished in around 30 seconds.<br>\nB is a bruteforce problem, I solved B1 quickly, but my original analysis for B2 was wrong, so I didn’t think the bruteforce idea would pass.<br>\nC is a beautiful greedy problem. I like this problem the most in the whole MHC event. The observation for C2 was pretty satisfying, and after that the implementation was quite simple yet elegant.</p>\n<p>I did not solve D in contest, but I’m ashamed that I didn’t notice that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⋅</mo><mn>1000000006</mn><mi mathvariant=\"normal\">%</mi><mn>1000000007</mn></mrow><annotation encoding=\"application/x-tex\">x \\cdot 1000000006 \\% 1000000007</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">6</span><span class=\"mord\">%</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">7</span></span></span></span> is actually equivilent to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⋅</mo><mo>−</mo><mn>1</mn><mi mathvariant=\"normal\">%</mi><mn>1000000007</mn></mrow><annotation encoding=\"application/x-tex\">x \\cdot -1 \\% 1000000007</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\">%</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">7</span></span></span></span>, then it can be converted to a straight forward lazy segment tree problem.</p>\n<h2 id=\"10-21-round-2\">10/21 Round 2</h2>\n<p>Rank: 753 / 6193<br>\nAC Count: 3 / 5</p>\n<p>My goal for this round was to get in top <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2000</mn></mrow><annotation encoding=\"application/x-tex\">2000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>, as you can get a free t-shirt!</p>\n<p>pA was a very simple BFS implementation problem, which really required not much skill (But apparently because of FSTs you could get in top <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2000</mn></mrow><annotation encoding=\"application/x-tex\">2000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span> just by solving A1 and A2!).</p>\n<p>pB was a pretty tricky problem, and alot of people got FST in this problem. I used a sliding window + prefix sums to check the first two conditions, and bruteforce check palindromes, which when amortized the complexity is quite fast.</p>\n<p>All in all, I could’ve got in round 3 if I solved pB quick enough, but I am still really happy that I got rank 753 (yay t-shirt!). I hope I can get in round 3 next year, good luck to future me!</p>\n<p><img src=\"image-6.png\" alt=\"certificate\"></p>\n<p>(I accidentally used my alt fb account lol)</p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>Okay, I know yesterday I said I’m going to grind a mashup every morning, and I didn’t do it today, because today is Meta Hacker Cup Round 2!</p>\n<p>This blog will be a short recap and summary for my meta hacker cup experience.</p>\n<h2 id=\"9-22-9-27-practice-round\">9/22 ~ 9/27 Practice Round</h2>\n<p>Rank: 1711 / 12138<br>\nAC Count: 2 / 5 (FST 2)</p>\n<p>This is a round made for understanding how the contest works (and also making me realise how weak the pretests are).</p>\n<p>A1 and B are extremely simple, B even only has 4 lines of code! Although A2 and C has weak pretests, even alot of top coders got FST here.</p>\n<h2 id=\"10-7-round-1\">10/7 Round 1</h2>\n<p>Rank: 1478 / 20324<br>\nAC Count: 4 / 7</p>\n<p>This round is probably the worst contest experience I’ve ever had. I couldn’t submit solutions for the first hour, and the validation test set was even missing test cases! It was just a big shitshow in summary.<br>\nProblem wise, pA was a really simple problem, but I just used brute force <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>t</mi><mo>⋅</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(t \\cdot n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>1</mn><mi>e</mi><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">n \\leq 1e5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">5</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>≤</mo><mn>20</mn></mrow><annotation encoding=\"application/x-tex\">t \\leq 20</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span></span></span></span>. This obviously would TLE in codeforces, but in MHC we run code locally, and you have 6 minutes to run the code, so it finished in around 30 seconds.<br>\nB is a bruteforce problem, I solved B1 quickly, but my original analysis for B2 was wrong, so I didn’t think the bruteforce idea would pass.<br>\nC is a beautiful greedy problem. I like this problem the most in the whole MHC event. The observation for C2 was pretty satisfying, and after that the implementation was quite simple yet elegant.</p>\n<p>I did not solve D in contest, but I’m ashamed that I didn’t notice that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⋅</mo><mn>1000000006</mn><mi mathvariant=\"normal\">%</mi><mn>1000000007</mn></mrow><annotation encoding=\"application/x-tex\">x \\cdot 1000000006 \\% 1000000007</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.80556em;vertical-align:-0.05556em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">6</span><span class=\"mord\">%</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">7</span></span></span></span> is actually equivilent to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⋅</mo><mo>−</mo><mn>1</mn><mi mathvariant=\"normal\">%</mi><mn>1000000007</mn></mrow><annotation encoding=\"application/x-tex\">x \\cdot -1 \\% 1000000007</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\">%</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">7</span></span></span></span>, then it can be converted to a straight forward lazy segment tree problem.</p>\n<h2 id=\"10-21-round-2\">10/21 Round 2</h2>\n<p>Rank: 753 / 6193<br>\nAC Count: 3 / 5</p>\n<p>My goal for this round was to get in top <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2000</mn></mrow><annotation encoding=\"application/x-tex\">2000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>, as you can get a free t-shirt!</p>\n<p>pA was a very simple BFS implementation problem, which really required not much skill (But apparently because of FSTs you could get in top <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2000</mn></mrow><annotation encoding=\"application/x-tex\">2000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span> just by solving A1 and A2!).</p>\n<p>pB was a pretty tricky problem, and alot of people got FST in this problem. I used a sliding window + prefix sums to check the first two conditions, and bruteforce check palindromes, which when amortized the complexity is quite fast.</p>\n<p>All in all, I could’ve got in round 3 if I solved pB quick enough, but I am still really happy that I got rank 753 (yay t-shirt!). I hope I can get in round 3 next year, good luck to future me!</p>\n<p><img src=\"image-6.png\" alt=\"certificate\"></p>\n<p>(I accidentally used my alt fb account lol)</p>\n"},{"title":"CM+ CF Practice","date":"2024-03-23T22:11:21.000Z","_content":"Hey guys, life has been pretty busy lately and tough so I haven't updated in a while, so I decided to write a short blog about some CM+ (>=1900) problems I solved in CF lately. The difficulty will we roughly sorted by how hard I feel it is.\n\n## [CF 1923D. Slimes (1800)](https://codeforces.com/contest/1923/problem/D)\n\nI know this question is only 1800, but I feel like it deserves at least 1900.\n\nThe high level idea for this problem is to find how many slimes we need to accumulate from the left/right to eat this slime. Formally, for each index $i$, find the maximum $j < i$ where $a[j] + ... + a[i - 1] > a[i]$, and the maximum $k > i$ where $a[i + 1] + ... + a[k] > a[i]$, then the answer for $i$ is $\\text{min}(k - i, i - j)$. It's easy to see we can use prefix sum and binary search to obtain $O(logn)$ per index.\n\nThe tricky part about this problem is dealing with duplicate values in the same row, as they technically cannot eat each other, and it cause alot of problems while implementing.\n\n```cpp\n    void solve() {\n        int n;\n        cin >> n;\n        vi v(n + 1, 0);\n        for(int i = 1; i <= n; i++) cin >> v[i];\n        int curnum = v[1], k = 1;\n        int val[n + 1][2];\n        for(int i = 0; i <= n; i++) {\n            for(int j = 0; j <= 1; j++) {\n                val[i][j] = -1;\n            }\n        }\n        for(int t = 0; t <= 1; t++) {\n            vi pre(n + 1, 0);\n            for(int i = 1; i <= n; i++) {\n                pre[i] = pre[i - 1] + v[i];\n            }\n            //debug(pre);\n            for(int i = 2; i <= n; i++) {\n                int l = 0, r = i - k - 2;\n                if(!(r < l || pre[i - 1] - pre[l] <= v[i])) {\n                    while(r - l > 1) {\n                        int m = (r + l) >> 1;\n                        if(pre[i - 1] - pre[m] > v[i]) l = m;\n                        else r = m - 1; \n                    }\n                    if(pre[i - 1] - pre[r] > v[i]) val[i][t] = i - (r + 1);\n                    else val[i][t] = i - (l + 1);\n                }\n                if(v[i - 1] > v[i]) val[i][t] = 1;\n                if(v[i] != curnum) {\n                    k = 1;\n                    curnum = v[i];\n                } else {\n                    k += 1;\n                }\n            }\n            reverse(v.begin() + 1, v.end());\n        }\n        for(int i = 1; i <= n; i++) {\n            if(val[i][0] == -1 && val[n - i + 1][1] == -1) {\n                cout << -1 << \" \";\n            } else if(val[i][0] == -1 || val[n - i + 1][1] == -1) {\n                cout << max(val[i][0], val[n - i + 1][1]) << \" \";\n            } else {\n                cout << min(val[i][0], val[n - i + 1][1]) << \" \";\n            }\n        }\n        cout << endl;\n        return;\n    }\n```\n\nTime complexity: $O(nlogn)$\n\n## [CF 1133F2. Spanning Tree with One Fixed Degree (1900)](https://codeforces.com/contest/1923/problem/D)\n\nThis problem honestly does not deserve 1900, I solve it in like 15 minutes max.\n\nIf the number of edges on the node 1 is less then $D$, then the answer is clearly no. Else, we want to first find \"crutial edges\", which are edges connected to the node 1 that must be connected in order for the whole graph to be connected.\n\nWe can find these edges by first doing our process of building a spanning tree while skipping all edges that connects to 1. After that it's easy to find edges that we must form to connect the whole graph.\n\nLet's denote the number of crutial edges as $k$, and the total edges connecting node 1 as $K$, then $k <= D <= K$ clearly must hold.\n\nNow, how do we actually construct the tree? A easy way is to first connect the crutial edges, then add edges connecting node 1 to get $D$ edges, and lastly connect random edges to obtain a spanning tree, it should be obvious that this guarantees a spanning tree with $D$ edges connecting to node 1.\n\n```cpp\nconst int MAXN = 2e5 + 5;\nint dsu[MAXN];\nint rk[MAXN];\nint find(int x){\n    return dsu[x] == x ? x : dsu[x] = find(dsu[x]);\n}\nvoid modify(int x,int y){\n    int pa = find(x);\n    int pb = find(y);\n    if(pa != pb) {\n        if(rk[pa] < rk[pb]) swap(pa, pb); // pa > pb\n        dsu[pb] = pa;\n        rk[pa] += rk[pb];\n    }\n}\nvoid init(int n) {\n    for(int i = 0; i < n; i++) {\n        dsu[i] = i;\n        rk[i] = 1;\n    }\n}\nvoid solve() {\n    int n, m, d;\n    cin >> n >> m >> d;\n    init(n + 1);\n    int total = 0;\n    vector<pii> v;\n    for(int i = 0; i < m; i++) {\n        int a, b;\n        cin >> a >> b;\n        if(a == 1 || b == 1) total += 1;\n        v.pb({a, b});\n    }\n    for(auto [a, b] : v) {\n        if(a == 1 || b == 1) {\n            continue;\n        } else {\n            modify(a, b);\n        }\n    }\n    vector<bool> usedhead(n + 1, false);\n    int need = 0;\n    vector<pii> v2;\n    vector<pii> v3;\n    for(auto [a, b] : v) {\n        if(a == 1) {\n            if(usedhead[find(b)] == false) {\n                need += 1;\n                usedhead[find(b)] = true;\n                v2.pb({a, b});\n            } else {\n                v3.pb({a, b});\n            }\n        } else if(b == 1) {\n            if(usedhead[find(a)] == false) {\n                need += 1;\n                usedhead[find(a)] = true;\n                v2.pb({a, b});\n            } else {\n                v3.pb({a, b});\n            }\n        }\n    }\n    if(need > d || total < d) {\n        cout << \"NO\" << endl;\n        return;\n    }\n    cout << \"YES\" << endl;\n    init(n + 1);\n    for(auto [a, b] : v2) {\n        cout << a << \" \" << b << endl;\n        modify(a, b);\n    }\n    for(int i = 0; i < d - need; i++) {\n        cout << v3[i].first << \" \" << v3[i].second << endl;\n        modify(v3[i].first, v3[i].second);\n    }\n    for(auto [a, b] : v) {\n        if(a == 1 || b == 1) {\n            continue;\n        }\n        if(find(a) != find(b)) {\n            cout << a << \" \" << b << endl;\n            modify(a, b);\n        }\n    }\n    return;\n}\n```\n\nTime complexity: $O(n)$\n\n## [CF 1141G. Privatization of Roads in Treeland (1900)](https://codeforces.com/contest/1141/problem/G)\n\nAnother problem I don't feel like it's 1900.\n\nLet's say we use $k'$ colors, then by the pigeonhole principle, nodes that have more than $k'$ edges connected would clearly become a \"not good\" node.\n\nIt's not difficult to se that we can always color the tree with $k'$ colors, and only nodes that have more than $k'$ edges would be a \"not good\" node. Consider this strategy of coloring: if a node has more than $k'$ edges, then we color all of them as the same color, and if the node doesn't have more than $k'$ edges, we can clearly color them with all distinct colors.\n\nWe can find the number of nodes that have more than $k'$ edges connected by doing a simple prefix sum.\n\n```cpp\nconst int MAXN = 2e5 + 5;\nvector<pii> graph[MAXN];\nvi deg(MAXN, 0);\nvi color(MAXN, 0);\nint root = -1;\nint colnum = MAXN;\nvoid dfs(int cur, int pre) {\n    if(graph[cur].size() == 1) root = cur;\n    deg[graph[cur].size()] += 1;\n    for(auto [v, idx] : graph[cur]) {\n        if(v == pre) continue;\n        dfs(v, cur);\n    }\n}\nvoid dfs2(int cur, int pre, int precol) {\n    if(graph[cur].size() <= colnum) {\n        int c = 1;\n        for(auto [v, idx] : graph[cur]) {\n            if(v == pre) continue;\n            if(c == precol) c++;\n            color[idx] = c;\n            c++;\n            dfs2(v, cur, color[idx]);\n        }\n    } else {\n        for(auto [v, idx] : graph[cur]) {\n            if(v == pre) continue;\n            color[idx] = precol;\n            dfs2(v, cur, color[idx]);\n        }\n    }\n}\nvoid solve() {\n    int n, k;\n    cin >> n >> k;\n    for(int i = 0; i <= n + 1; i++) {\n        graph[i].clear();\n        deg[i] = 0;\n        color[i] = 0;\n    }\n    colnum = MAXN;\n    for(int i = 0; i < n - 1; i++) {\n        int a, b;\n        cin >> a >> b;\n        graph[a].pb({b, i});\n        graph[b].pb({a, i});\n    }\n    dfs(1, -1);\n    for(int i = n; i >= 1; i--) {\n        deg[i] += deg[i + 1];\n        colnum = i;\n        if(deg[i] > k) {\n            break;\n        }\n    }\n    dfs2(root, -1, -1);\n    cout << colnum << endl;\n    for(int i = 0; i <= n - 2; i++) {\n        cout << color[i] << \" \";\n    }\n    cout << endl;\n    return;\n}\n```\n\nTime complexity: $O(n)$\n\n## [CF 1922D. Berserk Monsters (1900)](https://codeforces.com/contest/1922/problem/D)\n\nA not so difficult simulation problem.\n\nThe trick here is to find a efficient way to simulate this process. Notice that only when a monster gets killed, the two monster beside it would have a chance to get killed in the next round, so there's actually not alot of monsters we need to consider for each round.\n\nNote: My implementation is extremely convoluted and lackluster, refer to the editorial for a better implementation.\n\n```cpp\nset<int> s, used;\nvector<int> atk;\nvector<int> def;\nqueue<int> q1, q2, q3;\nvoid solve() {\n    s.clear();\n    atk.clear();\n    def.clear();\n    while(q1.size()) q1.pop();\n    while(q2.size()) q2.pop();\n    while(q3.size()) q3.pop();\n    int n;\n    cin >> n;\n    for(int i = 0; i < n; i++) {\n        int tmp;\n        cin >> tmp;\n        atk.pb(tmp);\n        s.insert(i);\n        q1.push(i);\n    }\n    for(int i = 0; i < n; i++) {\n        int tmp;\n        cin >> tmp;\n        def.pb(tmp);\n    }\n    while(n--) {\n        used.clear();\n        while(q1.size()) {\n            int fr = q1.front();\n            q1.pop();\n            queue<int> q;\n            auto it = s.find(fr);\n            int sum = 0;\n            if(it != s.begin()) {\n                q.push(*(prev(it, 1)));\n                sum += atk[*(prev(it, 1))];\n            }\n            if(next(it, 1) != s.end()) {\n                q.push(*(next(it, 1)));\n                sum += atk[*(next(it, 1))];\n            }\n            if(sum > def[*it]) {\n                q3.push(*it);\n                while(q.size()) {\n                    q2.push(q.front());\n                    q.pop();\n                }\n            }\n        }\n        cout << q3.size() << \" \";\n        //debug(q3);\n        while(q3.size()) {\n            s.erase(q3.front());\n            q3.pop();\n        }\n        while(q2.size()) {\n            if(s.find(q2.front()) == s.end() || used.find(q2.front()) != used.end()) {\n                q2.pop();\n                continue;\n            }\n            used.insert(q2.front());\n            q1.push(q2.front());\n            q2.pop();\n        }\n    }\n    cout << endl;\n    return;\n}\n```\n\nTime complexity: $O(nlogn)$\n\n## [CF 1168B. Good Triple (1900)](https://codeforces.com/contest/1168/problem/B)\n\nTo solve this, one needs to observe that the length of a substring without the required condition is actually at most 8.\n\nAfter knowing this fact, we can bruteforce finding all bad substrings and calculate the answer with it.\n\nFor some reason my implementation kept failing until I completely rewrote it and it suddenly passed.\n\n```cpp\nstring s;\nbool isgood(int l, int r) {\n    for(int l2 = l; l2 <= r; l2 ++) {\n        for(int i = 1; i <= 5 && l2 + 2 * i <= r; i++) {\n            if(s[l2] == s[l2 + i] && s[l2 + i] == s[l2 + (2 * i)]) {\n                return false;\n            }\n        }\n    }\n    return true;\n} \nvoid solve() {\n    cin >> s;\n    int ans = 0;\n    for(int l = 0; l < (int)(s.size()) - 2; l++) {\n        int mx = 0;\n        for(int r = l + 1; r < (int)s.size() && r < l + 10; r++) {\n            if(isgood(l, r)) {\n                mx = r;\n            }\n        }\n        ans += s.size() - (mx + 1);\n    }\n    cout << ans << endl;\n    return;\n}\n```\n\nTime complexity: $O(nlogn)$\n\n## [CF 1729F. Kirei and the Linear Function (1900)](https://codeforces.com/contest/1729/problem/F)\n\nInteresting problem, but has some points that made it a clear giveaway.\n\nFirst, notice in the queries that they want $v(l_i, r_i)$, so we must need some way to calculate $v(l_i, r_i)$ in $O(1)$ or $O(logn)$ time.\n\nThe second giveaway is the specific mod number 9. If you remember from middle school, the way to check if a number can be divided by 9 is to check if the sum of it's digits can also be divided by 9.\n\nUsing these two hints, we can easily find out the answer has to do with prefix sums!\n\nWe can preprocess a prefix sum and preprocess the smallest (and second smallest) $L$ for each number from 0 to 9.\n\n```cpp\nvoid solve() {\n    string s;\n    cin >> s;\n    int w, m;\n    cin >> w >> m;\n    vi pre(s.size() + 1);\n    pre[0] = 0;\n    for(int i = 1; i <= s.size(); i++) {\n        pre[i] = pre[i - 1] + (s[i - 1] - '0');\n    }\n    int smallest[9];\n    int ssmallest[9];\n    for(int i = 0; i <= 8; i++) {\n        smallest[i] = -1;\n        ssmallest[i] = -1;\n    }\n    for(int i = 1; i + w - 1 <= s.size(); i++) {\n        int num = (pre[i + w - 1] - pre[i - 1]) % 9;\n        if(smallest[num] == -1) {\n            smallest[num] = i;\n        } else if(ssmallest[num] == -1) {\n            ssmallest[num] = i;\n        }\n    }\n    while(m--) {\n        int l, r, k;\n        cin >> l >> r >> k;\n        int num = (pre[r] - pre[l - 1]) % 9;\n        pii minans = {1e9, 1e9};\n        for(int i = 0; i <= 8; i++) {\n            for(int j = 0; j <= 8; j++) {\n                if(((i * num + j) % 9) == k) {\n                    if(i != j) {\n                        if(smallest[i] != -1 && smallest[j] != -1) {\n                            minans = min(minans, {smallest[i], smallest[j]});\n                        }\n                    } else {\n                        if(smallest[i] != -1 && ssmallest[j] != -1) {\n                            minans = min(minans, {smallest[i], ssmallest[j]});\n                        }\n                    }\n                }\n            }\n        }\n        if(minans.first == 1e9) {\n            cout << -1 << \" \" << -1 << endl;\n        } else {\n            cout << minans.first << \" \" << minans.second << endl;\n        }\n    }\n    return;\n}\n```\n\nTime complexity: $O(n)$ preprocess, $O(1)$ per query\n\n## [CF 1791G2. Teleporters (Hard Version) (1900)](https://codeforces.com/contest/1791/problem/G2)\n\nLet's define the cost of a teleporter as $min(a_i + i, a_i + n + 1 - i)$, which is just the minimum cost of walking to it from the front or to the back. It's clear that after the initial teleporter, we will choose the teleporters based from lowest cost to highest cost.\n\nThe problem now is how to determine the first teleporter we want to use? We can iterate using each teleporter as the first one, and using binary search + prefix sum to determine how many teleporters we can use after the first one. The problem that encounters with this is when you binary search, you might include the one where you already used as the initial teleporter, so you would need to keep track and deduct the value when your binary search includes that teleporter.\n\n```cpp\nvi v(2e5 + 5, 0);\nvector<pii> order;\nvi prefix;\nvoid solve() {\n    int n, c;\n    cin >> n >> c;\n    order.clear();\n    prefix.clear();\n    for(int i = 1; i <= n; i++) {\n        cin >> v[i];\n        order.pb({min(v[i] + i, v[i] + (n - i + 1)), i});\n    }\n    sort(all(order));\n    prefix.pb(0);\n    for(int i = 0; i < n; i++) {\n        prefix.pb(prefix.back() + order[i].first);\n    }\n    int ans = 0;\n    for(int i = 0; i < n; i++) {\n        int cst = c - (v[order[i].second] + order[i].second);\n        int l = 0, r = n;\n        while(r - l > 1) {\n            int m = (r + l) / 2;\n            int cmp = prefix[m];\n            if(m >= (i + 1)) cmp -= order[i].first;\n            if(cst >= cmp) {\n                l = m;\n            } else {\n                r = m;\n            }\n        }\n        int ret = prefix[r];\n        int use;\n        if(r >= (i + 1)) ret -= order[i].first;\n        if(cst >= ret) use = r;\n        else use = l;\n        if(use < (i + 1) && cst >= 0) use += 1;\n        ans = max(ans, use);\n    }\n    cout << ans << endl;\n    return;\n}\n```\n\nTime complexity: $O(nlogn)$\n\n## [CF 1929D. Sasha and a Walk in the City (1900)](https://codeforces.com/contest/1929/problem/D)\n\nA really tricky dp problem that stomped me for a good while, but the solution is one of the shortest in this list.\n\nLet $dp[u]$ denote the number of **non-empty** subtrees rooted at node $u$ such that there is no pair of vertices where a node is the ancestor of the other.\n\nWe can get the transition $dp[u] = \\prod (dp[v_i] + 1)$, where $v_i$ is the children of $u$.\n\nThis dp state is essentially picking the combination of subtrees (we add 1 for when we don't choose an empty set for that subtree). When all of them were empty, it means that only the node $u$ is dangerous.\n\nNow to calculate the answer, we need to divide into two parts:\n\nif there is no pair of vertices where a node is the ancestor of the other, then the answer would be $dp[1] + 1$.\n\nBut we can also tolerate exactly 1 pair of vertices where one is the ancestor of the other. Lets say if $u$ is the ancestor of another vertex, then the number of ways for this to happen is $\\sum dp[v_i]$, where $v_i$ is the children of $u$.\n\nWe then consider the case for every node, and the answer becomes $(dp[1] + 1) + dp[2] + ... + dp[n] = 1 + \\sum dp[i]$.\n\n```cpp\nconst int MAXN = 3e5 + 5;\nvi graph[MAXN];\nvi dp(MAXN, 0);\nconst int MOD = 998244353;\nvoid dfs(int cur, int prev) {\n    for(auto v : graph[cur]) {\n        if(v == prev) continue;\n        dfs(v, cur);\n        dp[cur] *= (dp[v] + 1);\n        dp[cur] %= MOD;\n    }\n}\nvoid solve() {\n    int n;\n    cin >> n;\n    for(int i = 1; i <= n; i++) {\n        graph[i].clear();\n        dp[i] = 1;\n    }\n    for(int i = 0; i < n - 1; i++) {\n        int u, v;\n        cin >> u >> v;\n        graph[u].pb(v);\n        graph[v].pb(u);\n    }\n    dfs(1, -1);\n    int ans = 1;\n    for(int i = 1; i <= n; i++){\n        ans += dp[i];\n        ans %= MOD;\n    }\n    cout << ans << endl;\n    return;\n}\n```\n\nTime complexity: $O(n)$\n\n## [CF 1856E1. PermuTree (easy version) (1800)](https://codeforces.com/contest/1856/problem/E1)\n\nI genuinely do not understand how this problem is 1800...maybe im just really bad at dp.\n\nLet's day for a node $k$ with subtrees size ${S_1,...,S_i}$, and in each subtree we can assign the values as either bigger than the node k or smaller, then our goal is to group them into two groups, such as the product of the size of the two groups are maximum.\n\nThe first claim is we can always get the optimal upperbound with some kind of assignment, I actually do not know how to prove this and I just winged it when I wrote it but if you are interested you can check out the editorial :).\n\nNow, the problem becomes cutting the set ${S_1,...,S_i}$ into two sets, such that the product is maximized. This is actually an NP hard problem, but $\\sum{S_i}$ is actually pretty small, so we can tranform it into a subset sum problem.\n\nLet $S = \\sum{S_i}$, then we can get $max((S - j) \\cdot j)$ as the answer if $j$ is a possible subset sum.\n\nIt should be pretty easy to write an $O(n^2)$ solution for subset sum, so just do it for each node and yay!\n\nTheres one small problem... doing subset sum is $O(n^2)$, and actually wouldn't $\\sum{S_i}$ become $O(n^3)$? even if it doesn't, we need to do it for each node, then wouldn't it become $O(n^3)$?\n\nThe answer is actually no (This is why I originally got stuck because I also though it at least has to be $O(n^3)$)! Refer to #7 of this [blog](https://codeforces.com/blog/entry/100910), really interesting property to think about tree dps!\n\n```cpp\nconst int MAXN = 5005;\nvector<int> graph[MAXN];\nvector<int> sz(MAXN, 0);\nint ans = 0;\nvoid dfs(int cur, int pre) {\n    vi vec;\n    sz[cur] += 1;\n    if(graph[cur].size() == 1 && cur != 1) {\n        return;\n    }\n    for(auto v : graph[cur]) {\n        if(v == pre) continue;\n        dfs(v, cur);\n        sz[cur] += sz[v];\n        vec.pb(sz[v]);\n    }\n    int sum = sz[cur] - 1;\n    vector<int> dp(sum + 1, 0);\n    dp[0] = true;\n    int mx = 0;\n    for(auto i : vec) {\n        for(int j = sum; j - i >= 0; j--) {\n            dp[j] |= dp[j - i];\n        }\n    }\n    for(int i = 0; i <= sum; i++) {\n        if(dp[i]) mx = max(mx, i * (sum - i));\n    }\n    ans += mx;\n}\nvoid solve() {\n    int n;\n    cin >> n;\n    for(int i = 2; i <= n; i++) {\n        int u;\n        cin >> u;\n        graph[u].pb(i);\n        graph[i].pb(u);\n    }\n    //for(int i = 1; i <= n; i++) debug(graph[i]);\n    // get subtree size \n    dfs(1, -1);\n    cout << ans << endl;\n    return;\n}\n```\n\nTime complexity: $O(n^2)$\n\n## [CF 1856E2. PermuTree (hard version) (2700)](https://codeforces.com/contest/1856/problem/E2)\n\nNote: I was not able to solve this problem even following the editorial, the time limit is very strict but I feel like still including this problem and mentioning the techniques use for this problem.\n\nThe are two main optimizations for this problem: $O(n\\sqrt{n})$ subset sum trick and using bitsets to optimize the dp by $\\frac{1}{64}$. Very tricky stuff :)\n\n## [CF 1914G1. Light Bulbs (Easy Version) (2100)](https://codeforces.com/contest/1914/problem/G1)\n\nThe editorial uses XOR hashing, but I feel like my alternative solution using graph theory is way more intuitive.\n\nWe can transform the whole problem as a graph theory problem. Let the bulbs be nodes, and we will add a directed edge $i$ to $j$ if the bulb $j$ is between the two bulb $i$, which basically means if $i$ is lighted, we can light up color $j$ by the second operation.\n\nIt's not difficult to see the answer for the first problem is the number of components in the graph (It's easy to see that with this way of construction, we can always find a node in the subgraph that can reach all other nodes), and the answer for the second problem is the product for each subgraph, the number of nodes that can reach every other node in that subgraph.\n\nThe first answer is very easy to obtain, but the second one is slightly tricky. A naive way is to dfs from each node, and if they can reach all other nodes then we include it in. Unfortunately this fails as the complexity could go up to $O(n^3)$.\n\nHere is where the trick Strongly Connected Component (SCC) comes in! The main use for SCC is we can \"shrink\" a directed graph into a Directed Acyclic Graph (DAG), and it's easy to see after shrinking, only the first starting node (the node with in degree 0) can reach all other nodes! So we just need to find how many nodes does this starting node consist.\n\nOur whole algorithm is as follows:\n\nBuild graph -> Do SCC -> Count the in degree of the nodes for the new DAG -> calculate how many nodes does each new node consist -> Calculate answer.\n\nI use kosaraju algorithm for SCC, because im too lazy to learn tarjan TMT.\n\n```cpp\nconst int MAXN = 1005;\nint n;\nvi g[MAXN];\nvi g2[MAXN];\nvi scc(MAXN, 0);\nvi sccsz(MAXN, 0);\nbool visited[MAXN];\nvector<bool> used(MAXN, 0);\nvi v;\nint sccCnt = 0;\nvector<int> indeg(MAXN, 0);\nvector<int> s;\nvoid init() {\n    for(int i = 1; i <= n; i++) {\n        g[i].clear();\n        g2[i].clear();\n        scc[i] = 0;\n        used[i] = 0;\n        visited[i] = false;\n        indeg[i] = 0;\n        sccsz[i] = 0;\n    }\n    sccCnt = 0;\n    s.clear();\n    v.clear();\n}\nvoid dfs1(int u) {\n    visited[u] = true;\n    for (int v : g[u])\n        if (!visited[v]) dfs1(v);\n      s.push_back(u);\n}\nvoid dfs2(int u) {\n      scc[u] = sccCnt;\n      for (int v : g2[u]) {\n        if (!scc[v]) dfs2(v);\n      }\n}\nvoid solve() {\n    cin >> n;\n    init();\n    for(int i = 0; i < 2 * n; i++) {\n        int num;\n        cin >> num;\n        v.pb(num);\n    }\n    // build graph\n    for(int i = 0; i < 2 * n; i++) {\n        if(used[v[i]]) continue;\n        used[v[i]] = true;\n        for(int j = i + 1; j < 2 * n && v[j] != v[i]; j++) {\n            g[v[i]].push_back(v[j]);\n            g2[v[j]].push_back(v[i]);\n        }\n    }\n    // do SCC\n    for(int i = 1; i <= n; i++) {\n        if(!visited[i]) dfs1(i);\n    }\n    for(int i = n - 1; i >= 0; i--) {\n        if(scc[s[i]] == 0) {\n            sccCnt += 1;\n            dfs2(s[i]);\n        }\n    }\n    // count indeg\n    for(int i = 1; i <= n; i++) {\n        for(auto j : g[i]) {\n            if(scc[i] != scc[j]) indeg[scc[j]] += 1;\n        }\n    }\n    int ans1 = 0, ans2 = 1;\n    for(int i = 1; i <= n; i++) {\n        sccsz[scc[i]] += 1;\n    }\n    for(int i = 1; i <= sccCnt; i++) {\n        if(indeg[i] == 0) {\n            ans1 += 1;\n            ans2 *= (sccsz[i] * 2);\n            ans2 %= 998244353;\n        }\n    }\n    cout << ans1 << \" \" << ans2 << endl;\n    return;\n}\n```\n\nTime complexity: $O(n^2)$\n\n## [CF 1914G2. Light Bulbs (Hard Version) (2300)](https://codeforces.com/contest/1914/problem/G2)\n\nOur solution for easy version was bounded by the graph building process which was $O(n^2)$, but there is actually a way to optimize the graph to only $2n$ edges!\n\nI did not really understand how this optimization works, but I'll still include it here and maybe try understanding it some day.\n\n```cpp\n    // build graph\n    deque<int> dq;\n    for(int i = 0; i < 2 * n; i++) {\n        if(dq.size()) {\n            g[dq.back()].push_back(v[i]);\n            g2[v[i]].push_back(dq.back());\n        }\n        if(used[v[i]] == 0) {\n            used[v[i]] += 1;\n            dq.push_back(v[i]);\n        } else {\n            used[v[i]] += 1;\n            while(dq.size() && used[dq.back()] == 2) dq.pop_back();\n        }\n    }\n```\n\nTime complexity: $O(n)$\n\nAfterwards: Chicago really has some good food! Although serious note, I really need to get myself back on the track after this spring break, I know I can do it, fighting! And in terms of CF, I think I'll start doing more 2000~2200 problems, and after that I'll start doing contests again.\n","source":"_posts/CM-CF-Practice.md","raw":"---\ntitle: CM+ CF Practice\ndate: 2024-03-23 17:11:21\ntags: [\"CP\"]\n---\nHey guys, life has been pretty busy lately and tough so I haven't updated in a while, so I decided to write a short blog about some CM+ (>=1900) problems I solved in CF lately. The difficulty will we roughly sorted by how hard I feel it is.\n\n## [CF 1923D. Slimes (1800)](https://codeforces.com/contest/1923/problem/D)\n\nI know this question is only 1800, but I feel like it deserves at least 1900.\n\nThe high level idea for this problem is to find how many slimes we need to accumulate from the left/right to eat this slime. Formally, for each index $i$, find the maximum $j < i$ where $a[j] + ... + a[i - 1] > a[i]$, and the maximum $k > i$ where $a[i + 1] + ... + a[k] > a[i]$, then the answer for $i$ is $\\text{min}(k - i, i - j)$. It's easy to see we can use prefix sum and binary search to obtain $O(logn)$ per index.\n\nThe tricky part about this problem is dealing with duplicate values in the same row, as they technically cannot eat each other, and it cause alot of problems while implementing.\n\n```cpp\n    void solve() {\n        int n;\n        cin >> n;\n        vi v(n + 1, 0);\n        for(int i = 1; i <= n; i++) cin >> v[i];\n        int curnum = v[1], k = 1;\n        int val[n + 1][2];\n        for(int i = 0; i <= n; i++) {\n            for(int j = 0; j <= 1; j++) {\n                val[i][j] = -1;\n            }\n        }\n        for(int t = 0; t <= 1; t++) {\n            vi pre(n + 1, 0);\n            for(int i = 1; i <= n; i++) {\n                pre[i] = pre[i - 1] + v[i];\n            }\n            //debug(pre);\n            for(int i = 2; i <= n; i++) {\n                int l = 0, r = i - k - 2;\n                if(!(r < l || pre[i - 1] - pre[l] <= v[i])) {\n                    while(r - l > 1) {\n                        int m = (r + l) >> 1;\n                        if(pre[i - 1] - pre[m] > v[i]) l = m;\n                        else r = m - 1; \n                    }\n                    if(pre[i - 1] - pre[r] > v[i]) val[i][t] = i - (r + 1);\n                    else val[i][t] = i - (l + 1);\n                }\n                if(v[i - 1] > v[i]) val[i][t] = 1;\n                if(v[i] != curnum) {\n                    k = 1;\n                    curnum = v[i];\n                } else {\n                    k += 1;\n                }\n            }\n            reverse(v.begin() + 1, v.end());\n        }\n        for(int i = 1; i <= n; i++) {\n            if(val[i][0] == -1 && val[n - i + 1][1] == -1) {\n                cout << -1 << \" \";\n            } else if(val[i][0] == -1 || val[n - i + 1][1] == -1) {\n                cout << max(val[i][0], val[n - i + 1][1]) << \" \";\n            } else {\n                cout << min(val[i][0], val[n - i + 1][1]) << \" \";\n            }\n        }\n        cout << endl;\n        return;\n    }\n```\n\nTime complexity: $O(nlogn)$\n\n## [CF 1133F2. Spanning Tree with One Fixed Degree (1900)](https://codeforces.com/contest/1923/problem/D)\n\nThis problem honestly does not deserve 1900, I solve it in like 15 minutes max.\n\nIf the number of edges on the node 1 is less then $D$, then the answer is clearly no. Else, we want to first find \"crutial edges\", which are edges connected to the node 1 that must be connected in order for the whole graph to be connected.\n\nWe can find these edges by first doing our process of building a spanning tree while skipping all edges that connects to 1. After that it's easy to find edges that we must form to connect the whole graph.\n\nLet's denote the number of crutial edges as $k$, and the total edges connecting node 1 as $K$, then $k <= D <= K$ clearly must hold.\n\nNow, how do we actually construct the tree? A easy way is to first connect the crutial edges, then add edges connecting node 1 to get $D$ edges, and lastly connect random edges to obtain a spanning tree, it should be obvious that this guarantees a spanning tree with $D$ edges connecting to node 1.\n\n```cpp\nconst int MAXN = 2e5 + 5;\nint dsu[MAXN];\nint rk[MAXN];\nint find(int x){\n    return dsu[x] == x ? x : dsu[x] = find(dsu[x]);\n}\nvoid modify(int x,int y){\n    int pa = find(x);\n    int pb = find(y);\n    if(pa != pb) {\n        if(rk[pa] < rk[pb]) swap(pa, pb); // pa > pb\n        dsu[pb] = pa;\n        rk[pa] += rk[pb];\n    }\n}\nvoid init(int n) {\n    for(int i = 0; i < n; i++) {\n        dsu[i] = i;\n        rk[i] = 1;\n    }\n}\nvoid solve() {\n    int n, m, d;\n    cin >> n >> m >> d;\n    init(n + 1);\n    int total = 0;\n    vector<pii> v;\n    for(int i = 0; i < m; i++) {\n        int a, b;\n        cin >> a >> b;\n        if(a == 1 || b == 1) total += 1;\n        v.pb({a, b});\n    }\n    for(auto [a, b] : v) {\n        if(a == 1 || b == 1) {\n            continue;\n        } else {\n            modify(a, b);\n        }\n    }\n    vector<bool> usedhead(n + 1, false);\n    int need = 0;\n    vector<pii> v2;\n    vector<pii> v3;\n    for(auto [a, b] : v) {\n        if(a == 1) {\n            if(usedhead[find(b)] == false) {\n                need += 1;\n                usedhead[find(b)] = true;\n                v2.pb({a, b});\n            } else {\n                v3.pb({a, b});\n            }\n        } else if(b == 1) {\n            if(usedhead[find(a)] == false) {\n                need += 1;\n                usedhead[find(a)] = true;\n                v2.pb({a, b});\n            } else {\n                v3.pb({a, b});\n            }\n        }\n    }\n    if(need > d || total < d) {\n        cout << \"NO\" << endl;\n        return;\n    }\n    cout << \"YES\" << endl;\n    init(n + 1);\n    for(auto [a, b] : v2) {\n        cout << a << \" \" << b << endl;\n        modify(a, b);\n    }\n    for(int i = 0; i < d - need; i++) {\n        cout << v3[i].first << \" \" << v3[i].second << endl;\n        modify(v3[i].first, v3[i].second);\n    }\n    for(auto [a, b] : v) {\n        if(a == 1 || b == 1) {\n            continue;\n        }\n        if(find(a) != find(b)) {\n            cout << a << \" \" << b << endl;\n            modify(a, b);\n        }\n    }\n    return;\n}\n```\n\nTime complexity: $O(n)$\n\n## [CF 1141G. Privatization of Roads in Treeland (1900)](https://codeforces.com/contest/1141/problem/G)\n\nAnother problem I don't feel like it's 1900.\n\nLet's say we use $k'$ colors, then by the pigeonhole principle, nodes that have more than $k'$ edges connected would clearly become a \"not good\" node.\n\nIt's not difficult to se that we can always color the tree with $k'$ colors, and only nodes that have more than $k'$ edges would be a \"not good\" node. Consider this strategy of coloring: if a node has more than $k'$ edges, then we color all of them as the same color, and if the node doesn't have more than $k'$ edges, we can clearly color them with all distinct colors.\n\nWe can find the number of nodes that have more than $k'$ edges connected by doing a simple prefix sum.\n\n```cpp\nconst int MAXN = 2e5 + 5;\nvector<pii> graph[MAXN];\nvi deg(MAXN, 0);\nvi color(MAXN, 0);\nint root = -1;\nint colnum = MAXN;\nvoid dfs(int cur, int pre) {\n    if(graph[cur].size() == 1) root = cur;\n    deg[graph[cur].size()] += 1;\n    for(auto [v, idx] : graph[cur]) {\n        if(v == pre) continue;\n        dfs(v, cur);\n    }\n}\nvoid dfs2(int cur, int pre, int precol) {\n    if(graph[cur].size() <= colnum) {\n        int c = 1;\n        for(auto [v, idx] : graph[cur]) {\n            if(v == pre) continue;\n            if(c == precol) c++;\n            color[idx] = c;\n            c++;\n            dfs2(v, cur, color[idx]);\n        }\n    } else {\n        for(auto [v, idx] : graph[cur]) {\n            if(v == pre) continue;\n            color[idx] = precol;\n            dfs2(v, cur, color[idx]);\n        }\n    }\n}\nvoid solve() {\n    int n, k;\n    cin >> n >> k;\n    for(int i = 0; i <= n + 1; i++) {\n        graph[i].clear();\n        deg[i] = 0;\n        color[i] = 0;\n    }\n    colnum = MAXN;\n    for(int i = 0; i < n - 1; i++) {\n        int a, b;\n        cin >> a >> b;\n        graph[a].pb({b, i});\n        graph[b].pb({a, i});\n    }\n    dfs(1, -1);\n    for(int i = n; i >= 1; i--) {\n        deg[i] += deg[i + 1];\n        colnum = i;\n        if(deg[i] > k) {\n            break;\n        }\n    }\n    dfs2(root, -1, -1);\n    cout << colnum << endl;\n    for(int i = 0; i <= n - 2; i++) {\n        cout << color[i] << \" \";\n    }\n    cout << endl;\n    return;\n}\n```\n\nTime complexity: $O(n)$\n\n## [CF 1922D. Berserk Monsters (1900)](https://codeforces.com/contest/1922/problem/D)\n\nA not so difficult simulation problem.\n\nThe trick here is to find a efficient way to simulate this process. Notice that only when a monster gets killed, the two monster beside it would have a chance to get killed in the next round, so there's actually not alot of monsters we need to consider for each round.\n\nNote: My implementation is extremely convoluted and lackluster, refer to the editorial for a better implementation.\n\n```cpp\nset<int> s, used;\nvector<int> atk;\nvector<int> def;\nqueue<int> q1, q2, q3;\nvoid solve() {\n    s.clear();\n    atk.clear();\n    def.clear();\n    while(q1.size()) q1.pop();\n    while(q2.size()) q2.pop();\n    while(q3.size()) q3.pop();\n    int n;\n    cin >> n;\n    for(int i = 0; i < n; i++) {\n        int tmp;\n        cin >> tmp;\n        atk.pb(tmp);\n        s.insert(i);\n        q1.push(i);\n    }\n    for(int i = 0; i < n; i++) {\n        int tmp;\n        cin >> tmp;\n        def.pb(tmp);\n    }\n    while(n--) {\n        used.clear();\n        while(q1.size()) {\n            int fr = q1.front();\n            q1.pop();\n            queue<int> q;\n            auto it = s.find(fr);\n            int sum = 0;\n            if(it != s.begin()) {\n                q.push(*(prev(it, 1)));\n                sum += atk[*(prev(it, 1))];\n            }\n            if(next(it, 1) != s.end()) {\n                q.push(*(next(it, 1)));\n                sum += atk[*(next(it, 1))];\n            }\n            if(sum > def[*it]) {\n                q3.push(*it);\n                while(q.size()) {\n                    q2.push(q.front());\n                    q.pop();\n                }\n            }\n        }\n        cout << q3.size() << \" \";\n        //debug(q3);\n        while(q3.size()) {\n            s.erase(q3.front());\n            q3.pop();\n        }\n        while(q2.size()) {\n            if(s.find(q2.front()) == s.end() || used.find(q2.front()) != used.end()) {\n                q2.pop();\n                continue;\n            }\n            used.insert(q2.front());\n            q1.push(q2.front());\n            q2.pop();\n        }\n    }\n    cout << endl;\n    return;\n}\n```\n\nTime complexity: $O(nlogn)$\n\n## [CF 1168B. Good Triple (1900)](https://codeforces.com/contest/1168/problem/B)\n\nTo solve this, one needs to observe that the length of a substring without the required condition is actually at most 8.\n\nAfter knowing this fact, we can bruteforce finding all bad substrings and calculate the answer with it.\n\nFor some reason my implementation kept failing until I completely rewrote it and it suddenly passed.\n\n```cpp\nstring s;\nbool isgood(int l, int r) {\n    for(int l2 = l; l2 <= r; l2 ++) {\n        for(int i = 1; i <= 5 && l2 + 2 * i <= r; i++) {\n            if(s[l2] == s[l2 + i] && s[l2 + i] == s[l2 + (2 * i)]) {\n                return false;\n            }\n        }\n    }\n    return true;\n} \nvoid solve() {\n    cin >> s;\n    int ans = 0;\n    for(int l = 0; l < (int)(s.size()) - 2; l++) {\n        int mx = 0;\n        for(int r = l + 1; r < (int)s.size() && r < l + 10; r++) {\n            if(isgood(l, r)) {\n                mx = r;\n            }\n        }\n        ans += s.size() - (mx + 1);\n    }\n    cout << ans << endl;\n    return;\n}\n```\n\nTime complexity: $O(nlogn)$\n\n## [CF 1729F. Kirei and the Linear Function (1900)](https://codeforces.com/contest/1729/problem/F)\n\nInteresting problem, but has some points that made it a clear giveaway.\n\nFirst, notice in the queries that they want $v(l_i, r_i)$, so we must need some way to calculate $v(l_i, r_i)$ in $O(1)$ or $O(logn)$ time.\n\nThe second giveaway is the specific mod number 9. If you remember from middle school, the way to check if a number can be divided by 9 is to check if the sum of it's digits can also be divided by 9.\n\nUsing these two hints, we can easily find out the answer has to do with prefix sums!\n\nWe can preprocess a prefix sum and preprocess the smallest (and second smallest) $L$ for each number from 0 to 9.\n\n```cpp\nvoid solve() {\n    string s;\n    cin >> s;\n    int w, m;\n    cin >> w >> m;\n    vi pre(s.size() + 1);\n    pre[0] = 0;\n    for(int i = 1; i <= s.size(); i++) {\n        pre[i] = pre[i - 1] + (s[i - 1] - '0');\n    }\n    int smallest[9];\n    int ssmallest[9];\n    for(int i = 0; i <= 8; i++) {\n        smallest[i] = -1;\n        ssmallest[i] = -1;\n    }\n    for(int i = 1; i + w - 1 <= s.size(); i++) {\n        int num = (pre[i + w - 1] - pre[i - 1]) % 9;\n        if(smallest[num] == -1) {\n            smallest[num] = i;\n        } else if(ssmallest[num] == -1) {\n            ssmallest[num] = i;\n        }\n    }\n    while(m--) {\n        int l, r, k;\n        cin >> l >> r >> k;\n        int num = (pre[r] - pre[l - 1]) % 9;\n        pii minans = {1e9, 1e9};\n        for(int i = 0; i <= 8; i++) {\n            for(int j = 0; j <= 8; j++) {\n                if(((i * num + j) % 9) == k) {\n                    if(i != j) {\n                        if(smallest[i] != -1 && smallest[j] != -1) {\n                            minans = min(minans, {smallest[i], smallest[j]});\n                        }\n                    } else {\n                        if(smallest[i] != -1 && ssmallest[j] != -1) {\n                            minans = min(minans, {smallest[i], ssmallest[j]});\n                        }\n                    }\n                }\n            }\n        }\n        if(minans.first == 1e9) {\n            cout << -1 << \" \" << -1 << endl;\n        } else {\n            cout << minans.first << \" \" << minans.second << endl;\n        }\n    }\n    return;\n}\n```\n\nTime complexity: $O(n)$ preprocess, $O(1)$ per query\n\n## [CF 1791G2. Teleporters (Hard Version) (1900)](https://codeforces.com/contest/1791/problem/G2)\n\nLet's define the cost of a teleporter as $min(a_i + i, a_i + n + 1 - i)$, which is just the minimum cost of walking to it from the front or to the back. It's clear that after the initial teleporter, we will choose the teleporters based from lowest cost to highest cost.\n\nThe problem now is how to determine the first teleporter we want to use? We can iterate using each teleporter as the first one, and using binary search + prefix sum to determine how many teleporters we can use after the first one. The problem that encounters with this is when you binary search, you might include the one where you already used as the initial teleporter, so you would need to keep track and deduct the value when your binary search includes that teleporter.\n\n```cpp\nvi v(2e5 + 5, 0);\nvector<pii> order;\nvi prefix;\nvoid solve() {\n    int n, c;\n    cin >> n >> c;\n    order.clear();\n    prefix.clear();\n    for(int i = 1; i <= n; i++) {\n        cin >> v[i];\n        order.pb({min(v[i] + i, v[i] + (n - i + 1)), i});\n    }\n    sort(all(order));\n    prefix.pb(0);\n    for(int i = 0; i < n; i++) {\n        prefix.pb(prefix.back() + order[i].first);\n    }\n    int ans = 0;\n    for(int i = 0; i < n; i++) {\n        int cst = c - (v[order[i].second] + order[i].second);\n        int l = 0, r = n;\n        while(r - l > 1) {\n            int m = (r + l) / 2;\n            int cmp = prefix[m];\n            if(m >= (i + 1)) cmp -= order[i].first;\n            if(cst >= cmp) {\n                l = m;\n            } else {\n                r = m;\n            }\n        }\n        int ret = prefix[r];\n        int use;\n        if(r >= (i + 1)) ret -= order[i].first;\n        if(cst >= ret) use = r;\n        else use = l;\n        if(use < (i + 1) && cst >= 0) use += 1;\n        ans = max(ans, use);\n    }\n    cout << ans << endl;\n    return;\n}\n```\n\nTime complexity: $O(nlogn)$\n\n## [CF 1929D. Sasha and a Walk in the City (1900)](https://codeforces.com/contest/1929/problem/D)\n\nA really tricky dp problem that stomped me for a good while, but the solution is one of the shortest in this list.\n\nLet $dp[u]$ denote the number of **non-empty** subtrees rooted at node $u$ such that there is no pair of vertices where a node is the ancestor of the other.\n\nWe can get the transition $dp[u] = \\prod (dp[v_i] + 1)$, where $v_i$ is the children of $u$.\n\nThis dp state is essentially picking the combination of subtrees (we add 1 for when we don't choose an empty set for that subtree). When all of them were empty, it means that only the node $u$ is dangerous.\n\nNow to calculate the answer, we need to divide into two parts:\n\nif there is no pair of vertices where a node is the ancestor of the other, then the answer would be $dp[1] + 1$.\n\nBut we can also tolerate exactly 1 pair of vertices where one is the ancestor of the other. Lets say if $u$ is the ancestor of another vertex, then the number of ways for this to happen is $\\sum dp[v_i]$, where $v_i$ is the children of $u$.\n\nWe then consider the case for every node, and the answer becomes $(dp[1] + 1) + dp[2] + ... + dp[n] = 1 + \\sum dp[i]$.\n\n```cpp\nconst int MAXN = 3e5 + 5;\nvi graph[MAXN];\nvi dp(MAXN, 0);\nconst int MOD = 998244353;\nvoid dfs(int cur, int prev) {\n    for(auto v : graph[cur]) {\n        if(v == prev) continue;\n        dfs(v, cur);\n        dp[cur] *= (dp[v] + 1);\n        dp[cur] %= MOD;\n    }\n}\nvoid solve() {\n    int n;\n    cin >> n;\n    for(int i = 1; i <= n; i++) {\n        graph[i].clear();\n        dp[i] = 1;\n    }\n    for(int i = 0; i < n - 1; i++) {\n        int u, v;\n        cin >> u >> v;\n        graph[u].pb(v);\n        graph[v].pb(u);\n    }\n    dfs(1, -1);\n    int ans = 1;\n    for(int i = 1; i <= n; i++){\n        ans += dp[i];\n        ans %= MOD;\n    }\n    cout << ans << endl;\n    return;\n}\n```\n\nTime complexity: $O(n)$\n\n## [CF 1856E1. PermuTree (easy version) (1800)](https://codeforces.com/contest/1856/problem/E1)\n\nI genuinely do not understand how this problem is 1800...maybe im just really bad at dp.\n\nLet's day for a node $k$ with subtrees size ${S_1,...,S_i}$, and in each subtree we can assign the values as either bigger than the node k or smaller, then our goal is to group them into two groups, such as the product of the size of the two groups are maximum.\n\nThe first claim is we can always get the optimal upperbound with some kind of assignment, I actually do not know how to prove this and I just winged it when I wrote it but if you are interested you can check out the editorial :).\n\nNow, the problem becomes cutting the set ${S_1,...,S_i}$ into two sets, such that the product is maximized. This is actually an NP hard problem, but $\\sum{S_i}$ is actually pretty small, so we can tranform it into a subset sum problem.\n\nLet $S = \\sum{S_i}$, then we can get $max((S - j) \\cdot j)$ as the answer if $j$ is a possible subset sum.\n\nIt should be pretty easy to write an $O(n^2)$ solution for subset sum, so just do it for each node and yay!\n\nTheres one small problem... doing subset sum is $O(n^2)$, and actually wouldn't $\\sum{S_i}$ become $O(n^3)$? even if it doesn't, we need to do it for each node, then wouldn't it become $O(n^3)$?\n\nThe answer is actually no (This is why I originally got stuck because I also though it at least has to be $O(n^3)$)! Refer to #7 of this [blog](https://codeforces.com/blog/entry/100910), really interesting property to think about tree dps!\n\n```cpp\nconst int MAXN = 5005;\nvector<int> graph[MAXN];\nvector<int> sz(MAXN, 0);\nint ans = 0;\nvoid dfs(int cur, int pre) {\n    vi vec;\n    sz[cur] += 1;\n    if(graph[cur].size() == 1 && cur != 1) {\n        return;\n    }\n    for(auto v : graph[cur]) {\n        if(v == pre) continue;\n        dfs(v, cur);\n        sz[cur] += sz[v];\n        vec.pb(sz[v]);\n    }\n    int sum = sz[cur] - 1;\n    vector<int> dp(sum + 1, 0);\n    dp[0] = true;\n    int mx = 0;\n    for(auto i : vec) {\n        for(int j = sum; j - i >= 0; j--) {\n            dp[j] |= dp[j - i];\n        }\n    }\n    for(int i = 0; i <= sum; i++) {\n        if(dp[i]) mx = max(mx, i * (sum - i));\n    }\n    ans += mx;\n}\nvoid solve() {\n    int n;\n    cin >> n;\n    for(int i = 2; i <= n; i++) {\n        int u;\n        cin >> u;\n        graph[u].pb(i);\n        graph[i].pb(u);\n    }\n    //for(int i = 1; i <= n; i++) debug(graph[i]);\n    // get subtree size \n    dfs(1, -1);\n    cout << ans << endl;\n    return;\n}\n```\n\nTime complexity: $O(n^2)$\n\n## [CF 1856E2. PermuTree (hard version) (2700)](https://codeforces.com/contest/1856/problem/E2)\n\nNote: I was not able to solve this problem even following the editorial, the time limit is very strict but I feel like still including this problem and mentioning the techniques use for this problem.\n\nThe are two main optimizations for this problem: $O(n\\sqrt{n})$ subset sum trick and using bitsets to optimize the dp by $\\frac{1}{64}$. Very tricky stuff :)\n\n## [CF 1914G1. Light Bulbs (Easy Version) (2100)](https://codeforces.com/contest/1914/problem/G1)\n\nThe editorial uses XOR hashing, but I feel like my alternative solution using graph theory is way more intuitive.\n\nWe can transform the whole problem as a graph theory problem. Let the bulbs be nodes, and we will add a directed edge $i$ to $j$ if the bulb $j$ is between the two bulb $i$, which basically means if $i$ is lighted, we can light up color $j$ by the second operation.\n\nIt's not difficult to see the answer for the first problem is the number of components in the graph (It's easy to see that with this way of construction, we can always find a node in the subgraph that can reach all other nodes), and the answer for the second problem is the product for each subgraph, the number of nodes that can reach every other node in that subgraph.\n\nThe first answer is very easy to obtain, but the second one is slightly tricky. A naive way is to dfs from each node, and if they can reach all other nodes then we include it in. Unfortunately this fails as the complexity could go up to $O(n^3)$.\n\nHere is where the trick Strongly Connected Component (SCC) comes in! The main use for SCC is we can \"shrink\" a directed graph into a Directed Acyclic Graph (DAG), and it's easy to see after shrinking, only the first starting node (the node with in degree 0) can reach all other nodes! So we just need to find how many nodes does this starting node consist.\n\nOur whole algorithm is as follows:\n\nBuild graph -> Do SCC -> Count the in degree of the nodes for the new DAG -> calculate how many nodes does each new node consist -> Calculate answer.\n\nI use kosaraju algorithm for SCC, because im too lazy to learn tarjan TMT.\n\n```cpp\nconst int MAXN = 1005;\nint n;\nvi g[MAXN];\nvi g2[MAXN];\nvi scc(MAXN, 0);\nvi sccsz(MAXN, 0);\nbool visited[MAXN];\nvector<bool> used(MAXN, 0);\nvi v;\nint sccCnt = 0;\nvector<int> indeg(MAXN, 0);\nvector<int> s;\nvoid init() {\n    for(int i = 1; i <= n; i++) {\n        g[i].clear();\n        g2[i].clear();\n        scc[i] = 0;\n        used[i] = 0;\n        visited[i] = false;\n        indeg[i] = 0;\n        sccsz[i] = 0;\n    }\n    sccCnt = 0;\n    s.clear();\n    v.clear();\n}\nvoid dfs1(int u) {\n    visited[u] = true;\n    for (int v : g[u])\n        if (!visited[v]) dfs1(v);\n      s.push_back(u);\n}\nvoid dfs2(int u) {\n      scc[u] = sccCnt;\n      for (int v : g2[u]) {\n        if (!scc[v]) dfs2(v);\n      }\n}\nvoid solve() {\n    cin >> n;\n    init();\n    for(int i = 0; i < 2 * n; i++) {\n        int num;\n        cin >> num;\n        v.pb(num);\n    }\n    // build graph\n    for(int i = 0; i < 2 * n; i++) {\n        if(used[v[i]]) continue;\n        used[v[i]] = true;\n        for(int j = i + 1; j < 2 * n && v[j] != v[i]; j++) {\n            g[v[i]].push_back(v[j]);\n            g2[v[j]].push_back(v[i]);\n        }\n    }\n    // do SCC\n    for(int i = 1; i <= n; i++) {\n        if(!visited[i]) dfs1(i);\n    }\n    for(int i = n - 1; i >= 0; i--) {\n        if(scc[s[i]] == 0) {\n            sccCnt += 1;\n            dfs2(s[i]);\n        }\n    }\n    // count indeg\n    for(int i = 1; i <= n; i++) {\n        for(auto j : g[i]) {\n            if(scc[i] != scc[j]) indeg[scc[j]] += 1;\n        }\n    }\n    int ans1 = 0, ans2 = 1;\n    for(int i = 1; i <= n; i++) {\n        sccsz[scc[i]] += 1;\n    }\n    for(int i = 1; i <= sccCnt; i++) {\n        if(indeg[i] == 0) {\n            ans1 += 1;\n            ans2 *= (sccsz[i] * 2);\n            ans2 %= 998244353;\n        }\n    }\n    cout << ans1 << \" \" << ans2 << endl;\n    return;\n}\n```\n\nTime complexity: $O(n^2)$\n\n## [CF 1914G2. Light Bulbs (Hard Version) (2300)](https://codeforces.com/contest/1914/problem/G2)\n\nOur solution for easy version was bounded by the graph building process which was $O(n^2)$, but there is actually a way to optimize the graph to only $2n$ edges!\n\nI did not really understand how this optimization works, but I'll still include it here and maybe try understanding it some day.\n\n```cpp\n    // build graph\n    deque<int> dq;\n    for(int i = 0; i < 2 * n; i++) {\n        if(dq.size()) {\n            g[dq.back()].push_back(v[i]);\n            g2[v[i]].push_back(dq.back());\n        }\n        if(used[v[i]] == 0) {\n            used[v[i]] += 1;\n            dq.push_back(v[i]);\n        } else {\n            used[v[i]] += 1;\n            while(dq.size() && used[dq.back()] == 2) dq.pop_back();\n        }\n    }\n```\n\nTime complexity: $O(n)$\n\nAfterwards: Chicago really has some good food! Although serious note, I really need to get myself back on the track after this spring break, I know I can do it, fighting! And in terms of CF, I think I'll start doing more 2000~2200 problems, and after that I'll start doing contests again.\n","slug":"CM-CF-Practice","published":1,"updated":"2024-12-26T01:29:58.462Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblgp0004b0u9hm9kezsd","content":"<p>Hey guys, life has been pretty busy lately and tough so I haven’t updated in a while, so I decided to write a short blog about some CM+ (&gt;=1900) problems I solved in CF lately. The difficulty will we roughly sorted by how hard I feel it is.</p>\n<h2 id=\"cf-1923d-slimes-1800\"><a href=\"https://codeforces.com/contest/1923/problem/D\">CF 1923D. Slimes (1800)</a></h2>\n<p>I know this question is only 1800, but I feel like it deserves at least 1900.</p>\n<p>The high level idea for this problem is to find how many slimes we need to accumulate from the left/right to eat this slime. Formally, for each index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, find the maximum <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi><mo>&lt;</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">j &lt; i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>+</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[j] + ... + a[i - 1] &gt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>, and the maximum <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>&gt;</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">k &gt; i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>+</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[i + 1] + ... + a[k] &gt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>, then the answer for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>min</mtext><mo stretchy=\"false\">(</mo><mi>k</mi><mo>−</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>i</mi><mo>−</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{min}(k - i, i - j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">min</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)</span></span></span></span>. It’s easy to see we can use prefix sum and binary search to obtain <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> per index.</p>\n<p>The tricky part about this problem is dealing with duplicate values in the same row, as they technically cannot eat each other, and it cause alot of problems while implementing.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vi <span class=\"title\">v</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) cin &gt;&gt; v[i];</span><br><span class=\"line\">    <span class=\"type\">int</span> curnum = v[<span class=\"number\">1</span>], k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> val[n + <span class=\"number\">1</span>][<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            val[i][j] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> t = <span class=\"number\">0</span>; t &lt;= <span class=\"number\">1</span>; t++) &#123;</span><br><span class=\"line\">        <span class=\"function\">vi <span class=\"title\">pre</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            pre[i] = pre[i - <span class=\"number\">1</span>] + v[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//debug(pre);</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l = <span class=\"number\">0</span>, r = i - k - <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!(r &lt; l || pre[i - <span class=\"number\">1</span>] - pre[l] &lt;= v[i])) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(r - l &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> m = (r + l) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(pre[i - <span class=\"number\">1</span>] - pre[m] &gt; v[i]) l = m;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> r = m - <span class=\"number\">1</span>; </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pre[i - <span class=\"number\">1</span>] - pre[r] &gt; v[i]) val[i][t] = i - (r + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> val[i][t] = i - (l + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v[i - <span class=\"number\">1</span>] &gt; v[i]) val[i][t] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v[i] != curnum) &#123;</span><br><span class=\"line\">                k = <span class=\"number\">1</span>;</span><br><span class=\"line\">                curnum = v[i];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                k += <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">reverse</span>(v.<span class=\"built_in\">begin</span>() + <span class=\"number\">1</span>, v.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(val[i][<span class=\"number\">0</span>] == <span class=\"number\">-1</span> &amp;&amp; val[n - i + <span class=\"number\">1</span>][<span class=\"number\">1</span>] == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val[i][<span class=\"number\">0</span>] == <span class=\"number\">-1</span> || val[n - i + <span class=\"number\">1</span>][<span class=\"number\">1</span>] == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"built_in\">max</span>(val[i][<span class=\"number\">0</span>], val[n - i + <span class=\"number\">1</span>][<span class=\"number\">1</span>]) &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"built_in\">min</span>(val[i][<span class=\"number\">0</span>], val[n - i + <span class=\"number\">1</span>][<span class=\"number\">1</span>]) &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1133f2-spanning-tree-with-one-fixed-degree-1900\"><a href=\"https://codeforces.com/contest/1923/problem/D\">CF 1133F2. Spanning Tree with One Fixed Degree (1900)</a></h2>\n<p>This problem honestly does not deserve 1900, I solve it in like 15 minutes max.</p>\n<p>If the number of edges on the node 1 is less then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span>, then the answer is clearly no. Else, we want to first find “crutial edges”, which are edges connected to the node 1 that must be connected in order for the whole graph to be connected.</p>\n<p>We can find these edges by first doing our process of building a spanning tree while skipping all edges that connects to 1. After that it’s easy to find edges that we must form to connect the whole graph.</p>\n<p>Let’s denote the number of crutial edges as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>, and the total edges connecting node 1 as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>&lt;</mo><mo>=</mo><mi>D</mi><mo>&lt;</mo><mo>=</mo><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">k &lt;= D &lt;= K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> clearly must hold.</p>\n<p>Now, how do we actually construct the tree? A easy way is to first connect the crutial edges, then add edges connecting node 1 to get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> edges, and lastly connect random edges to obtain a spanning tree, it should be obvious that this guarantees a spanning tree with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> edges connecting to node 1.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> dsu[MAXN];</span><br><span class=\"line\"><span class=\"type\">int</span> rk[MAXN];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dsu[x] == x ? x : dsu[x] = <span class=\"built_in\">find</span>(dsu[x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> pa = <span class=\"built_in\">find</span>(x);</span><br><span class=\"line\">    <span class=\"type\">int</span> pb = <span class=\"built_in\">find</span>(y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pa != pb) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rk[pa] &lt; rk[pb]) <span class=\"built_in\">swap</span>(pa, pb); <span class=\"comment\">// pa &gt; pb</span></span><br><span class=\"line\">        dsu[pb] = pa;</span><br><span class=\"line\">        rk[pa] += rk[pb];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        dsu[i] = i;</span><br><span class=\"line\">        rk[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, d;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; d;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">    vector&lt;pii&gt; v;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a, b;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a == <span class=\"number\">1</span> || b == <span class=\"number\">1</span>) total += <span class=\"number\">1</span>;</span><br><span class=\"line\">        v.<span class=\"built_in\">pb</span>(&#123;a, b&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [a, b] : v) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a == <span class=\"number\">1</span> || b == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">modify</span>(a, b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">usedhead</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> need = <span class=\"number\">0</span>;</span><br><span class=\"line\">    vector&lt;pii&gt; v2;</span><br><span class=\"line\">    vector&lt;pii&gt; v3;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [a, b] : v) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(usedhead[<span class=\"built_in\">find</span>(b)] == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">                need += <span class=\"number\">1</span>;</span><br><span class=\"line\">                usedhead[<span class=\"built_in\">find</span>(b)] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                v2.<span class=\"built_in\">pb</span>(&#123;a, b&#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                v3.<span class=\"built_in\">pb</span>(&#123;a, b&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(b == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(usedhead[<span class=\"built_in\">find</span>(a)] == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">                need += <span class=\"number\">1</span>;</span><br><span class=\"line\">                usedhead[<span class=\"built_in\">find</span>(a)] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                v2.<span class=\"built_in\">pb</span>(&#123;a, b&#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                v3.<span class=\"built_in\">pb</span>(&#123;a, b&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(need &gt; d || total &lt; d) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [a, b] : v2) &#123;</span><br><span class=\"line\">        cout &lt;&lt; a &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"built_in\">modify</span>(a, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; d - need; i++) &#123;</span><br><span class=\"line\">        cout &lt;&lt; v3[i].first &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; v3[i].second &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"built_in\">modify</span>(v3[i].first, v3[i].second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [a, b] : v) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a == <span class=\"number\">1</span> || b == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">find</span>(a) != <span class=\"built_in\">find</span>(b)) &#123;</span><br><span class=\"line\">            cout &lt;&lt; a &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"built_in\">modify</span>(a, b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1141g-privatization-of-roads-in-treeland-1900\"><a href=\"https://codeforces.com/contest/1141/problem/G\">CF 1141G. Privatization of Roads in Treeland (1900)</a></h2>\n<p>Another problem I don’t feel like it’s 1900.</p>\n<p>Let’s say we use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">k&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> colors, then by the pigeonhole principle, nodes that have more than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">k&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> edges connected would clearly become a “not good” node.</p>\n<p>It’s not difficult to se that we can always color the tree with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">k&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> colors, and only nodes that have more than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">k&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> edges would be a “not good” node. Consider this strategy of coloring: if a node has more than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">k&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> edges, then we color all of them as the same color, and if the node doesn’t have more than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">k&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> edges, we can clearly color them with all distinct colors.</p>\n<p>We can find the number of nodes that have more than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">k&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> edges connected by doing a simple prefix sum.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\">vector&lt;pii&gt; graph[MAXN];</span><br><span class=\"line\"><span class=\"function\">vi <span class=\"title\">deg</span><span class=\"params\">(MAXN, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">vi <span class=\"title\">color</span><span class=\"params\">(MAXN, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"type\">int</span> root = <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> colnum = MAXN;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> cur, <span class=\"type\">int</span> pre)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(graph[cur].<span class=\"built_in\">size</span>() == <span class=\"number\">1</span>) root = cur;</span><br><span class=\"line\">    deg[graph[cur].<span class=\"built_in\">size</span>()] += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, idx] : graph[cur]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == pre) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v, cur);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> cur, <span class=\"type\">int</span> pre, <span class=\"type\">int</span> precol)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(graph[cur].<span class=\"built_in\">size</span>() &lt;= colnum) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> c = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, idx] : graph[cur]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v == pre) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c == precol) c++;</span><br><span class=\"line\">            color[idx] = c;</span><br><span class=\"line\">            c++;</span><br><span class=\"line\">            <span class=\"built_in\">dfs2</span>(v, cur, color[idx]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, idx] : graph[cur]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v == pre) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            color[idx] = precol;</span><br><span class=\"line\">            <span class=\"built_in\">dfs2</span>(v, cur, color[idx]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        graph[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        deg[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        color[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    colnum = MAXN;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a, b;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">        graph[a].<span class=\"built_in\">pb</span>(&#123;b, i&#125;);</span><br><span class=\"line\">        graph[b].<span class=\"built_in\">pb</span>(&#123;a, i&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n; i &gt;= <span class=\"number\">1</span>; i--) &#123;</span><br><span class=\"line\">        deg[i] += deg[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">        colnum = i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(deg[i] &gt; k) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(root, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    cout &lt;&lt; colnum &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        cout &lt;&lt; color[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1922d-berserk-monsters-1900\"><a href=\"https://codeforces.com/contest/1922/problem/D\">CF 1922D. Berserk Monsters (1900)</a></h2>\n<p>A not so difficult simulation problem.</p>\n<p>The trick here is to find a efficient way to simulate this process. Notice that only when a monster gets killed, the two monster beside it would have a chance to get killed in the next round, so there’s actually not alot of monsters we need to consider for each round.</p>\n<p>Note: My implementation is extremely convoluted and lackluster, refer to the editorial for a better implementation.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set&lt;<span class=\"type\">int</span>&gt; s, used;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; atk;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; def;</span><br><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt; q1, q2, q3;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    s.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    atk.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    def.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q1.<span class=\"built_in\">size</span>()) q1.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q2.<span class=\"built_in\">size</span>()) q2.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q3.<span class=\"built_in\">size</span>()) q3.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> tmp;</span><br><span class=\"line\">        cin &gt;&gt; tmp;</span><br><span class=\"line\">        atk.<span class=\"built_in\">pb</span>(tmp);</span><br><span class=\"line\">        s.<span class=\"built_in\">insert</span>(i);</span><br><span class=\"line\">        q1.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> tmp;</span><br><span class=\"line\">        cin &gt;&gt; tmp;</span><br><span class=\"line\">        def.<span class=\"built_in\">pb</span>(tmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--) &#123;</span><br><span class=\"line\">        used.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q1.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> fr = q1.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            q1.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> it = s.<span class=\"built_in\">find</span>(fr);</span><br><span class=\"line\">            <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(it != s.<span class=\"built_in\">begin</span>()) &#123;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(*(<span class=\"built_in\">prev</span>(it, <span class=\"number\">1</span>)));</span><br><span class=\"line\">                sum += atk[*(<span class=\"built_in\">prev</span>(it, <span class=\"number\">1</span>))];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">next</span>(it, <span class=\"number\">1</span>) != s.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(*(<span class=\"built_in\">next</span>(it, <span class=\"number\">1</span>)));</span><br><span class=\"line\">                sum += atk[*(<span class=\"built_in\">next</span>(it, <span class=\"number\">1</span>))];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sum &gt; def[*it]) &#123;</span><br><span class=\"line\">                q3.<span class=\"built_in\">push</span>(*it);</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(q.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">                    q2.<span class=\"built_in\">push</span>(q.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">                    q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; q3.<span class=\"built_in\">size</span>() &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//debug(q3);</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q3.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">            s.<span class=\"built_in\">erase</span>(q3.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">            q3.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q2.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.<span class=\"built_in\">find</span>(q2.<span class=\"built_in\">front</span>()) == s.<span class=\"built_in\">end</span>() || used.<span class=\"built_in\">find</span>(q2.<span class=\"built_in\">front</span>()) != used.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                q2.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            used.<span class=\"built_in\">insert</span>(q2.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">            q1.<span class=\"built_in\">push</span>(q2.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">            q2.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1168b-good-triple-1900\"><a href=\"https://codeforces.com/contest/1168/problem/B\">CF 1168B. Good Triple (1900)</a></h2>\n<p>To solve this, one needs to observe that the length of a substring without the required condition is actually at most 8.</p>\n<p>After knowing this fact, we can bruteforce finding all bad substrings and calculate the answer with it.</p>\n<p>For some reason my implementation kept failing until I completely rewrote it and it suddenly passed.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string s;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isgood</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l2 = l; l2 &lt;= r; l2 ++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span> &amp;&amp; l2 + <span class=\"number\">2</span> * i &lt;= r; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[l2] == s[l2 + i] &amp;&amp; s[l2 + i] == s[l2 + (<span class=\"number\">2</span> * i)]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l = <span class=\"number\">0</span>; l &lt; (<span class=\"type\">int</span>)(s.<span class=\"built_in\">size</span>()) - <span class=\"number\">2</span>; l++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mx = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> r = l + <span class=\"number\">1</span>; r &lt; (<span class=\"type\">int</span>)s.<span class=\"built_in\">size</span>() &amp;&amp; r &lt; l + <span class=\"number\">10</span>; r++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">isgood</span>(l, r)) &#123;</span><br><span class=\"line\">                mx = r;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans += s.<span class=\"built_in\">size</span>() - (mx + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1729f-kirei-and-the-linear-function-1900\"><a href=\"https://codeforces.com/contest/1729/problem/F\">CF 1729F. Kirei and the Linear Function (1900)</a></h2>\n<p>Interesting problem, but has some points that made it a clear giveaway.</p>\n<p>First, notice in the queries that they want <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo stretchy=\"false\">(</mo><msub><mi>l</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>r</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">v(l_i, r_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, so we must need some way to calculate <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo stretchy=\"false\">(</mo><msub><mi>l</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>r</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">v(l_i, r_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> time.</p>\n<p>The second giveaway is the specific mod number 9. If you remember from middle school, the way to check if a number can be divided by 9 is to check if the sum of it’s digits can also be divided by 9.</p>\n<p>Using these two hints, we can easily find out the answer has to do with prefix sums!</p>\n<p>We can preprocess a prefix sum and preprocess the smallest (and second smallest) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> for each number from 0 to 9.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"type\">int</span> w, m;</span><br><span class=\"line\">    cin &gt;&gt; w &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"function\">vi <span class=\"title\">pre</span><span class=\"params\">(s.size() + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    pre[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= s.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        pre[i] = pre[i - <span class=\"number\">1</span>] + (s[i - <span class=\"number\">1</span>] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> smallest[<span class=\"number\">9</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> ssmallest[<span class=\"number\">9</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">        smallest[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        ssmallest[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i + w - <span class=\"number\">1</span> &lt;= s.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> num = (pre[i + w - <span class=\"number\">1</span>] - pre[i - <span class=\"number\">1</span>]) % <span class=\"number\">9</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(smallest[num] == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            smallest[num] = i;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ssmallest[num] == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            ssmallest[num] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l, r, k;</span><br><span class=\"line\">        cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;</span><br><span class=\"line\">        <span class=\"type\">int</span> num = (pre[r] - pre[l - <span class=\"number\">1</span>]) % <span class=\"number\">9</span>;</span><br><span class=\"line\">        pii minans = &#123;<span class=\"number\">1e9</span>, <span class=\"number\">1e9</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= <span class=\"number\">8</span>; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(((i * num + j) % <span class=\"number\">9</span>) == k) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i != j) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(smallest[i] != <span class=\"number\">-1</span> &amp;&amp; smallest[j] != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                            minans = <span class=\"built_in\">min</span>(minans, &#123;smallest[i], smallest[j]&#125;);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(smallest[i] != <span class=\"number\">-1</span> &amp;&amp; ssmallest[j] != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                            minans = <span class=\"built_in\">min</span>(minans, &#123;smallest[i], ssmallest[j]&#125;);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(minans.first == <span class=\"number\">1e9</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cout &lt;&lt; minans.first &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; minans.second &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> preprocess, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> per query</p>\n<h2 id=\"cf-1791g2-teleporters-hard-version-1900\"><a href=\"https://codeforces.com/contest/1791/problem/G2\">CF 1791G2. Teleporters (Hard Version) (1900)</a></h2>\n<p>Let’s define the cost of a teleporter as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mi>i</mi><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">min(a_i + i, a_i + n + 1 - i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span></span></span></span>, which is just the minimum cost of walking to it from the front or to the back. It’s clear that after the initial teleporter, we will choose the teleporters based from lowest cost to highest cost.</p>\n<p>The problem now is how to determine the first teleporter we want to use? We can iterate using each teleporter as the first one, and using binary search + prefix sum to determine how many teleporters we can use after the first one. The problem that encounters with this is when you binary search, you might include the one where you already used as the initial teleporter, so you would need to keep track and deduct the value when your binary search includes that teleporter.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vi <span class=\"title\">v</span><span class=\"params\">(<span class=\"number\">2e5</span> + <span class=\"number\">5</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">vector&lt;pii&gt; order;</span><br><span class=\"line\">vi prefix;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, c;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; c;</span><br><span class=\"line\">    order.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    prefix.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; v[i];</span><br><span class=\"line\">        order.<span class=\"built_in\">pb</span>(&#123;<span class=\"built_in\">min</span>(v[i] + i, v[i] + (n - i + <span class=\"number\">1</span>)), i&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(order));</span><br><span class=\"line\">    prefix.<span class=\"built_in\">pb</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        prefix.<span class=\"built_in\">pb</span>(prefix.<span class=\"built_in\">back</span>() + order[i].first);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> cst = c - (v[order[i].second] + order[i].second);</span><br><span class=\"line\">        <span class=\"type\">int</span> l = <span class=\"number\">0</span>, r = n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(r - l &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> m = (r + l) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> cmp = prefix[m];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(m &gt;= (i + <span class=\"number\">1</span>)) cmp -= order[i].first;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cst &gt;= cmp) &#123;</span><br><span class=\"line\">                l = m;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                r = m;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ret = prefix[r];</span><br><span class=\"line\">        <span class=\"type\">int</span> use;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r &gt;= (i + <span class=\"number\">1</span>)) ret -= order[i].first;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cst &gt;= ret) use = r;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> use = l;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(use &lt; (i + <span class=\"number\">1</span>) &amp;&amp; cst &gt;= <span class=\"number\">0</span>) use += <span class=\"number\">1</span>;</span><br><span class=\"line\">        ans = <span class=\"built_in\">max</span>(ans, use);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1929d-sasha-and-a-walk-in-the-city-1900\"><a href=\"https://codeforces.com/contest/1929/problem/D\">CF 1929D. Sasha and a Walk in the City (1900)</a></h2>\n<p>A really tricky dp problem that stomped me for a good while, but the solution is one of the shortest in this list.</p>\n<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp[u]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span></span></span></span> denote the number of <strong>non-empty</strong> subtrees rooted at node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> such that there is no pair of vertices where a node is the ancestor of the other.</p>\n<p>We can get the transition <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo>∏</mo><mo stretchy=\"false\">(</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><msub><mi>v</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dp[u] = \\prod (dp[v_i] + 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">v_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the children of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>.</p>\n<p>This dp state is essentially picking the combination of subtrees (we add 1 for when we don’t choose an empty set for that subtree). When all of them were empty, it means that only the node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> is dangerous.</p>\n<p>Now to calculate the answer, we need to divide into two parts:</p>\n<p>if there is no pair of vertices where a node is the ancestor of the other, then the answer would be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">dp[1] + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>\n<p>But we can also tolerate exactly 1 pair of vertices where one is the ancestor of the other. Lets say if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> is the ancestor of another vertex, then the number of ways for this to happen is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><msub><mi>v</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\sum dp[v_i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">v_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the children of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>.</p>\n<p>We then consider the case for every node, and the answer becomes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mn>2</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mn>1</mn><mo>+</mo><mo>∑</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">(dp[1] + 1) + dp[2] + ... + dp[n] = 1 + \\sum dp[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> MAXN = <span class=\"number\">3e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\">vi graph[MAXN];</span><br><span class=\"line\"><span class=\"function\">vi <span class=\"title\">dp</span><span class=\"params\">(MAXN, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> MOD = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> cur, <span class=\"type\">int</span> prev)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : graph[cur]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == prev) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v, cur);</span><br><span class=\"line\">        dp[cur] *= (dp[v] + <span class=\"number\">1</span>);</span><br><span class=\"line\">        dp[cur] %= MOD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        graph[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        dp[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">        graph[u].<span class=\"built_in\">pb</span>(v);</span><br><span class=\"line\">        graph[v].<span class=\"built_in\">pb</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">        ans += dp[i];</span><br><span class=\"line\">        ans %= MOD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1856e1-permutree-easy-version-1800\"><a href=\"https://codeforces.com/contest/1856/problem/E1\">CF 1856E1. PermuTree (easy version) (1800)</a></h2>\n<p>I genuinely do not understand how this problem is 1800…maybe im just really bad at dp.</p>\n<p>Let’s day for a node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> with subtrees size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">{S_1,...,S_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>, and in each subtree we can assign the values as either bigger than the node k or smaller, then our goal is to group them into two groups, such as the product of the size of the two groups are maximum.</p>\n<p>The first claim is we can always get the optimal upperbound with some kind of assignment, I actually do not know how to prove this and I just winged it when I wrote it but if you are interested you can check out the editorial :).</p>\n<p>Now, the problem becomes cutting the set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">{S_1,...,S_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> into two sets, such that the product is maximized. This is actually an NP hard problem, but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sum{S_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> is actually pretty small, so we can tranform it into a subset sum problem.</p>\n<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mo>∑</mo><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">S = \\sum{S_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>, then we can get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>S</mi><mo>−</mo><mi>j</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">max((S - j) \\cdot j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)</span></span></span></span> as the answer if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> is a possible subset sum.</p>\n<p>It should be pretty easy to write an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> solution for subset sum, so just do it for each node and yay!</p>\n<p>Theres one small problem… doing subset sum is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, and actually wouldn’t <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sum{S_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> become <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>? even if it doesn’t, we need to do it for each node, then wouldn’t it become <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>?</p>\n<p>The answer is actually no (This is why I originally got stuck because I also though it at least has to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>)! Refer to #7 of this <a href=\"https://codeforces.com/blog/entry/100910\">blog</a>, really interesting property to think about tree dps!</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> MAXN = <span class=\"number\">5005</span>;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; graph[MAXN];</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">sz</span><span class=\"params\">(MAXN, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> cur, <span class=\"type\">int</span> pre)</span> </span>&#123;</span><br><span class=\"line\">    vi vec;</span><br><span class=\"line\">    sz[cur] += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(graph[cur].<span class=\"built_in\">size</span>() == <span class=\"number\">1</span> &amp;&amp; cur != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : graph[cur]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == pre) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v, cur);</span><br><span class=\"line\">        sz[cur] += sz[v];</span><br><span class=\"line\">        vec.<span class=\"built_in\">pb</span>(sz[v]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = sz[cur] - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(sum + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : vec) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = sum; j - i &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">            dp[j] |= dp[j - i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= sum; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dp[i]) mx = <span class=\"built_in\">max</span>(mx, i * (sum - i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans += mx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u;</span><br><span class=\"line\">        cin &gt;&gt; u;</span><br><span class=\"line\">        graph[u].<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">        graph[i].<span class=\"built_in\">pb</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//for(int i = 1; i &lt;= n; i++) debug(graph[i]);</span></span><br><span class=\"line\">    <span class=\"comment\">// get subtree size </span></span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1856e2-permutree-hard-version-2700\"><a href=\"https://codeforces.com/contest/1856/problem/E2\">CF 1856E2. PermuTree (hard version) (2700)</a></h2>\n<p>Note: I was not able to solve this problem even following the editorial, the time limit is very strict but I feel like still including this problem and mentioning the techniques use for this problem.</p>\n<p>The are two main optimizations for this problem: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msqrt><mi>n</mi></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\sqrt{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.05028em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> subset sum trick and using bitsets to optimize the dp by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>1</mn><mn>64</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{64}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">6</span><span class=\"mord mtight\">4</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>. Very tricky stuff :)</p>\n<h2 id=\"cf-1914g1-light-bulbs-easy-version-2100\"><a href=\"https://codeforces.com/contest/1914/problem/G1\">CF 1914G1. Light Bulbs (Easy Version) (2100)</a></h2>\n<p>The editorial uses XOR hashing, but I feel like my alternative solution using graph theory is way more intuitive.</p>\n<p>We can transform the whole problem as a graph theory problem. Let the bulbs be nodes, and we will add a directed edge <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> if the bulb <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> is between the two bulb <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, which basically means if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> is lighted, we can light up color <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> by the second operation.</p>\n<p>It’s not difficult to see the answer for the first problem is the number of components in the graph (It’s easy to see that with this way of construction, we can always find a node in the subgraph that can reach all other nodes), and the answer for the second problem is the product for each subgraph, the number of nodes that can reach every other node in that subgraph.</p>\n<p>The first answer is very easy to obtain, but the second one is slightly tricky. A naive way is to dfs from each node, and if they can reach all other nodes then we include it in. Unfortunately this fails as the complexity could go up to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>Here is where the trick Strongly Connected Component (SCC) comes in! The main use for SCC is we can “shrink” a directed graph into a Directed Acyclic Graph (DAG), and it’s easy to see after shrinking, only the first starting node (the node with in degree 0) can reach all other nodes! So we just need to find how many nodes does this starting node consist.</p>\n<p>Our whole algorithm is as follows:</p>\n<p>Build graph -&gt; Do SCC -&gt; Count the in degree of the nodes for the new DAG -&gt; calculate how many nodes does each new node consist -&gt; Calculate answer.</p>\n<p>I use kosaraju algorithm for SCC, because im too lazy to learn tarjan TMT.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> MAXN = <span class=\"number\">1005</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\">vi g[MAXN];</span><br><span class=\"line\">vi g2[MAXN];</span><br><span class=\"line\"><span class=\"function\">vi <span class=\"title\">scc</span><span class=\"params\">(MAXN, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">vi <span class=\"title\">sccsz</span><span class=\"params\">(MAXN, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"type\">bool</span> visited[MAXN];</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">used</span><span class=\"params\">(MAXN, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">vi v;</span><br><span class=\"line\"><span class=\"type\">int</span> sccCnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">indeg</span><span class=\"params\">(MAXN, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        g[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        g2[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        scc[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        used[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        visited[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        indeg[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        sccsz[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sccCnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    s.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    v.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    visited[u] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> v : g[u])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!visited[v]) <span class=\"built_in\">dfs1</span>(v);</span><br><span class=\"line\">      s.<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">      scc[u] = sccCnt;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> v : g2[u]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!scc[v]) <span class=\"built_in\">dfs2</span>(v);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span> * n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> num;</span><br><span class=\"line\">        cin &gt;&gt; num;</span><br><span class=\"line\">        v.<span class=\"built_in\">pb</span>(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// build graph</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span> * n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(used[v[i]]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        used[v[i]] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; <span class=\"number\">2</span> * n &amp;&amp; v[j] != v[i]; j++) &#123;</span><br><span class=\"line\">            g[v[i]].<span class=\"built_in\">push_back</span>(v[j]);</span><br><span class=\"line\">            g2[v[j]].<span class=\"built_in\">push_back</span>(v[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// do SCC</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!visited[i]) <span class=\"built_in\">dfs1</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(scc[s[i]] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            sccCnt += <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">dfs2</span>(s[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// count indeg</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j : g[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(scc[i] != scc[j]) indeg[scc[j]] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans1 = <span class=\"number\">0</span>, ans2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        sccsz[scc[i]] += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= sccCnt; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(indeg[i] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ans1 += <span class=\"number\">1</span>;</span><br><span class=\"line\">            ans2 *= (sccsz[i] * <span class=\"number\">2</span>);</span><br><span class=\"line\">            ans2 %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans1 &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; ans2 &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1914g2-light-bulbs-hard-version-2300\"><a href=\"https://codeforces.com/contest/1914/problem/G2\">CF 1914G2. Light Bulbs (Hard Version) (2300)</a></h2>\n<p>Our solution for easy version was bounded by the graph building process which was <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, but there is actually a way to optimize the graph to only <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">2n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span></span></span></span> edges!</p>\n<p>I did not really understand how this optimization works, but I’ll still include it here and maybe try understanding it some day.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// build graph</span></span><br><span class=\"line\">deque&lt;<span class=\"type\">int</span>&gt; dq;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span> * n; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dq.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">        g[dq.<span class=\"built_in\">back</span>()].<span class=\"built_in\">push_back</span>(v[i]);</span><br><span class=\"line\">        g2[v[i]].<span class=\"built_in\">push_back</span>(dq.<span class=\"built_in\">back</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(used[v[i]] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        used[v[i]] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        dq.<span class=\"built_in\">push_back</span>(v[i]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        used[v[i]] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(dq.<span class=\"built_in\">size</span>() &amp;&amp; used[dq.<span class=\"built_in\">back</span>()] == <span class=\"number\">2</span>) dq.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>Afterwards: Chicago really has some good food! Although serious note, I really need to get myself back on the track after this spring break, I know I can do it, fighting! And in terms of CF, I think I’ll start doing more 2000~2200 problems, and after that I’ll start doing contests again.</p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>Hey guys, life has been pretty busy lately and tough so I haven’t updated in a while, so I decided to write a short blog about some CM+ (&gt;=1900) problems I solved in CF lately. The difficulty will we roughly sorted by how hard I feel it is.</p>\n<h2 id=\"cf-1923d-slimes-1800\"><a href=\"https://codeforces.com/contest/1923/problem/D\">CF 1923D. Slimes (1800)</a></h2>\n<p>I know this question is only 1800, but I feel like it deserves at least 1900.</p>\n<p>The high level idea for this problem is to find how many slimes we need to accumulate from the left/right to eat this slime. Formally, for each index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, find the maximum <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi><mo>&lt;</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">j &lt; i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>+</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[j] + ... + a[i - 1] &gt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>, and the maximum <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>&gt;</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">k &gt; i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>+</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[i + 1] + ... + a[k] &gt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>, then the answer for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>min</mtext><mo stretchy=\"false\">(</mo><mi>k</mi><mo>−</mo><mi>i</mi><mo separator=\"true\">,</mo><mi>i</mi><mo>−</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\text{min}(k - i, i - j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">min</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)</span></span></span></span>. It’s easy to see we can use prefix sum and binary search to obtain <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> per index.</p>\n<p>The tricky part about this problem is dealing with duplicate values in the same row, as they technically cannot eat each other, and it cause alot of problems while implementing.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vi <span class=\"title\">v</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) cin &gt;&gt; v[i];</span><br><span class=\"line\">    <span class=\"type\">int</span> curnum = v[<span class=\"number\">1</span>], k = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> val[n + <span class=\"number\">1</span>][<span class=\"number\">2</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= <span class=\"number\">1</span>; j++) &#123;</span><br><span class=\"line\">            val[i][j] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> t = <span class=\"number\">0</span>; t &lt;= <span class=\"number\">1</span>; t++) &#123;</span><br><span class=\"line\">        <span class=\"function\">vi <span class=\"title\">pre</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            pre[i] = pre[i - <span class=\"number\">1</span>] + v[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//debug(pre);</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l = <span class=\"number\">0</span>, r = i - k - <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!(r &lt; l || pre[i - <span class=\"number\">1</span>] - pre[l] &lt;= v[i])) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(r - l &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                    <span class=\"type\">int</span> m = (r + l) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(pre[i - <span class=\"number\">1</span>] - pre[m] &gt; v[i]) l = m;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> r = m - <span class=\"number\">1</span>; </span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(pre[i - <span class=\"number\">1</span>] - pre[r] &gt; v[i]) val[i][t] = i - (r + <span class=\"number\">1</span>);</span><br><span class=\"line\">                <span class=\"keyword\">else</span> val[i][t] = i - (l + <span class=\"number\">1</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v[i - <span class=\"number\">1</span>] &gt; v[i]) val[i][t] = <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v[i] != curnum) &#123;</span><br><span class=\"line\">                k = <span class=\"number\">1</span>;</span><br><span class=\"line\">                curnum = v[i];</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                k += <span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">reverse</span>(v.<span class=\"built_in\">begin</span>() + <span class=\"number\">1</span>, v.<span class=\"built_in\">end</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(val[i][<span class=\"number\">0</span>] == <span class=\"number\">-1</span> &amp;&amp; val[n - i + <span class=\"number\">1</span>][<span class=\"number\">1</span>] == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(val[i][<span class=\"number\">0</span>] == <span class=\"number\">-1</span> || val[n - i + <span class=\"number\">1</span>][<span class=\"number\">1</span>] == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"built_in\">max</span>(val[i][<span class=\"number\">0</span>], val[n - i + <span class=\"number\">1</span>][<span class=\"number\">1</span>]) &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"built_in\">min</span>(val[i][<span class=\"number\">0</span>], val[n - i + <span class=\"number\">1</span>][<span class=\"number\">1</span>]) &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1133f2-spanning-tree-with-one-fixed-degree-1900\"><a href=\"https://codeforces.com/contest/1923/problem/D\">CF 1133F2. Spanning Tree with One Fixed Degree (1900)</a></h2>\n<p>This problem honestly does not deserve 1900, I solve it in like 15 minutes max.</p>\n<p>If the number of edges on the node 1 is less then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span>, then the answer is clearly no. Else, we want to first find “crutial edges”, which are edges connected to the node 1 that must be connected in order for the whole graph to be connected.</p>\n<p>We can find these edges by first doing our process of building a spanning tree while skipping all edges that connects to 1. After that it’s easy to find edges that we must form to connect the whole graph.</p>\n<p>Let’s denote the number of crutial edges as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>, and the total edges connecting node 1 as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span>, then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>&lt;</mo><mo>=</mo><mi>D</mi><mo>&lt;</mo><mo>=</mo><mi>K</mi></mrow><annotation encoding=\"application/x-tex\">k &lt;= D &lt;= K</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">K</span></span></span></span> clearly must hold.</p>\n<p>Now, how do we actually construct the tree? A easy way is to first connect the crutial edges, then add edges connecting node 1 to get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> edges, and lastly connect random edges to obtain a spanning tree, it should be obvious that this guarantees a spanning tree with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>D</mi></mrow><annotation encoding=\"application/x-tex\">D</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">D</span></span></span></span> edges connecting to node 1.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> dsu[MAXN];</span><br><span class=\"line\"><span class=\"type\">int</span> rk[MAXN];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dsu[x] == x ? x : dsu[x] = <span class=\"built_in\">find</span>(dsu[x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> pa = <span class=\"built_in\">find</span>(x);</span><br><span class=\"line\">    <span class=\"type\">int</span> pb = <span class=\"built_in\">find</span>(y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pa != pb) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(rk[pa] &lt; rk[pb]) <span class=\"built_in\">swap</span>(pa, pb); <span class=\"comment\">// pa &gt; pb</span></span><br><span class=\"line\">        dsu[pb] = pa;</span><br><span class=\"line\">        rk[pa] += rk[pb];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        dsu[i] = i;</span><br><span class=\"line\">        rk[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, d;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; d;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> total = <span class=\"number\">0</span>;</span><br><span class=\"line\">    vector&lt;pii&gt; v;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a, b;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a == <span class=\"number\">1</span> || b == <span class=\"number\">1</span>) total += <span class=\"number\">1</span>;</span><br><span class=\"line\">        v.<span class=\"built_in\">pb</span>(&#123;a, b&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [a, b] : v) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a == <span class=\"number\">1</span> || b == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">modify</span>(a, b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">usedhead</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"literal\">false</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> need = <span class=\"number\">0</span>;</span><br><span class=\"line\">    vector&lt;pii&gt; v2;</span><br><span class=\"line\">    vector&lt;pii&gt; v3;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [a, b] : v) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(usedhead[<span class=\"built_in\">find</span>(b)] == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">                need += <span class=\"number\">1</span>;</span><br><span class=\"line\">                usedhead[<span class=\"built_in\">find</span>(b)] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                v2.<span class=\"built_in\">pb</span>(&#123;a, b&#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                v3.<span class=\"built_in\">pb</span>(&#123;a, b&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(b == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(usedhead[<span class=\"built_in\">find</span>(a)] == <span class=\"literal\">false</span>) &#123;</span><br><span class=\"line\">                need += <span class=\"number\">1</span>;</span><br><span class=\"line\">                usedhead[<span class=\"built_in\">find</span>(a)] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">                v2.<span class=\"built_in\">pb</span>(&#123;a, b&#125;);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                v3.<span class=\"built_in\">pb</span>(&#123;a, b&#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(need &gt; d || total &lt; d) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>(n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [a, b] : v2) &#123;</span><br><span class=\"line\">        cout &lt;&lt; a &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"built_in\">modify</span>(a, b);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; d - need; i++) &#123;</span><br><span class=\"line\">        cout &lt;&lt; v3[i].first &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; v3[i].second &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"built_in\">modify</span>(v3[i].first, v3[i].second);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [a, b] : v) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a == <span class=\"number\">1</span> || b == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">find</span>(a) != <span class=\"built_in\">find</span>(b)) &#123;</span><br><span class=\"line\">            cout &lt;&lt; a &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; b &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"built_in\">modify</span>(a, b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1141g-privatization-of-roads-in-treeland-1900\"><a href=\"https://codeforces.com/contest/1141/problem/G\">CF 1141G. Privatization of Roads in Treeland (1900)</a></h2>\n<p>Another problem I don’t feel like it’s 1900.</p>\n<p>Let’s say we use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">k&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> colors, then by the pigeonhole principle, nodes that have more than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">k&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> edges connected would clearly become a “not good” node.</p>\n<p>It’s not difficult to se that we can always color the tree with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">k&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> colors, and only nodes that have more than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">k&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> edges would be a “not good” node. Consider this strategy of coloring: if a node has more than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">k&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> edges, then we color all of them as the same color, and if the node doesn’t have more than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">k&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> edges, we can clearly color them with all distinct colors.</p>\n<p>We can find the number of nodes that have more than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">k&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span> edges connected by doing a simple prefix sum.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\">vector&lt;pii&gt; graph[MAXN];</span><br><span class=\"line\"><span class=\"function\">vi <span class=\"title\">deg</span><span class=\"params\">(MAXN, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">vi <span class=\"title\">color</span><span class=\"params\">(MAXN, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"type\">int</span> root = <span class=\"number\">-1</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> colnum = MAXN;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> cur, <span class=\"type\">int</span> pre)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(graph[cur].<span class=\"built_in\">size</span>() == <span class=\"number\">1</span>) root = cur;</span><br><span class=\"line\">    deg[graph[cur].<span class=\"built_in\">size</span>()] += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, idx] : graph[cur]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == pre) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v, cur);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> cur, <span class=\"type\">int</span> pre, <span class=\"type\">int</span> precol)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(graph[cur].<span class=\"built_in\">size</span>() &lt;= colnum) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> c = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, idx] : graph[cur]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v == pre) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(c == precol) c++;</span><br><span class=\"line\">            color[idx] = c;</span><br><span class=\"line\">            c++;</span><br><span class=\"line\">            <span class=\"built_in\">dfs2</span>(v, cur, color[idx]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [v, idx] : graph[cur]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v == pre) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            color[idx] = precol;</span><br><span class=\"line\">            <span class=\"built_in\">dfs2</span>(v, cur, color[idx]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n + <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        graph[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        deg[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        color[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    colnum = MAXN;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a, b;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">        graph[a].<span class=\"built_in\">pb</span>(&#123;b, i&#125;);</span><br><span class=\"line\">        graph[b].<span class=\"built_in\">pb</span>(&#123;a, i&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n; i &gt;= <span class=\"number\">1</span>; i--) &#123;</span><br><span class=\"line\">        deg[i] += deg[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">        colnum = i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(deg[i] &gt; k) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(root, <span class=\"number\">-1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    cout &lt;&lt; colnum &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= n - <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">        cout &lt;&lt; color[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1922d-berserk-monsters-1900\"><a href=\"https://codeforces.com/contest/1922/problem/D\">CF 1922D. Berserk Monsters (1900)</a></h2>\n<p>A not so difficult simulation problem.</p>\n<p>The trick here is to find a efficient way to simulate this process. Notice that only when a monster gets killed, the two monster beside it would have a chance to get killed in the next round, so there’s actually not alot of monsters we need to consider for each round.</p>\n<p>Note: My implementation is extremely convoluted and lackluster, refer to the editorial for a better implementation.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set&lt;<span class=\"type\">int</span>&gt; s, used;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; atk;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; def;</span><br><span class=\"line\">queue&lt;<span class=\"type\">int</span>&gt; q1, q2, q3;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    s.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    atk.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    def.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q1.<span class=\"built_in\">size</span>()) q1.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q2.<span class=\"built_in\">size</span>()) q2.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q3.<span class=\"built_in\">size</span>()) q3.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> tmp;</span><br><span class=\"line\">        cin &gt;&gt; tmp;</span><br><span class=\"line\">        atk.<span class=\"built_in\">pb</span>(tmp);</span><br><span class=\"line\">        s.<span class=\"built_in\">insert</span>(i);</span><br><span class=\"line\">        q1.<span class=\"built_in\">push</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> tmp;</span><br><span class=\"line\">        cin &gt;&gt; tmp;</span><br><span class=\"line\">        def.<span class=\"built_in\">pb</span>(tmp);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n--) &#123;</span><br><span class=\"line\">        used.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q1.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> fr = q1.<span class=\"built_in\">front</span>();</span><br><span class=\"line\">            q1.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">            queue&lt;<span class=\"type\">int</span>&gt; q;</span><br><span class=\"line\">            <span class=\"keyword\">auto</span> it = s.<span class=\"built_in\">find</span>(fr);</span><br><span class=\"line\">            <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(it != s.<span class=\"built_in\">begin</span>()) &#123;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(*(<span class=\"built_in\">prev</span>(it, <span class=\"number\">1</span>)));</span><br><span class=\"line\">                sum += atk[*(<span class=\"built_in\">prev</span>(it, <span class=\"number\">1</span>))];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">next</span>(it, <span class=\"number\">1</span>) != s.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                q.<span class=\"built_in\">push</span>(*(<span class=\"built_in\">next</span>(it, <span class=\"number\">1</span>)));</span><br><span class=\"line\">                sum += atk[*(<span class=\"built_in\">next</span>(it, <span class=\"number\">1</span>))];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sum &gt; def[*it]) &#123;</span><br><span class=\"line\">                q3.<span class=\"built_in\">push</span>(*it);</span><br><span class=\"line\">                <span class=\"keyword\">while</span>(q.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">                    q2.<span class=\"built_in\">push</span>(q.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">                    q.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; q3.<span class=\"built_in\">size</span>() &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        <span class=\"comment\">//debug(q3);</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q3.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">            s.<span class=\"built_in\">erase</span>(q3.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">            q3.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(q2.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s.<span class=\"built_in\">find</span>(q2.<span class=\"built_in\">front</span>()) == s.<span class=\"built_in\">end</span>() || used.<span class=\"built_in\">find</span>(q2.<span class=\"built_in\">front</span>()) != used.<span class=\"built_in\">end</span>()) &#123;</span><br><span class=\"line\">                q2.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            used.<span class=\"built_in\">insert</span>(q2.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">            q1.<span class=\"built_in\">push</span>(q2.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">            q2.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1168b-good-triple-1900\"><a href=\"https://codeforces.com/contest/1168/problem/B\">CF 1168B. Good Triple (1900)</a></h2>\n<p>To solve this, one needs to observe that the length of a substring without the required condition is actually at most 8.</p>\n<p>After knowing this fact, we can bruteforce finding all bad substrings and calculate the answer with it.</p>\n<p>For some reason my implementation kept failing until I completely rewrote it and it suddenly passed.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">string s;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">isgood</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l2 = l; l2 &lt;= r; l2 ++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">5</span> &amp;&amp; l2 + <span class=\"number\">2</span> * i &lt;= r; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(s[l2] == s[l2 + i] &amp;&amp; s[l2 + i] == s[l2 + (<span class=\"number\">2</span> * i)]) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125; </span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> l = <span class=\"number\">0</span>; l &lt; (<span class=\"type\">int</span>)(s.<span class=\"built_in\">size</span>()) - <span class=\"number\">2</span>; l++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mx = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> r = l + <span class=\"number\">1</span>; r &lt; (<span class=\"type\">int</span>)s.<span class=\"built_in\">size</span>() &amp;&amp; r &lt; l + <span class=\"number\">10</span>; r++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">isgood</span>(l, r)) &#123;</span><br><span class=\"line\">                mx = r;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans += s.<span class=\"built_in\">size</span>() - (mx + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1729f-kirei-and-the-linear-function-1900\"><a href=\"https://codeforces.com/contest/1729/problem/F\">CF 1729F. Kirei and the Linear Function (1900)</a></h2>\n<p>Interesting problem, but has some points that made it a clear giveaway.</p>\n<p>First, notice in the queries that they want <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo stretchy=\"false\">(</mo><msub><mi>l</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>r</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">v(l_i, r_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, so we must need some way to calculate <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo stretchy=\"false\">(</mo><msub><mi>l</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>r</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">v(l_i, r_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> time.</p>\n<p>The second giveaway is the specific mod number 9. If you remember from middle school, the way to check if a number can be divided by 9 is to check if the sum of it’s digits can also be divided by 9.</p>\n<p>Using these two hints, we can easily find out the answer has to do with prefix sums!</p>\n<p>We can preprocess a prefix sum and preprocess the smallest (and second smallest) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>L</mi></mrow><annotation encoding=\"application/x-tex\">L</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">L</span></span></span></span> for each number from 0 to 9.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"type\">int</span> w, m;</span><br><span class=\"line\">    cin &gt;&gt; w &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"function\">vi <span class=\"title\">pre</span><span class=\"params\">(s.size() + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    pre[<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= s.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        pre[i] = pre[i - <span class=\"number\">1</span>] + (s[i - <span class=\"number\">1</span>] - <span class=\"string\">&#x27;0&#x27;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> smallest[<span class=\"number\">9</span>];</span><br><span class=\"line\">    <span class=\"type\">int</span> ssmallest[<span class=\"number\">9</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">        smallest[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">        ssmallest[i] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i + w - <span class=\"number\">1</span> &lt;= s.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> num = (pre[i + w - <span class=\"number\">1</span>] - pre[i - <span class=\"number\">1</span>]) % <span class=\"number\">9</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(smallest[num] == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            smallest[num] = i;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(ssmallest[num] == <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">            ssmallest[num] = i;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(m--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l, r, k;</span><br><span class=\"line\">        cin &gt;&gt; l &gt;&gt; r &gt;&gt; k;</span><br><span class=\"line\">        <span class=\"type\">int</span> num = (pre[r] - pre[l - <span class=\"number\">1</span>]) % <span class=\"number\">9</span>;</span><br><span class=\"line\">        pii minans = &#123;<span class=\"number\">1e9</span>, <span class=\"number\">1e9</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= <span class=\"number\">8</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt;= <span class=\"number\">8</span>; j++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(((i * num + j) % <span class=\"number\">9</span>) == k) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(i != j) &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(smallest[i] != <span class=\"number\">-1</span> &amp;&amp; smallest[j] != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                            minans = <span class=\"built_in\">min</span>(minans, &#123;smallest[i], smallest[j]&#125;);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(smallest[i] != <span class=\"number\">-1</span> &amp;&amp; ssmallest[j] != <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">                            minans = <span class=\"built_in\">min</span>(minans, &#123;smallest[i], ssmallest[j]&#125;);</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(minans.first == <span class=\"number\">1e9</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cout &lt;&lt; minans.first &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; minans.second &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> preprocess, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span> per query</p>\n<h2 id=\"cf-1791g2-teleporters-hard-version-1900\"><a href=\"https://codeforces.com/contest/1791/problem/G2\">CF 1791G2. Teleporters (Hard Version) (1900)</a></h2>\n<p>Let’s define the cost of a teleporter as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mi>i</mi><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo>−</mo><mi>i</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">min(a_i + i, a_i + n + 1 - i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">)</span></span></span></span>, which is just the minimum cost of walking to it from the front or to the back. It’s clear that after the initial teleporter, we will choose the teleporters based from lowest cost to highest cost.</p>\n<p>The problem now is how to determine the first teleporter we want to use? We can iterate using each teleporter as the first one, and using binary search + prefix sum to determine how many teleporters we can use after the first one. The problem that encounters with this is when you binary search, you might include the one where you already used as the initial teleporter, so you would need to keep track and deduct the value when your binary search includes that teleporter.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vi <span class=\"title\">v</span><span class=\"params\">(<span class=\"number\">2e5</span> + <span class=\"number\">5</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">vector&lt;pii&gt; order;</span><br><span class=\"line\">vi prefix;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, c;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; c;</span><br><span class=\"line\">    order.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    prefix.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; v[i];</span><br><span class=\"line\">        order.<span class=\"built_in\">pb</span>(&#123;<span class=\"built_in\">min</span>(v[i] + i, v[i] + (n - i + <span class=\"number\">1</span>)), i&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(order));</span><br><span class=\"line\">    prefix.<span class=\"built_in\">pb</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        prefix.<span class=\"built_in\">pb</span>(prefix.<span class=\"built_in\">back</span>() + order[i].first);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> cst = c - (v[order[i].second] + order[i].second);</span><br><span class=\"line\">        <span class=\"type\">int</span> l = <span class=\"number\">0</span>, r = n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(r - l &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> m = (r + l) / <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"type\">int</span> cmp = prefix[m];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(m &gt;= (i + <span class=\"number\">1</span>)) cmp -= order[i].first;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cst &gt;= cmp) &#123;</span><br><span class=\"line\">                l = m;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                r = m;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> ret = prefix[r];</span><br><span class=\"line\">        <span class=\"type\">int</span> use;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(r &gt;= (i + <span class=\"number\">1</span>)) ret -= order[i].first;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cst &gt;= ret) use = r;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> use = l;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(use &lt; (i + <span class=\"number\">1</span>) &amp;&amp; cst &gt;= <span class=\"number\">0</span>) use += <span class=\"number\">1</span>;</span><br><span class=\"line\">        ans = <span class=\"built_in\">max</span>(ans, use);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1929d-sasha-and-a-walk-in-the-city-1900\"><a href=\"https://codeforces.com/contest/1929/problem/D\">CF 1929D. Sasha and a Walk in the City (1900)</a></h2>\n<p>A really tricky dp problem that stomped me for a good while, but the solution is one of the shortest in this list.</p>\n<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp[u]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span></span></span></span> denote the number of <strong>non-empty</strong> subtrees rooted at node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> such that there is no pair of vertices where a node is the ancestor of the other.</p>\n<p>We can get the transition <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo>∏</mo><mo stretchy=\"false\">(</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><msub><mi>v</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dp[u] = \\prod (dp[v_i] + 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">v_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the children of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>.</p>\n<p>This dp state is essentially picking the combination of subtrees (we add 1 for when we don’t choose an empty set for that subtree). When all of them were empty, it means that only the node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> is dangerous.</p>\n<p>Now to calculate the answer, we need to divide into two parts:</p>\n<p>if there is no pair of vertices where a node is the ancestor of the other, then the answer would be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">dp[1] + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>\n<p>But we can also tolerate exactly 1 pair of vertices where one is the ancestor of the other. Lets say if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> is the ancestor of another vertex, then the number of ways for this to happen is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><msub><mi>v</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\sum dp[v_i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>v</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">v_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the children of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>.</p>\n<p>We then consider the case for every node, and the answer becomes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mn>2</mn><mo stretchy=\"false\">]</mo><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>+</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>n</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mn>1</mn><mo>+</mo><mo>∑</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">(dp[1] + 1) + dp[2] + ... + dp[n] = 1 + \\sum dp[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> MAXN = <span class=\"number\">3e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\">vi graph[MAXN];</span><br><span class=\"line\"><span class=\"function\">vi <span class=\"title\">dp</span><span class=\"params\">(MAXN, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> MOD = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> cur, <span class=\"type\">int</span> prev)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : graph[cur]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == prev) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v, cur);</span><br><span class=\"line\">        dp[cur] *= (dp[v] + <span class=\"number\">1</span>);</span><br><span class=\"line\">        dp[cur] %= MOD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        graph[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        dp[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">        graph[u].<span class=\"built_in\">pb</span>(v);</span><br><span class=\"line\">        graph[v].<span class=\"built_in\">pb</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++)&#123;</span><br><span class=\"line\">        ans += dp[i];</span><br><span class=\"line\">        ans %= MOD;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1856e1-permutree-easy-version-1800\"><a href=\"https://codeforces.com/contest/1856/problem/E1\">CF 1856E1. PermuTree (easy version) (1800)</a></h2>\n<p>I genuinely do not understand how this problem is 1800…maybe im just really bad at dp.</p>\n<p>Let’s day for a node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> with subtrees size <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">{S_1,...,S_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>, and in each subtree we can assign the values as either bigger than the node k or smaller, then our goal is to group them into two groups, such as the product of the size of the two groups are maximum.</p>\n<p>The first claim is we can always get the optimal upperbound with some kind of assignment, I actually do not know how to prove this and I just winged it when I wrote it but if you are interested you can check out the editorial :).</p>\n<p>Now, the problem becomes cutting the set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">{S_1,...,S_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8777699999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> into two sets, such that the product is maximized. This is actually an NP hard problem, but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sum{S_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> is actually pretty small, so we can tranform it into a subset sum problem.</p>\n<p>Let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi><mo>=</mo><mo>∑</mo><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">S = \\sum{S_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>, then we can get <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>a</mi><mi>x</mi><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>S</mi><mo>−</mo><mi>j</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mi>j</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">max((S - j) \\cdot j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">x</span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">)</span></span></span></span> as the answer if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> is a possible subset sum.</p>\n<p>It should be pretty easy to write an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> solution for subset sum, so just do it for each node and yay!</p>\n<p>Theres one small problem… doing subset sum is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, and actually wouldn’t <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>∑</mo><msub><mi>S</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\sum{S_i}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> become <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>? even if it doesn’t, we need to do it for each node, then wouldn’t it become <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>?</p>\n<p>The answer is actually no (This is why I originally got stuck because I also though it at least has to be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>)! Refer to #7 of this <a href=\"https://codeforces.com/blog/entry/100910\">blog</a>, really interesting property to think about tree dps!</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> MAXN = <span class=\"number\">5005</span>;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; graph[MAXN];</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">sz</span><span class=\"params\">(MAXN, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> cur, <span class=\"type\">int</span> pre)</span> </span>&#123;</span><br><span class=\"line\">    vi vec;</span><br><span class=\"line\">    sz[cur] += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(graph[cur].<span class=\"built_in\">size</span>() == <span class=\"number\">1</span> &amp;&amp; cur != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : graph[cur]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v == pre) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(v, cur);</span><br><span class=\"line\">        sz[cur] += sz[v];</span><br><span class=\"line\">        vec.<span class=\"built_in\">pb</span>(sz[v]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = sz[cur] - <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(sum + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    dp[<span class=\"number\">0</span>] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : vec) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = sum; j - i &gt;= <span class=\"number\">0</span>; j--) &#123;</span><br><span class=\"line\">            dp[j] |= dp[j - i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt;= sum; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dp[i]) mx = <span class=\"built_in\">max</span>(mx, i * (sum - i));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ans += mx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u;</span><br><span class=\"line\">        cin &gt;&gt; u;</span><br><span class=\"line\">        graph[u].<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">        graph[i].<span class=\"built_in\">pb</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//for(int i = 1; i &lt;= n; i++) debug(graph[i]);</span></span><br><span class=\"line\">    <span class=\"comment\">// get subtree size </span></span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1856e2-permutree-hard-version-2700\"><a href=\"https://codeforces.com/contest/1856/problem/E2\">CF 1856E2. PermuTree (hard version) (2700)</a></h2>\n<p>Note: I was not able to solve this problem even following the editorial, the time limit is very strict but I feel like still including this problem and mentioning the techniques use for this problem.</p>\n<p>The are two main optimizations for this problem: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msqrt><mi>n</mi></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n\\sqrt{n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.05028em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> subset sum trick and using bitsets to optimize the dp by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mfrac><mn>1</mn><mn>64</mn></mfrac></mrow><annotation encoding=\"application/x-tex\">\\frac{1}{64}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.190108em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">6</span><span class=\"mord mtight\">4</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span>. Very tricky stuff :)</p>\n<h2 id=\"cf-1914g1-light-bulbs-easy-version-2100\"><a href=\"https://codeforces.com/contest/1914/problem/G1\">CF 1914G1. Light Bulbs (Easy Version) (2100)</a></h2>\n<p>The editorial uses XOR hashing, but I feel like my alternative solution using graph theory is way more intuitive.</p>\n<p>We can transform the whole problem as a graph theory problem. Let the bulbs be nodes, and we will add a directed edge <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> if the bulb <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> is between the two bulb <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, which basically means if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> is lighted, we can light up color <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> by the second operation.</p>\n<p>It’s not difficult to see the answer for the first problem is the number of components in the graph (It’s easy to see that with this way of construction, we can always find a node in the subgraph that can reach all other nodes), and the answer for the second problem is the product for each subgraph, the number of nodes that can reach every other node in that subgraph.</p>\n<p>The first answer is very easy to obtain, but the second one is slightly tricky. A naive way is to dfs from each node, and if they can reach all other nodes then we include it in. Unfortunately this fails as the complexity could go up to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>Here is where the trick Strongly Connected Component (SCC) comes in! The main use for SCC is we can “shrink” a directed graph into a Directed Acyclic Graph (DAG), and it’s easy to see after shrinking, only the first starting node (the node with in degree 0) can reach all other nodes! So we just need to find how many nodes does this starting node consist.</p>\n<p>Our whole algorithm is as follows:</p>\n<p>Build graph -&gt; Do SCC -&gt; Count the in degree of the nodes for the new DAG -&gt; calculate how many nodes does each new node consist -&gt; Calculate answer.</p>\n<p>I use kosaraju algorithm for SCC, because im too lazy to learn tarjan TMT.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> MAXN = <span class=\"number\">1005</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\">vi g[MAXN];</span><br><span class=\"line\">vi g2[MAXN];</span><br><span class=\"line\"><span class=\"function\">vi <span class=\"title\">scc</span><span class=\"params\">(MAXN, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\">vi <span class=\"title\">sccsz</span><span class=\"params\">(MAXN, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\"><span class=\"type\">bool</span> visited[MAXN];</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">bool</span>&gt; <span class=\"title\">used</span><span class=\"params\">(MAXN, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">vi v;</span><br><span class=\"line\"><span class=\"type\">int</span> sccCnt = <span class=\"number\">0</span>;</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">indeg</span><span class=\"params\">(MAXN, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        g[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        g2[i].<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">        scc[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        used[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        visited[i] = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        indeg[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        sccsz[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sccCnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    s.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    v.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs1</span><span class=\"params\">(<span class=\"type\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">    visited[u] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> v : g[u])</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!visited[v]) <span class=\"built_in\">dfs1</span>(v);</span><br><span class=\"line\">      s.<span class=\"built_in\">push_back</span>(u);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs2</span><span class=\"params\">(<span class=\"type\">int</span> u)</span> </span>&#123;</span><br><span class=\"line\">      scc[u] = sccCnt;</span><br><span class=\"line\">      <span class=\"keyword\">for</span> (<span class=\"type\">int</span> v : g2[u]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!scc[v]) <span class=\"built_in\">dfs2</span>(v);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>();</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span> * n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> num;</span><br><span class=\"line\">        cin &gt;&gt; num;</span><br><span class=\"line\">        v.<span class=\"built_in\">pb</span>(num);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// build graph</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span> * n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(used[v[i]]) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        used[v[i]] = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = i + <span class=\"number\">1</span>; j &lt; <span class=\"number\">2</span> * n &amp;&amp; v[j] != v[i]; j++) &#123;</span><br><span class=\"line\">            g[v[i]].<span class=\"built_in\">push_back</span>(v[j]);</span><br><span class=\"line\">            g2[v[j]].<span class=\"built_in\">push_back</span>(v[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// do SCC</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(!visited[i]) <span class=\"built_in\">dfs1</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(scc[s[i]] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            sccCnt += <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">dfs2</span>(s[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// count indeg</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> j : g[i]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(scc[i] != scc[j]) indeg[scc[j]] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans1 = <span class=\"number\">0</span>, ans2 = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        sccsz[scc[i]] += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= sccCnt; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(indeg[i] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ans1 += <span class=\"number\">1</span>;</span><br><span class=\"line\">            ans2 *= (sccsz[i] * <span class=\"number\">2</span>);</span><br><span class=\"line\">            ans2 %= <span class=\"number\">998244353</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans1 &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; ans2 &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1914g2-light-bulbs-hard-version-2300\"><a href=\"https://codeforces.com/contest/1914/problem/G2\">CF 1914G2. Light Bulbs (Hard Version) (2300)</a></h2>\n<p>Our solution for easy version was bounded by the graph building process which was <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>, but there is actually a way to optimize the graph to only <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">2n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span></span></span></span> edges!</p>\n<p>I did not really understand how this optimization works, but I’ll still include it here and maybe try understanding it some day.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// build graph</span></span><br><span class=\"line\">deque&lt;<span class=\"type\">int</span>&gt; dq;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span> * n; i++) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(dq.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">        g[dq.<span class=\"built_in\">back</span>()].<span class=\"built_in\">push_back</span>(v[i]);</span><br><span class=\"line\">        g2[v[i]].<span class=\"built_in\">push_back</span>(dq.<span class=\"built_in\">back</span>());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(used[v[i]] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        used[v[i]] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        dq.<span class=\"built_in\">push_back</span>(v[i]);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        used[v[i]] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(dq.<span class=\"built_in\">size</span>() &amp;&amp; used[dq.<span class=\"built_in\">back</span>()] == <span class=\"number\">2</span>) dq.<span class=\"built_in\">pop_back</span>();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>Afterwards: Chicago really has some good food! Although serious note, I really need to get myself back on the track after this spring break, I know I can do it, fighting! And in terms of CF, I think I’ll start doing more 2000~2200 problems, and after that I’ll start doing contests again.</p>\n"},{"title":"CF 1904D. Set To Max","date":"2024-01-07T16:27:47.000Z","_content":"Heya~ before talking about this problem, I just wanna say that I didn't insta fail my resolutions yay! I've been doing 5 problems everyday, and grinding very hard on math. I think I should also do some virtuals on top but we can start slowly :D\n\nI want to talk about this problem, because it caused me alot of trouble due to a silly mistake XD, other than that it was a pretty standard problem. \n\n## [CF 1904D. Set To Max (Hard Version)](https://codeforces.com/contest/1904/problem/D2)\n\nThere are two versions of the problem, with the difference being $n \\leq 1e3$ on easy, and $n \\leq 2e5$ on hard.\n\nFirst of all, I imagined the operation as choosing an index $i$ and letting $a[i]$ as the max of a operation, and we can \"extend\" $a[i]$ to left and right.\n\nThe only restriction when we can't keep extending further $a[i]$ is when we are met with a larger $a[j]$, because $a[i] wouldn't be the biggest anymore if the range we chose consists $a[j]$.\n\nSo basically, for an index $i$, we can extend left and right to index $j$ and $k$, where $j < i < k$, $a[j] > a[i]$ and $a[k] > a[i]$.\n\nNow, we wouldn't always want to extend as large as we can, as if theres a index $j$ in it with $b[j] < a[i]$, we would obviously fail making both arrays equal as we can only make it bigger not smaller.\n\nSo now we have two constraint as boundaries:  \n\nOn the left side find $j$, where $j < i$, $a[j] > a[i]$ or $b[j] < a[i]$,\nOn the right side find $k$, where $k > i$, $a[k] > a[i]$ or $b[k] < a[i]$.\n\nAnd for the boundaries we choose the largest $j$ and smallest $k$.\n\nNow we have a boundaries $(j_i, k_i)$ for each index, where we can set $a[j_i]$ to $a[k_i]$ to $a[i]$,and that we are sure that this operation will only make the array closer to what we want.\n\nIts then sufficient to apply all the operations from the smallest $a[i]$ to the biggest and checking if the array is the same. \n\nThe easy version is just manually doing the operations everytime with another for loop, taking $O(n^2)$ time.\n\n```cpp\nvoid solve() {\n    int n;\n    cin >> n;\n    vi a(n), b(n);\n    vector<pii> order;\n    for(int i = 0; i < n; i++) {\n        cin >> a[i];\n        order.pb({a[i], i});\n    }\n    for(auto &i : b) cin >> i;\n    sort(all(order));\n    for(auto [_, idx] : order) {\n        for(int i = idx + 1; i < n; i++) {\n            if(a[i] > a[idx] || a[idx] > b[i]) break;\n            else a[i] = a[idx];\n        }\n \n        for(int i = idx - 1; i >= 0; i--) {\n            if(a[i] > a[idx] || a[idx] > b[i]) break;\n            else a[i] = a[idx];\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        if(a[i] != b[i]) {\n            cout << \"NO\" << endl;\n            return;\n        }\n    }\n    cout << \"YES\" << endl;\n    return;\n}\n```\n\nThe hard version requires us to do all operations quicker than $O(nlogn)$.\n\nLets say that we already have all the boundaries for each index and we need to apply it, then we would need a range set element data structure to help us do this, which lazy tag segment trees can do easily in $O(nlogn)$.\n\nThe problem now becomes finding $(j_i, k_i)$ for all $i$ quickly, which actually can we done with segment trees again!\n\nThere are two cases for each bound, for left bound, either $b[j] < a[i]$ case or $a[j] > a[i]$, and we want to find the biggest one.\n\nI will talk about how to find the max $j$ such that $a[j] > a[i]$, as others are pretty much the same.\n\nFor this, we would want a point set/add range max segment tree, where the index is the value and inside stores the largest index with that value.\n\nWe traverse from left to right, each time we find the max value between $a[i] + 1$ to the max value, this way we can get the biggest index $j$ that $a[j] > a[i]$, and we just set index $i$ to $a[i]$ in the segment tree.\n\nNow just do this four times to find the bound, and do the updates with range set segment tree.\n\n```cpp\nconst int inf = 1e9;\nstruct Node {\n    Node *l = 0, *r = 0;\n    int lo, hi, mset = inf, madd = 0, val = -inf, val2 = inf;\n    Node(int lo,int hi):lo(lo),hi(hi){} // Large interval of -inf\n    Node(vi& v, int lo, int hi) : lo(lo), hi(hi) {\n        if (lo + 1 < hi) {\n            int mid = lo + (hi - lo)/2;\n            l = new Node(v, lo, mid); r = new Node(v, mid, hi);\n            val = max(l->val, r->val);\n            val2 = min(l->val2, r->val2);\n        }\n        else val = val2 = v[lo];\n    }\n    int query(int L, int R) {\n        if (R <= lo || hi <= L) return -inf;\n        if (L <= lo && hi <= R) return val;\n        push();\n        return max(l->query(L, R), r->query(L, R));\n    }\n    int query2(int L, int R) {\n        if (R <= lo || hi <= L) return inf;\n        if (L <= lo && hi <= R) return val2;\n        push();\n        return min(l->query2(L, R), r->query2(L, R));\n    }\n    void add(int L, int R, int x) {\n        if (R <= lo || hi <= L) return;\n        if (L <= lo && hi <= R) {\n            madd += x;\n            val += x;\n            val2 += x;\n        }\n        else {\n            push(), l->add(L, R, x), r->add(L, R, x);\n            val = max(l->val, r->val);\n            val2 = min(l->val2, r->val2);\n        }\n    }\n    void set(int L, int R, int x) { \n        if (R <= lo || hi <= L) return;\n        if (L <= lo && hi <= R) mset = val = val2 = x, madd = 0;\n        else {\n            push(), l->set(L, R, x), r->set(L, R, x);\n            val = max(l->val, r->val);\n            val2 = min(l->val2, r->val2);\n        }\n    }\n    void push() {\n        if (!l) {\n            int mid = lo + (hi - lo)/2;\n            l = new Node(lo, mid); r = new Node(mid, hi);\n        }\n        if (mset != inf)\n            l->set(lo,hi,mset), r->set(lo,hi,mset), mset = inf;\n        else if (madd)\n            l->add(lo,hi,madd), r->add(lo,hi,madd), madd = 0;\n    }\n};\nvector<int> vec(2e5 + 501, inf);\nNode* tr = new Node(vec, 0, vec.size());\nvoid solve() {\n    int n;\n    cin >> n;\n    vi a(n + 1), b(n + 1);\n    vector<pii> order;\n    for(int i = 1; i <= n; i++) {\n        cin >> a[i];\n        order.pb({a[i], i});\n    }\n    sort(all(order));\n    for(int i = 1; i <= n; i++) {\n        cin >> b[i];\n    }\n    tr -> set(0, (int) 2e5 + 500, n + 1);\n    // find smallest j s.t j > i and a[j] > a[i]\n    vector<int> a_right(n + 1);\n    a_right[n] = n + 1;\n    tr -> set(a[n], a[n] + 1, n);\n    for(int i = n - 1; i >= 1; i--) {\n        int q = min(n + 1, tr -> query2(a[i] + 1, 2e5 + 400));\n        a_right[i] = q;\n        tr -> set(a[i], a[i] + 1, i);\n    }\n    tr -> set(0, 2e5 + 500, 0);\n \n    // find largest j s.t j < i and a[j] > a[i]\n    vector<int> a_left(n + 1);\n    a_left[1] = 0;\n    tr -> set(a[1], a[1] + 1, 1);\n    for(int i = 2; i <= n; i++) {\n        int q = max(0ll, tr -> query(a[i] + 1, 2e5 + 400));\n        a_left[i] = q;\n        tr -> set(a[i], a[i] + 1, i);\n    }\n    tr -> set(0, 2e5 + 500, n + 1);\n    // find smallest j s.t j > i and b[j] < a[i]\n    vector<int> b_right(n + 1);\n    b_right[n] = n + 1;\n    tr -> set(b[n], b[n] + 1, n);\n    for(int i = n - 1; i >= 1; i--) {\n        int q = min(n + 1, tr -> query2(0, a[i]));\n        b_right[i] = q;\n        tr -> set(b[i], b[i] + 1, i);\n    }\n    tr -> set(0, 2e5 + 500, 0);\n    // find largest j s.t j < i and b[j] < a[i];\n    vector<int> b_left(n + 1);\n    b_left[1] = 0;\n    tr -> set(b[1], b[1] + 1, 1);\n    for(int i = 2; i <= n; i++) {\n        int q = max(0ll, tr -> query(0, a[i]));\n        b_left[i] = q;\n        tr -> set(b[i], b[i] + 1, i);\n    }\n    tr -> set(0, 2e5 + 500, 0);\n    for(int i = 1; i <= n; i++) {tr -> set(i, i + 1, a[i]);}\n    for(auto [_, i] : order) {\n        int left_bound = max(a_left[i], b_left[i]) + 1;\n        int right_bound = min(a_right[i], b_right[i]);\n        if(left_bound < right_bound) {\n            tr -> set(left_bound, right_bound, a[i]);\n        }\n    }\n    vector<int> ans;\n    for(int i = 1; i <= n; i++) {\n        int num = tr -> query(i, i + 1);\n        ans.pb(num);\n        if(num != b[i]) {\n            cout << \"NO\" << endl;\n            return;\n        }\n    }\n    cout << \"YES\" << endl;\n    return;\n}\n```\n\nTime complexity: $O(nlogn)$\n\nA very stupid thing I did was making the segment tree on every testcase, which obviously TLEs, and another extremely stupid thing I did was this:\n\n![dumb](dumb.png)\n\nI set the segment tree size to $sizeof(vec)$, which give the size of this object, which for vector<int> is 24... I didn't notice this and was wondering why my segment tree is behaving weird for 2 hours...","source":"_posts/CF-1904D-Set-To-Max.md","raw":"---\ntitle: CF 1904D. Set To Max\ndate: 2024-01-07 10:27:47\ntags: [\"CP\"]\n---\nHeya~ before talking about this problem, I just wanna say that I didn't insta fail my resolutions yay! I've been doing 5 problems everyday, and grinding very hard on math. I think I should also do some virtuals on top but we can start slowly :D\n\nI want to talk about this problem, because it caused me alot of trouble due to a silly mistake XD, other than that it was a pretty standard problem. \n\n## [CF 1904D. Set To Max (Hard Version)](https://codeforces.com/contest/1904/problem/D2)\n\nThere are two versions of the problem, with the difference being $n \\leq 1e3$ on easy, and $n \\leq 2e5$ on hard.\n\nFirst of all, I imagined the operation as choosing an index $i$ and letting $a[i]$ as the max of a operation, and we can \"extend\" $a[i]$ to left and right.\n\nThe only restriction when we can't keep extending further $a[i]$ is when we are met with a larger $a[j]$, because $a[i] wouldn't be the biggest anymore if the range we chose consists $a[j]$.\n\nSo basically, for an index $i$, we can extend left and right to index $j$ and $k$, where $j < i < k$, $a[j] > a[i]$ and $a[k] > a[i]$.\n\nNow, we wouldn't always want to extend as large as we can, as if theres a index $j$ in it with $b[j] < a[i]$, we would obviously fail making both arrays equal as we can only make it bigger not smaller.\n\nSo now we have two constraint as boundaries:  \n\nOn the left side find $j$, where $j < i$, $a[j] > a[i]$ or $b[j] < a[i]$,\nOn the right side find $k$, where $k > i$, $a[k] > a[i]$ or $b[k] < a[i]$.\n\nAnd for the boundaries we choose the largest $j$ and smallest $k$.\n\nNow we have a boundaries $(j_i, k_i)$ for each index, where we can set $a[j_i]$ to $a[k_i]$ to $a[i]$,and that we are sure that this operation will only make the array closer to what we want.\n\nIts then sufficient to apply all the operations from the smallest $a[i]$ to the biggest and checking if the array is the same. \n\nThe easy version is just manually doing the operations everytime with another for loop, taking $O(n^2)$ time.\n\n```cpp\nvoid solve() {\n    int n;\n    cin >> n;\n    vi a(n), b(n);\n    vector<pii> order;\n    for(int i = 0; i < n; i++) {\n        cin >> a[i];\n        order.pb({a[i], i});\n    }\n    for(auto &i : b) cin >> i;\n    sort(all(order));\n    for(auto [_, idx] : order) {\n        for(int i = idx + 1; i < n; i++) {\n            if(a[i] > a[idx] || a[idx] > b[i]) break;\n            else a[i] = a[idx];\n        }\n \n        for(int i = idx - 1; i >= 0; i--) {\n            if(a[i] > a[idx] || a[idx] > b[i]) break;\n            else a[i] = a[idx];\n        }\n    }\n    for(int i = 0; i < n; i++) {\n        if(a[i] != b[i]) {\n            cout << \"NO\" << endl;\n            return;\n        }\n    }\n    cout << \"YES\" << endl;\n    return;\n}\n```\n\nThe hard version requires us to do all operations quicker than $O(nlogn)$.\n\nLets say that we already have all the boundaries for each index and we need to apply it, then we would need a range set element data structure to help us do this, which lazy tag segment trees can do easily in $O(nlogn)$.\n\nThe problem now becomes finding $(j_i, k_i)$ for all $i$ quickly, which actually can we done with segment trees again!\n\nThere are two cases for each bound, for left bound, either $b[j] < a[i]$ case or $a[j] > a[i]$, and we want to find the biggest one.\n\nI will talk about how to find the max $j$ such that $a[j] > a[i]$, as others are pretty much the same.\n\nFor this, we would want a point set/add range max segment tree, where the index is the value and inside stores the largest index with that value.\n\nWe traverse from left to right, each time we find the max value between $a[i] + 1$ to the max value, this way we can get the biggest index $j$ that $a[j] > a[i]$, and we just set index $i$ to $a[i]$ in the segment tree.\n\nNow just do this four times to find the bound, and do the updates with range set segment tree.\n\n```cpp\nconst int inf = 1e9;\nstruct Node {\n    Node *l = 0, *r = 0;\n    int lo, hi, mset = inf, madd = 0, val = -inf, val2 = inf;\n    Node(int lo,int hi):lo(lo),hi(hi){} // Large interval of -inf\n    Node(vi& v, int lo, int hi) : lo(lo), hi(hi) {\n        if (lo + 1 < hi) {\n            int mid = lo + (hi - lo)/2;\n            l = new Node(v, lo, mid); r = new Node(v, mid, hi);\n            val = max(l->val, r->val);\n            val2 = min(l->val2, r->val2);\n        }\n        else val = val2 = v[lo];\n    }\n    int query(int L, int R) {\n        if (R <= lo || hi <= L) return -inf;\n        if (L <= lo && hi <= R) return val;\n        push();\n        return max(l->query(L, R), r->query(L, R));\n    }\n    int query2(int L, int R) {\n        if (R <= lo || hi <= L) return inf;\n        if (L <= lo && hi <= R) return val2;\n        push();\n        return min(l->query2(L, R), r->query2(L, R));\n    }\n    void add(int L, int R, int x) {\n        if (R <= lo || hi <= L) return;\n        if (L <= lo && hi <= R) {\n            madd += x;\n            val += x;\n            val2 += x;\n        }\n        else {\n            push(), l->add(L, R, x), r->add(L, R, x);\n            val = max(l->val, r->val);\n            val2 = min(l->val2, r->val2);\n        }\n    }\n    void set(int L, int R, int x) { \n        if (R <= lo || hi <= L) return;\n        if (L <= lo && hi <= R) mset = val = val2 = x, madd = 0;\n        else {\n            push(), l->set(L, R, x), r->set(L, R, x);\n            val = max(l->val, r->val);\n            val2 = min(l->val2, r->val2);\n        }\n    }\n    void push() {\n        if (!l) {\n            int mid = lo + (hi - lo)/2;\n            l = new Node(lo, mid); r = new Node(mid, hi);\n        }\n        if (mset != inf)\n            l->set(lo,hi,mset), r->set(lo,hi,mset), mset = inf;\n        else if (madd)\n            l->add(lo,hi,madd), r->add(lo,hi,madd), madd = 0;\n    }\n};\nvector<int> vec(2e5 + 501, inf);\nNode* tr = new Node(vec, 0, vec.size());\nvoid solve() {\n    int n;\n    cin >> n;\n    vi a(n + 1), b(n + 1);\n    vector<pii> order;\n    for(int i = 1; i <= n; i++) {\n        cin >> a[i];\n        order.pb({a[i], i});\n    }\n    sort(all(order));\n    for(int i = 1; i <= n; i++) {\n        cin >> b[i];\n    }\n    tr -> set(0, (int) 2e5 + 500, n + 1);\n    // find smallest j s.t j > i and a[j] > a[i]\n    vector<int> a_right(n + 1);\n    a_right[n] = n + 1;\n    tr -> set(a[n], a[n] + 1, n);\n    for(int i = n - 1; i >= 1; i--) {\n        int q = min(n + 1, tr -> query2(a[i] + 1, 2e5 + 400));\n        a_right[i] = q;\n        tr -> set(a[i], a[i] + 1, i);\n    }\n    tr -> set(0, 2e5 + 500, 0);\n \n    // find largest j s.t j < i and a[j] > a[i]\n    vector<int> a_left(n + 1);\n    a_left[1] = 0;\n    tr -> set(a[1], a[1] + 1, 1);\n    for(int i = 2; i <= n; i++) {\n        int q = max(0ll, tr -> query(a[i] + 1, 2e5 + 400));\n        a_left[i] = q;\n        tr -> set(a[i], a[i] + 1, i);\n    }\n    tr -> set(0, 2e5 + 500, n + 1);\n    // find smallest j s.t j > i and b[j] < a[i]\n    vector<int> b_right(n + 1);\n    b_right[n] = n + 1;\n    tr -> set(b[n], b[n] + 1, n);\n    for(int i = n - 1; i >= 1; i--) {\n        int q = min(n + 1, tr -> query2(0, a[i]));\n        b_right[i] = q;\n        tr -> set(b[i], b[i] + 1, i);\n    }\n    tr -> set(0, 2e5 + 500, 0);\n    // find largest j s.t j < i and b[j] < a[i];\n    vector<int> b_left(n + 1);\n    b_left[1] = 0;\n    tr -> set(b[1], b[1] + 1, 1);\n    for(int i = 2; i <= n; i++) {\n        int q = max(0ll, tr -> query(0, a[i]));\n        b_left[i] = q;\n        tr -> set(b[i], b[i] + 1, i);\n    }\n    tr -> set(0, 2e5 + 500, 0);\n    for(int i = 1; i <= n; i++) {tr -> set(i, i + 1, a[i]);}\n    for(auto [_, i] : order) {\n        int left_bound = max(a_left[i], b_left[i]) + 1;\n        int right_bound = min(a_right[i], b_right[i]);\n        if(left_bound < right_bound) {\n            tr -> set(left_bound, right_bound, a[i]);\n        }\n    }\n    vector<int> ans;\n    for(int i = 1; i <= n; i++) {\n        int num = tr -> query(i, i + 1);\n        ans.pb(num);\n        if(num != b[i]) {\n            cout << \"NO\" << endl;\n            return;\n        }\n    }\n    cout << \"YES\" << endl;\n    return;\n}\n```\n\nTime complexity: $O(nlogn)$\n\nA very stupid thing I did was making the segment tree on every testcase, which obviously TLEs, and another extremely stupid thing I did was this:\n\n![dumb](dumb.png)\n\nI set the segment tree size to $sizeof(vec)$, which give the size of this object, which for vector<int> is 24... I didn't notice this and was wondering why my segment tree is behaving weird for 2 hours...","slug":"CF-1904D-Set-To-Max","published":1,"updated":"2024-12-26T01:29:58.460Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblgq0005b0u9eifvajgs","content":"<p>Heya~ before talking about this problem, I just wanna say that I didn’t insta fail my resolutions yay! I’ve been doing 5 problems everyday, and grinding very hard on math. I think I should also do some virtuals on top but we can start slowly :D</p>\n<p>I want to talk about this problem, because it caused me alot of trouble due to a silly mistake XD, other than that it was a pretty standard problem.</p>\n<h2 id=\"cf-1904d-set-to-max-hard-version\"><a href=\"https://codeforces.com/contest/1904/problem/D2\">CF 1904D. Set To Max (Hard Version)</a></h2>\n<p>There are two versions of the problem, with the difference being <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>1</mn><mi>e</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">n \\leq 1e3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">3</span></span></span></span> on easy, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>2</mn><mi>e</mi><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">n \\leq 2e5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">5</span></span></span></span> on hard.</p>\n<p>First of all, I imagined the operation as choosing an index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> and letting <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> as the max of a operation, and we can “extend” <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> to left and right.</p>\n<p>The only restriction when we can’t keep extending further <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> is when we are met with a larger <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span>, because $a[i] wouldn’t be the biggest anymore if the range we chose consists <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span>.</p>\n<p>So basically, for an index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, we can extend left and right to index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi><mo>&lt;</mo><mi>i</mi><mo>&lt;</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">j &lt; i &lt; k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69862em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[j] &gt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[k] &gt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>.</p>\n<p>Now, we wouldn’t always want to extend as large as we can, as if theres a index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> in it with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&lt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">b[j] &lt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>, we would obviously fail making both arrays equal as we can only make it bigger not smaller.</p>\n<p>So now we have two constraint as boundaries:</p>\n<p>On the left side find <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi><mo>&lt;</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">j &lt; i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[j] &gt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&lt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">b[j] &lt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>,<br>\nOn the right side find <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>&gt;</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">k &gt; i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[k] &gt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>&lt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">b[k] &lt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>.</p>\n<p>And for the boundaries we choose the largest <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> and smallest <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>.</p>\n<p>Now we have a boundaries <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>j</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>k</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(j_i, k_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> for each index, where we can set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><msub><mi>j</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[j_i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><msub><mi>k</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[k_i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>,and that we are sure that this operation will only make the array closer to what we want.</p>\n<p>Its then sufficient to apply all the operations from the smallest <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> to the biggest and checking if the array is the same.</p>\n<p>The easy version is just manually doing the operations everytime with another for loop, taking <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> time.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vi <span class=\"title\">a</span><span class=\"params\">(n)</span>, <span class=\"title\">b</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    vector&lt;pii&gt; order;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">        order.<span class=\"built_in\">pb</span>(&#123;a[i], i&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;i : b) cin &gt;&gt; i;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(order));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [_, idx] : order) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = idx + <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i] &gt; a[idx] || a[idx] &gt; b[i]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> a[i] = a[idx];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = idx - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i] &gt; a[idx] || a[idx] &gt; b[i]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> a[i] = a[idx];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i] != b[i]) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The hard version requires us to do all operations quicker than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>Lets say that we already have all the boundaries for each index and we need to apply it, then we would need a range set element data structure to help us do this, which lazy tag segment trees can do easily in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>The problem now becomes finding <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>j</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>k</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(j_i, k_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> quickly, which actually can we done with segment trees again!</p>\n<p>There are two cases for each bound, for left bound, either <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&lt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">b[j] &lt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> case or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[j] &gt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>, and we want to find the biggest one.</p>\n<p>I will talk about how to find the max <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[j] &gt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>, as others are pretty much the same.</p>\n<p>For this, we would want a point set/add range max segment tree, where the index is the value and inside stores the largest index with that value.</p>\n<p>We traverse from left to right, each time we find the max value between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a[i] + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> to the max value, this way we can get the biggest index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[j] &gt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>, and we just set index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> in the segment tree.</p>\n<p>Now just do this four times to find the bound, and do the updates with range set segment tree.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf = <span class=\"number\">1e9</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    Node *l = <span class=\"number\">0</span>, *r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> lo, hi, mset = inf, madd = <span class=\"number\">0</span>, val = -inf, val2 = inf;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> lo,<span class=\"type\">int</span> hi):<span class=\"built_in\">lo</span>(lo),<span class=\"built_in\">hi</span>(hi)&#123;&#125; <span class=\"comment\">// Large interval of -inf</span></span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(vi&amp; v, <span class=\"type\">int</span> lo, <span class=\"type\">int</span> hi) : <span class=\"built_in\">lo</span>(lo), <span class=\"built_in\">hi</span>(hi) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lo + <span class=\"number\">1</span> &lt; hi) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid = lo + (hi - lo)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            l = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(v, lo, mid); r = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(v, mid, hi);</span><br><span class=\"line\">            val = <span class=\"built_in\">max</span>(l-&gt;val, r-&gt;val);</span><br><span class=\"line\">            val2 = <span class=\"built_in\">min</span>(l-&gt;val2, r-&gt;val2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> val = val2 = v[lo];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> L, <span class=\"type\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (R &lt;= lo || hi &lt;= L) <span class=\"keyword\">return</span> -inf;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L &lt;= lo &amp;&amp; hi &lt;= R) <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">        <span class=\"built_in\">push</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(l-&gt;<span class=\"built_in\">query</span>(L, R), r-&gt;<span class=\"built_in\">query</span>(L, R));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query2</span><span class=\"params\">(<span class=\"type\">int</span> L, <span class=\"type\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (R &lt;= lo || hi &lt;= L) <span class=\"keyword\">return</span> inf;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L &lt;= lo &amp;&amp; hi &lt;= R) <span class=\"keyword\">return</span> val2;</span><br><span class=\"line\">        <span class=\"built_in\">push</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(l-&gt;<span class=\"built_in\">query2</span>(L, R), r-&gt;<span class=\"built_in\">query2</span>(L, R));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> L, <span class=\"type\">int</span> R, <span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (R &lt;= lo || hi &lt;= L) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L &lt;= lo &amp;&amp; hi &lt;= R) &#123;</span><br><span class=\"line\">            madd += x;</span><br><span class=\"line\">            val += x;</span><br><span class=\"line\">            val2 += x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">push</span>(), l-&gt;<span class=\"built_in\">add</span>(L, R, x), r-&gt;<span class=\"built_in\">add</span>(L, R, x);</span><br><span class=\"line\">            val = <span class=\"built_in\">max</span>(l-&gt;val, r-&gt;val);</span><br><span class=\"line\">            val2 = <span class=\"built_in\">min</span>(l-&gt;val2, r-&gt;val2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"type\">int</span> L, <span class=\"type\">int</span> R, <span class=\"type\">int</span> x)</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (R &lt;= lo || hi &lt;= L) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L &lt;= lo &amp;&amp; hi &lt;= R) mset = val = val2 = x, madd = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">push</span>(), l-&gt;<span class=\"built_in\">set</span>(L, R, x), r-&gt;<span class=\"built_in\">set</span>(L, R, x);</span><br><span class=\"line\">            val = <span class=\"built_in\">max</span>(l-&gt;val, r-&gt;val);</span><br><span class=\"line\">            val2 = <span class=\"built_in\">min</span>(l-&gt;val2, r-&gt;val2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!l) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid = lo + (hi - lo)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            l = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(lo, mid); r = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(mid, hi);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mset != inf)</span><br><span class=\"line\">            l-&gt;<span class=\"built_in\">set</span>(lo,hi,mset), r-&gt;<span class=\"built_in\">set</span>(lo,hi,mset), mset = inf;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (madd)</span><br><span class=\"line\">            l-&gt;<span class=\"built_in\">add</span>(lo,hi,madd), r-&gt;<span class=\"built_in\">add</span>(lo,hi,madd), madd = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">vec</span><span class=\"params\">(<span class=\"number\">2e5</span> + <span class=\"number\">501</span>, inf)</span></span>;</span><br><span class=\"line\">Node* tr = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(vec, <span class=\"number\">0</span>, vec.<span class=\"built_in\">size</span>());</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vi <span class=\"title\">a</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span>, <span class=\"title\">b</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    vector&lt;pii&gt; order;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">        order.<span class=\"built_in\">pb</span>(&#123;a[i], i&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(order));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; b[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tr -&gt; <span class=\"built_in\">set</span>(<span class=\"number\">0</span>, (<span class=\"type\">int</span>) <span class=\"number\">2e5</span> + <span class=\"number\">500</span>, n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// find smallest j s.t j &gt; i and a[j] &gt; a[i]</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a_right</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    a_right[n] = n + <span class=\"number\">1</span>;</span><br><span class=\"line\">    tr -&gt; <span class=\"built_in\">set</span>(a[n], a[n] + <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">1</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> q = <span class=\"built_in\">min</span>(n + <span class=\"number\">1</span>, tr -&gt; <span class=\"built_in\">query2</span>(a[i] + <span class=\"number\">1</span>, <span class=\"number\">2e5</span> + <span class=\"number\">400</span>));</span><br><span class=\"line\">        a_right[i] = q;</span><br><span class=\"line\">        tr -&gt; <span class=\"built_in\">set</span>(a[i], a[i] + <span class=\"number\">1</span>, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tr -&gt; <span class=\"built_in\">set</span>(<span class=\"number\">0</span>, <span class=\"number\">2e5</span> + <span class=\"number\">500</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// find largest j s.t j &lt; i and a[j] &gt; a[i]</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a_left</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    a_left[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    tr -&gt; <span class=\"built_in\">set</span>(a[<span class=\"number\">1</span>], a[<span class=\"number\">1</span>] + <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> q = <span class=\"built_in\">max</span>(<span class=\"number\">0ll</span>, tr -&gt; <span class=\"built_in\">query</span>(a[i] + <span class=\"number\">1</span>, <span class=\"number\">2e5</span> + <span class=\"number\">400</span>));</span><br><span class=\"line\">        a_left[i] = q;</span><br><span class=\"line\">        tr -&gt; <span class=\"built_in\">set</span>(a[i], a[i] + <span class=\"number\">1</span>, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tr -&gt; <span class=\"built_in\">set</span>(<span class=\"number\">0</span>, <span class=\"number\">2e5</span> + <span class=\"number\">500</span>, n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// find smallest j s.t j &gt; i and b[j] &lt; a[i]</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">b_right</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    b_right[n] = n + <span class=\"number\">1</span>;</span><br><span class=\"line\">    tr -&gt; <span class=\"built_in\">set</span>(b[n], b[n] + <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">1</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> q = <span class=\"built_in\">min</span>(n + <span class=\"number\">1</span>, tr -&gt; <span class=\"built_in\">query2</span>(<span class=\"number\">0</span>, a[i]));</span><br><span class=\"line\">        b_right[i] = q;</span><br><span class=\"line\">        tr -&gt; <span class=\"built_in\">set</span>(b[i], b[i] + <span class=\"number\">1</span>, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tr -&gt; <span class=\"built_in\">set</span>(<span class=\"number\">0</span>, <span class=\"number\">2e5</span> + <span class=\"number\">500</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// find largest j s.t j &lt; i and b[j] &lt; a[i];</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">b_left</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    b_left[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    tr -&gt; <span class=\"built_in\">set</span>(b[<span class=\"number\">1</span>], b[<span class=\"number\">1</span>] + <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> q = <span class=\"built_in\">max</span>(<span class=\"number\">0ll</span>, tr -&gt; <span class=\"built_in\">query</span>(<span class=\"number\">0</span>, a[i]));</span><br><span class=\"line\">        b_left[i] = q;</span><br><span class=\"line\">        tr -&gt; <span class=\"built_in\">set</span>(b[i], b[i] + <span class=\"number\">1</span>, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tr -&gt; <span class=\"built_in\">set</span>(<span class=\"number\">0</span>, <span class=\"number\">2e5</span> + <span class=\"number\">500</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;tr -&gt; <span class=\"built_in\">set</span>(i, i + <span class=\"number\">1</span>, a[i]);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [_, i] : order) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> left_bound = <span class=\"built_in\">max</span>(a_left[i], b_left[i]) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> right_bound = <span class=\"built_in\">min</span>(a_right[i], b_right[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left_bound &lt; right_bound) &#123;</span><br><span class=\"line\">            tr -&gt; <span class=\"built_in\">set</span>(left_bound, right_bound, a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> num = tr -&gt; <span class=\"built_in\">query</span>(i, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        ans.<span class=\"built_in\">pb</span>(num);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num != b[i]) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>A very stupid thing I did was making the segment tree on every testcase, which obviously TLEs, and another extremely stupid thing I did was this:</p>\n<p><img src=\"dumb.png\" alt=\"dumb\"></p>\n<p>I set the segment tree size to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>o</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mi>e</mi><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">sizeof(vec)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span></span></span></span>, which give the size of this object, which for vector<int> is 24… I didn’t notice this and was wondering why my segment tree is behaving weird for 2 hours…</p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>Heya~ before talking about this problem, I just wanna say that I didn’t insta fail my resolutions yay! I’ve been doing 5 problems everyday, and grinding very hard on math. I think I should also do some virtuals on top but we can start slowly :D</p>\n<p>I want to talk about this problem, because it caused me alot of trouble due to a silly mistake XD, other than that it was a pretty standard problem.</p>\n<h2 id=\"cf-1904d-set-to-max-hard-version\"><a href=\"https://codeforces.com/contest/1904/problem/D2\">CF 1904D. Set To Max (Hard Version)</a></h2>\n<p>There are two versions of the problem, with the difference being <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>1</mn><mi>e</mi><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">n \\leq 1e3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">3</span></span></span></span> on easy, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>2</mn><mi>e</mi><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">n \\leq 2e5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">e</span><span class=\"mord\">5</span></span></span></span> on hard.</p>\n<p>First of all, I imagined the operation as choosing an index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> and letting <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> as the max of a operation, and we can “extend” <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> to left and right.</p>\n<p>The only restriction when we can’t keep extending further <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> is when we are met with a larger <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span>, because $a[i] wouldn’t be the biggest anymore if the range we chose consists <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[j]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span></span></span></span>.</p>\n<p>So basically, for an index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, we can extend left and right to index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi><mo>&lt;</mo><mi>i</mi><mo>&lt;</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">j &lt; i &lt; k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69862em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[j] &gt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[k] &gt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>.</p>\n<p>Now, we wouldn’t always want to extend as large as we can, as if theres a index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> in it with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&lt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">b[j] &lt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>, we would obviously fail making both arrays equal as we can only make it bigger not smaller.</p>\n<p>So now we have two constraint as boundaries:</p>\n<p>On the left side find <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi><mo>&lt;</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">j &lt; i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[j] &gt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&lt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">b[j] &lt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>,<br>\nOn the right side find <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>&gt;</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">k &gt; i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[k] &gt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>k</mi><mo stretchy=\"false\">]</mo><mo>&lt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">b[k] &lt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>.</p>\n<p>And for the boundaries we choose the largest <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> and smallest <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>.</p>\n<p>Now we have a boundaries <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>j</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>k</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(j_i, k_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> for each index, where we can set <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><msub><mi>j</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[j_i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><msub><mi>k</mi><mi>i</mi></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[k_i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>,and that we are sure that this operation will only make the array closer to what we want.</p>\n<p>Its then sufficient to apply all the operations from the smallest <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> to the biggest and checking if the array is the same.</p>\n<p>The easy version is just manually doing the operations everytime with another for loop, taking <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> time.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vi <span class=\"title\">a</span><span class=\"params\">(n)</span>, <span class=\"title\">b</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    vector&lt;pii&gt; order;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">        order.<span class=\"built_in\">pb</span>(&#123;a[i], i&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;i : b) cin &gt;&gt; i;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(order));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [_, idx] : order) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = idx + <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i] &gt; a[idx] || a[idx] &gt; b[i]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> a[i] = a[idx];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = idx - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(a[i] &gt; a[idx] || a[idx] &gt; b[i]) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> a[i] = a[idx];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(a[i] != b[i]) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The hard version requires us to do all operations quicker than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>Lets say that we already have all the boundaries for each index and we need to apply it, then we would need a range set element data structure to help us do this, which lazy tag segment trees can do easily in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>The problem now becomes finding <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>j</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>k</mi><mi>i</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(j_i, k_i)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.05724em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03148em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> quickly, which actually can we done with segment trees again!</p>\n<p>There are two cases for each bound, for left bound, either <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&lt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">b[j] &lt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> case or <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[j] &gt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>, and we want to find the biggest one.</p>\n<p>I will talk about how to find the max <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[j] &gt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>, as others are pretty much the same.</p>\n<p>For this, we would want a point set/add range max segment tree, where the index is the value and inside stores the largest index with that value.</p>\n<p>We traverse from left to right, each time we find the max value between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a[i] + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> to the max value, this way we can get the biggest index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span> that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>j</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[j] &gt; a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>, and we just set index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> in the segment tree.</p>\n<p>Now just do this four times to find the bound, and do the updates with range set segment tree.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf = <span class=\"number\">1e9</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    Node *l = <span class=\"number\">0</span>, *r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> lo, hi, mset = inf, madd = <span class=\"number\">0</span>, val = -inf, val2 = inf;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> lo,<span class=\"type\">int</span> hi):<span class=\"built_in\">lo</span>(lo),<span class=\"built_in\">hi</span>(hi)&#123;&#125; <span class=\"comment\">// Large interval of -inf</span></span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(vi&amp; v, <span class=\"type\">int</span> lo, <span class=\"type\">int</span> hi) : <span class=\"built_in\">lo</span>(lo), <span class=\"built_in\">hi</span>(hi) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lo + <span class=\"number\">1</span> &lt; hi) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid = lo + (hi - lo)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            l = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(v, lo, mid); r = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(v, mid, hi);</span><br><span class=\"line\">            val = <span class=\"built_in\">max</span>(l-&gt;val, r-&gt;val);</span><br><span class=\"line\">            val2 = <span class=\"built_in\">min</span>(l-&gt;val2, r-&gt;val2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> val = val2 = v[lo];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> L, <span class=\"type\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (R &lt;= lo || hi &lt;= L) <span class=\"keyword\">return</span> -inf;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L &lt;= lo &amp;&amp; hi &lt;= R) <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">        <span class=\"built_in\">push</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(l-&gt;<span class=\"built_in\">query</span>(L, R), r-&gt;<span class=\"built_in\">query</span>(L, R));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query2</span><span class=\"params\">(<span class=\"type\">int</span> L, <span class=\"type\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (R &lt;= lo || hi &lt;= L) <span class=\"keyword\">return</span> inf;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L &lt;= lo &amp;&amp; hi &lt;= R) <span class=\"keyword\">return</span> val2;</span><br><span class=\"line\">        <span class=\"built_in\">push</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(l-&gt;<span class=\"built_in\">query2</span>(L, R), r-&gt;<span class=\"built_in\">query2</span>(L, R));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> L, <span class=\"type\">int</span> R, <span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (R &lt;= lo || hi &lt;= L) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L &lt;= lo &amp;&amp; hi &lt;= R) &#123;</span><br><span class=\"line\">            madd += x;</span><br><span class=\"line\">            val += x;</span><br><span class=\"line\">            val2 += x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">push</span>(), l-&gt;<span class=\"built_in\">add</span>(L, R, x), r-&gt;<span class=\"built_in\">add</span>(L, R, x);</span><br><span class=\"line\">            val = <span class=\"built_in\">max</span>(l-&gt;val, r-&gt;val);</span><br><span class=\"line\">            val2 = <span class=\"built_in\">min</span>(l-&gt;val2, r-&gt;val2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"type\">int</span> L, <span class=\"type\">int</span> R, <span class=\"type\">int</span> x)</span> </span>&#123; </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (R &lt;= lo || hi &lt;= L) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L &lt;= lo &amp;&amp; hi &lt;= R) mset = val = val2 = x, madd = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">push</span>(), l-&gt;<span class=\"built_in\">set</span>(L, R, x), r-&gt;<span class=\"built_in\">set</span>(L, R, x);</span><br><span class=\"line\">            val = <span class=\"built_in\">max</span>(l-&gt;val, r-&gt;val);</span><br><span class=\"line\">            val2 = <span class=\"built_in\">min</span>(l-&gt;val2, r-&gt;val2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!l) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid = lo + (hi - lo)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            l = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(lo, mid); r = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(mid, hi);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mset != inf)</span><br><span class=\"line\">            l-&gt;<span class=\"built_in\">set</span>(lo,hi,mset), r-&gt;<span class=\"built_in\">set</span>(lo,hi,mset), mset = inf;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (madd)</span><br><span class=\"line\">            l-&gt;<span class=\"built_in\">add</span>(lo,hi,madd), r-&gt;<span class=\"built_in\">add</span>(lo,hi,madd), madd = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">vec</span><span class=\"params\">(<span class=\"number\">2e5</span> + <span class=\"number\">501</span>, inf)</span></span>;</span><br><span class=\"line\">Node* tr = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(vec, <span class=\"number\">0</span>, vec.<span class=\"built_in\">size</span>());</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vi <span class=\"title\">a</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span>, <span class=\"title\">b</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    vector&lt;pii&gt; order;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; a[i];</span><br><span class=\"line\">        order.<span class=\"built_in\">pb</span>(&#123;a[i], i&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(order));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; b[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tr -&gt; <span class=\"built_in\">set</span>(<span class=\"number\">0</span>, (<span class=\"type\">int</span>) <span class=\"number\">2e5</span> + <span class=\"number\">500</span>, n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// find smallest j s.t j &gt; i and a[j] &gt; a[i]</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a_right</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    a_right[n] = n + <span class=\"number\">1</span>;</span><br><span class=\"line\">    tr -&gt; <span class=\"built_in\">set</span>(a[n], a[n] + <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">1</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> q = <span class=\"built_in\">min</span>(n + <span class=\"number\">1</span>, tr -&gt; <span class=\"built_in\">query2</span>(a[i] + <span class=\"number\">1</span>, <span class=\"number\">2e5</span> + <span class=\"number\">400</span>));</span><br><span class=\"line\">        a_right[i] = q;</span><br><span class=\"line\">        tr -&gt; <span class=\"built_in\">set</span>(a[i], a[i] + <span class=\"number\">1</span>, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tr -&gt; <span class=\"built_in\">set</span>(<span class=\"number\">0</span>, <span class=\"number\">2e5</span> + <span class=\"number\">500</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">// find largest j s.t j &lt; i and a[j] &gt; a[i]</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">a_left</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    a_left[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    tr -&gt; <span class=\"built_in\">set</span>(a[<span class=\"number\">1</span>], a[<span class=\"number\">1</span>] + <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> q = <span class=\"built_in\">max</span>(<span class=\"number\">0ll</span>, tr -&gt; <span class=\"built_in\">query</span>(a[i] + <span class=\"number\">1</span>, <span class=\"number\">2e5</span> + <span class=\"number\">400</span>));</span><br><span class=\"line\">        a_left[i] = q;</span><br><span class=\"line\">        tr -&gt; <span class=\"built_in\">set</span>(a[i], a[i] + <span class=\"number\">1</span>, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tr -&gt; <span class=\"built_in\">set</span>(<span class=\"number\">0</span>, <span class=\"number\">2e5</span> + <span class=\"number\">500</span>, n + <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// find smallest j s.t j &gt; i and b[j] &lt; a[i]</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">b_right</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    b_right[n] = n + <span class=\"number\">1</span>;</span><br><span class=\"line\">    tr -&gt; <span class=\"built_in\">set</span>(b[n], b[n] + <span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">1</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> q = <span class=\"built_in\">min</span>(n + <span class=\"number\">1</span>, tr -&gt; <span class=\"built_in\">query2</span>(<span class=\"number\">0</span>, a[i]));</span><br><span class=\"line\">        b_right[i] = q;</span><br><span class=\"line\">        tr -&gt; <span class=\"built_in\">set</span>(b[i], b[i] + <span class=\"number\">1</span>, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tr -&gt; <span class=\"built_in\">set</span>(<span class=\"number\">0</span>, <span class=\"number\">2e5</span> + <span class=\"number\">500</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"comment\">// find largest j s.t j &lt; i and b[j] &lt; a[i];</span></span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">b_left</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    b_left[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    tr -&gt; <span class=\"built_in\">set</span>(b[<span class=\"number\">1</span>], b[<span class=\"number\">1</span>] + <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> q = <span class=\"built_in\">max</span>(<span class=\"number\">0ll</span>, tr -&gt; <span class=\"built_in\">query</span>(<span class=\"number\">0</span>, a[i]));</span><br><span class=\"line\">        b_left[i] = q;</span><br><span class=\"line\">        tr -&gt; <span class=\"built_in\">set</span>(b[i], b[i] + <span class=\"number\">1</span>, i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tr -&gt; <span class=\"built_in\">set</span>(<span class=\"number\">0</span>, <span class=\"number\">2e5</span> + <span class=\"number\">500</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;tr -&gt; <span class=\"built_in\">set</span>(i, i + <span class=\"number\">1</span>, a[i]);&#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [_, i] : order) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> left_bound = <span class=\"built_in\">max</span>(a_left[i], b_left[i]) + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> right_bound = <span class=\"built_in\">min</span>(a_right[i], b_right[i]);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(left_bound &lt; right_bound) &#123;</span><br><span class=\"line\">            tr -&gt; <span class=\"built_in\">set</span>(left_bound, right_bound, a[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; ans;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> num = tr -&gt; <span class=\"built_in\">query</span>(i, i + <span class=\"number\">1</span>);</span><br><span class=\"line\">        ans.<span class=\"built_in\">pb</span>(num);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(num != b[i]) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>A very stupid thing I did was making the segment tree on every testcase, which obviously TLEs, and another extremely stupid thing I did was this:</p>\n<p><img src=\"dumb.png\" alt=\"dumb\"></p>\n<p>I set the segment tree size to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>i</mi><mi>z</mi><mi>e</mi><mi>o</mi><mi>f</mi><mo stretchy=\"false\">(</mo><mi>v</mi><mi>e</mi><mi>c</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">sizeof(vec)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">)</span></span></span></span>, which give the size of this object, which for vector<int> is 24… I didn’t notice this and was wondering why my segment tree is behaving weird for 2 hours…</p>\n"},{"title":"CF 892 (Div. 2) + ABC 314","date":"2023-08-16T04:04:11.000Z","_content":"Well, I was todays year old when I found out you can't register a contest 5 minutes beforehand... I guess I'll vir it tomorrow then.\n\nI did two contest on 8/12, and they were both really interesting!\n\n## [ABC 314](https://atcoder.jp/contests/abc314)\n\nSolve: 4/8\n\nI haven't done atcoder contests for a while now, and I honestly didn't do as well as I expected. A to D were pretty standard atcoder problems, so I'll skip them.\nE was a question about like probability expectation but weirdly, I still can't understand the question even now.\nF was is really good question that I wasn't able to solve it in-contest but upsolved later. The statement is pretty clear so I'll skip it.\nThe idea here is the matches form a tree with the probabilities as the edge's weight.\n\n![probability tree](https://img.atcoder.jp/abc314/98f0c3212584232f0fda47c6f40ae1bf.png)\n\nWe can then dfs to get the sum of probabilities which is the expectation for the nodes.\nTo build this tree, we can use DSU to maintain the status of belonged groups. (We can't use union by rank though because the parent needs to be the biggest indexed one)\n\nCode\n\n```cpp\nconst int MAXN = 2e5 + 5;\nconst int mod = 998244353;\nint dsu[MAXN * 2];\nint rk[MAXN * 2];\nvector<pii> graph[MAXN * 2];\nvector<int> ans(MAXN);\nint n;\nint mabs(int a) { \n    return (a % mod + mod) % mod;\n}\nint mmul(int a, int b) {\n    return mabs((a % mod)*(b % mod));\n}\nint madd(int a, int b) { // a + b\n    return mabs(a % mod + b % mod);\n}\nint mmin(int a, int b) { // a - b\n    return mabs(a % mod - b % mod);\n}\nint fastpow(int a, int n) { // calculate a^n % mod\n    if(n == 0) return 1;\n    int half = fastpow(a, n / 2);\n    if(n & 1) return mmul(mmul(half, half), a);\n    else return mmul(half, half);\n}\nint mdiv(int a, int b) { // (a / b) % mod\n    return mmul(a, fastpow(b, mod - 2));\n}\nint find(int x){\n    return dsu[x] == x ? x : dsu[x] = find(dsu[x]);\n}\nvoid modify(int x,int y){\n    int pa = find(x);\n    int pb = find(y);\n    if(pa != pb) {\n        // if(rk[pa] < rk[pb]) swap(pa, pb); // pa > pb\n        dsu[pb] = pa;\n        rk[pa] += rk[pb];\n    }\n}\nvoid init(int n) {\n    for(int i = 1; i <= 2 * n; i++) {\n        dsu[i] = i;\n        if(i <= n) rk[i] = 1;\n        else rk[i] = 0;\n    }\n}\nvoid dfs(int node, int prev, int val) {\n    if(node <= n) {\n        ans[node] = val;\n        return;\n    }\n    for(auto [c, w] : graph[node]) {\n        if(c == prev) continue;\n        dfs(c, node, madd(val, w));\n    }\n}\nvoid solve() {\n    cin >> n;\n    init(n);\n    int idx = n + 1;\n    for(int i = 0; i < n - 1; i++) {\n        int a, b;\n        cin >> a >> b;\n        int node_a = find(a);\n        int node_b = find(b);\n        graph[idx].pb({node_a, mdiv(rk[node_a], rk[node_a] + rk[node_b])});\n        graph[idx].pb({node_b, mdiv(rk[node_b], rk[node_a] + rk[node_b])});\n        modify(node_a, node_b);\n        modify(idx, node_a);\n        idx += 1;\n    }\n    dfs(idx - 1, -1, 0);\n    for(int i = 1; i <= n; i++) {\n        cout << ans[i] << \" \";\n    }\n    cout << endl;\n    return;\n}\n```\n\nTime Complexity: $O(nlog(\\text{mod}))$ (due to mod division which is equal to $log(\\text{mod})$)\n\n## [CF round 892 (Div. 2)](https://codeforces.com/contest/1859)\n\nThis was an pretty usual contest, and I got -25... sad. Im really not good at combating stress, so I got WA on pA unfortunately, and I didn't solve pD in contest.\npC was not a really good question imo. I got a $O(n^4)$ that got TLE and is stumped me for a bit.\nBut I got another idea: I precomputed all the answers (as $n$ was quite small), and actually AC'd it! amazing!\nthe pD from this contest was pretty nice, maybe I'll make an editorial later on I guess (Im lazy haha)\n","source":"_posts/CF-892-Div-2-ABC-314.md","raw":"---\ntitle: CF 892 (Div. 2) + ABC 314\ndate: 2023-08-15 23:04:11\ntags: [\"CP\"]\n---\nWell, I was todays year old when I found out you can't register a contest 5 minutes beforehand... I guess I'll vir it tomorrow then.\n\nI did two contest on 8/12, and they were both really interesting!\n\n## [ABC 314](https://atcoder.jp/contests/abc314)\n\nSolve: 4/8\n\nI haven't done atcoder contests for a while now, and I honestly didn't do as well as I expected. A to D were pretty standard atcoder problems, so I'll skip them.\nE was a question about like probability expectation but weirdly, I still can't understand the question even now.\nF was is really good question that I wasn't able to solve it in-contest but upsolved later. The statement is pretty clear so I'll skip it.\nThe idea here is the matches form a tree with the probabilities as the edge's weight.\n\n![probability tree](https://img.atcoder.jp/abc314/98f0c3212584232f0fda47c6f40ae1bf.png)\n\nWe can then dfs to get the sum of probabilities which is the expectation for the nodes.\nTo build this tree, we can use DSU to maintain the status of belonged groups. (We can't use union by rank though because the parent needs to be the biggest indexed one)\n\nCode\n\n```cpp\nconst int MAXN = 2e5 + 5;\nconst int mod = 998244353;\nint dsu[MAXN * 2];\nint rk[MAXN * 2];\nvector<pii> graph[MAXN * 2];\nvector<int> ans(MAXN);\nint n;\nint mabs(int a) { \n    return (a % mod + mod) % mod;\n}\nint mmul(int a, int b) {\n    return mabs((a % mod)*(b % mod));\n}\nint madd(int a, int b) { // a + b\n    return mabs(a % mod + b % mod);\n}\nint mmin(int a, int b) { // a - b\n    return mabs(a % mod - b % mod);\n}\nint fastpow(int a, int n) { // calculate a^n % mod\n    if(n == 0) return 1;\n    int half = fastpow(a, n / 2);\n    if(n & 1) return mmul(mmul(half, half), a);\n    else return mmul(half, half);\n}\nint mdiv(int a, int b) { // (a / b) % mod\n    return mmul(a, fastpow(b, mod - 2));\n}\nint find(int x){\n    return dsu[x] == x ? x : dsu[x] = find(dsu[x]);\n}\nvoid modify(int x,int y){\n    int pa = find(x);\n    int pb = find(y);\n    if(pa != pb) {\n        // if(rk[pa] < rk[pb]) swap(pa, pb); // pa > pb\n        dsu[pb] = pa;\n        rk[pa] += rk[pb];\n    }\n}\nvoid init(int n) {\n    for(int i = 1; i <= 2 * n; i++) {\n        dsu[i] = i;\n        if(i <= n) rk[i] = 1;\n        else rk[i] = 0;\n    }\n}\nvoid dfs(int node, int prev, int val) {\n    if(node <= n) {\n        ans[node] = val;\n        return;\n    }\n    for(auto [c, w] : graph[node]) {\n        if(c == prev) continue;\n        dfs(c, node, madd(val, w));\n    }\n}\nvoid solve() {\n    cin >> n;\n    init(n);\n    int idx = n + 1;\n    for(int i = 0; i < n - 1; i++) {\n        int a, b;\n        cin >> a >> b;\n        int node_a = find(a);\n        int node_b = find(b);\n        graph[idx].pb({node_a, mdiv(rk[node_a], rk[node_a] + rk[node_b])});\n        graph[idx].pb({node_b, mdiv(rk[node_b], rk[node_a] + rk[node_b])});\n        modify(node_a, node_b);\n        modify(idx, node_a);\n        idx += 1;\n    }\n    dfs(idx - 1, -1, 0);\n    for(int i = 1; i <= n; i++) {\n        cout << ans[i] << \" \";\n    }\n    cout << endl;\n    return;\n}\n```\n\nTime Complexity: $O(nlog(\\text{mod}))$ (due to mod division which is equal to $log(\\text{mod})$)\n\n## [CF round 892 (Div. 2)](https://codeforces.com/contest/1859)\n\nThis was an pretty usual contest, and I got -25... sad. Im really not good at combating stress, so I got WA on pA unfortunately, and I didn't solve pD in contest.\npC was not a really good question imo. I got a $O(n^4)$ that got TLE and is stumped me for a bit.\nBut I got another idea: I precomputed all the answers (as $n$ was quite small), and actually AC'd it! amazing!\nthe pD from this contest was pretty nice, maybe I'll make an editorial later on I guess (Im lazy haha)\n","slug":"CF-892-Div-2-ABC-314","published":1,"updated":"2024-12-26T01:29:58.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblgr0006b0u96gaighpa","content":"<p>Well, I was todays year old when I found out you can’t register a contest 5 minutes beforehand… I guess I’ll vir it tomorrow then.</p>\n<p>I did two contest on 8/12, and they were both really interesting!</p>\n<h2 id=\"abc-314\"><a href=\"https://atcoder.jp/contests/abc314\">ABC 314</a></h2>\n<p>Solve: 4/8</p>\n<p>I haven’t done atcoder contests for a while now, and I honestly didn’t do as well as I expected. A to D were pretty standard atcoder problems, so I’ll skip them.<br>\nE was a question about like probability expectation but weirdly, I still can’t understand the question even now.<br>\nF was is really good question that I wasn’t able to solve it in-contest but upsolved later. The statement is pretty clear so I’ll skip it.<br>\nThe idea here is the matches form a tree with the probabilities as the edge’s weight.</p>\n<p><img src=\"https://img.atcoder.jp/abc314/98f0c3212584232f0fda47c6f40ae1bf.png\" alt=\"probability tree\"></p>\n<p>We can then dfs to get the sum of probabilities which is the expectation for the nodes.<br>\nTo build this tree, we can use DSU to maintain the status of belonged groups. (We can’t use union by rank though because the parent needs to be the biggest indexed one)</p>\n<p>Code</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> dsu[MAXN * <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> rk[MAXN * <span class=\"number\">2</span>];</span><br><span class=\"line\">vector&lt;pii&gt; graph[MAXN * <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(MAXN)</span></span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mabs</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a % mod + mod) % mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mmul</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mabs</span>((a % mod)*(b % mod));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">madd</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123; <span class=\"comment\">// a + b</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mabs</span>(a % mod + b % mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mmin</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123; <span class=\"comment\">// a - b</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mabs</span>(a % mod - b % mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">fastpow</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> n)</span> </span>&#123; <span class=\"comment\">// calculate a^n % mod</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> half = <span class=\"built_in\">fastpow</span>(a, n / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">mmul</span>(<span class=\"built_in\">mmul</span>(half, half), a);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">mmul</span>(half, half);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mdiv</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123; <span class=\"comment\">// (a / b) % mod</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mmul</span>(a, <span class=\"built_in\">fastpow</span>(b, mod - <span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dsu[x] == x ? x : dsu[x] = <span class=\"built_in\">find</span>(dsu[x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> pa = <span class=\"built_in\">find</span>(x);</span><br><span class=\"line\">    <span class=\"type\">int</span> pb = <span class=\"built_in\">find</span>(y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pa != pb) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// if(rk[pa] &lt; rk[pb]) swap(pa, pb); // pa &gt; pb</span></span><br><span class=\"line\">        dsu[pb] = pa;</span><br><span class=\"line\">        rk[pa] += rk[pb];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">2</span> * n; i++) &#123;</span><br><span class=\"line\">        dsu[i] = i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt;= n) rk[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> rk[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> node, <span class=\"type\">int</span> prev, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node &lt;= n) &#123;</span><br><span class=\"line\">        ans[node] = val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [c, w] : graph[node]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c == prev) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(c, node, <span class=\"built_in\">madd</span>(val, w));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>(n);</span><br><span class=\"line\">    <span class=\"type\">int</span> idx = n + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a, b;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">        <span class=\"type\">int</span> node_a = <span class=\"built_in\">find</span>(a);</span><br><span class=\"line\">        <span class=\"type\">int</span> node_b = <span class=\"built_in\">find</span>(b);</span><br><span class=\"line\">        graph[idx].<span class=\"built_in\">pb</span>(&#123;node_a, <span class=\"built_in\">mdiv</span>(rk[node_a], rk[node_a] + rk[node_b])&#125;);</span><br><span class=\"line\">        graph[idx].<span class=\"built_in\">pb</span>(&#123;node_b, <span class=\"built_in\">mdiv</span>(rk[node_b], rk[node_a] + rk[node_b])&#125;);</span><br><span class=\"line\">        <span class=\"built_in\">modify</span>(node_a, node_b);</span><br><span class=\"line\">        <span class=\"built_in\">modify</span>(idx, node_a);</span><br><span class=\"line\">        idx += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(idx - <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        cout &lt;&lt; ans[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mtext>mod</mtext><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog(\\text{mod}))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> (due to mod division which is equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mtext>mod</mtext><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">log(\\text{mod})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mclose\">)</span></span></span></span>)</p>\n<h2 id=\"cf-round-892-div-2\"><a href=\"https://codeforces.com/contest/1859\">CF round 892 (Div. 2)</a></h2>\n<p>This was an pretty usual contest, and I got -25… sad. Im really not good at combating stress, so I got WA on pA unfortunately, and I didn’t solve pD in contest.<br>\npC was not a really good question imo. I got a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>4</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^4)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> that got TLE and is stumped me for a bit.<br>\nBut I got another idea: I precomputed all the answers (as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> was quite small), and actually AC’d it! amazing!<br>\nthe pD from this contest was pretty nice, maybe I’ll make an editorial later on I guess (Im lazy haha)</p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>Well, I was todays year old when I found out you can’t register a contest 5 minutes beforehand… I guess I’ll vir it tomorrow then.</p>\n<p>I did two contest on 8/12, and they were both really interesting!</p>\n<h2 id=\"abc-314\"><a href=\"https://atcoder.jp/contests/abc314\">ABC 314</a></h2>\n<p>Solve: 4/8</p>\n<p>I haven’t done atcoder contests for a while now, and I honestly didn’t do as well as I expected. A to D were pretty standard atcoder problems, so I’ll skip them.<br>\nE was a question about like probability expectation but weirdly, I still can’t understand the question even now.<br>\nF was is really good question that I wasn’t able to solve it in-contest but upsolved later. The statement is pretty clear so I’ll skip it.<br>\nThe idea here is the matches form a tree with the probabilities as the edge’s weight.</p>\n<p><img src=\"https://img.atcoder.jp/abc314/98f0c3212584232f0fda47c6f40ae1bf.png\" alt=\"probability tree\"></p>\n<p>We can then dfs to get the sum of probabilities which is the expectation for the nodes.<br>\nTo build this tree, we can use DSU to maintain the status of belonged groups. (We can’t use union by rank though because the parent needs to be the biggest indexed one)</p>\n<p>Code</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> MAXN = <span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod = <span class=\"number\">998244353</span>;</span><br><span class=\"line\"><span class=\"type\">int</span> dsu[MAXN * <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"type\">int</span> rk[MAXN * <span class=\"number\">2</span>];</span><br><span class=\"line\">vector&lt;pii&gt; graph[MAXN * <span class=\"number\">2</span>];</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">ans</span><span class=\"params\">(MAXN)</span></span>;</span><br><span class=\"line\"><span class=\"type\">int</span> n;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mabs</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a % mod + mod) % mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mmul</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mabs</span>((a % mod)*(b % mod));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">madd</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123; <span class=\"comment\">// a + b</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mabs</span>(a % mod + b % mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mmin</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123; <span class=\"comment\">// a - b</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mabs</span>(a % mod - b % mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">fastpow</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> n)</span> </span>&#123; <span class=\"comment\">// calculate a^n % mod</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> half = <span class=\"built_in\">fastpow</span>(a, n / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">mmul</span>(<span class=\"built_in\">mmul</span>(half, half), a);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">mmul</span>(half, half);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mdiv</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123; <span class=\"comment\">// (a / b) % mod</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mmul</span>(a, <span class=\"built_in\">fastpow</span>(b, mod - <span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">find</span><span class=\"params\">(<span class=\"type\">int</span> x)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dsu[x] == x ? x : dsu[x] = <span class=\"built_in\">find</span>(dsu[x]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">modify</span><span class=\"params\">(<span class=\"type\">int</span> x,<span class=\"type\">int</span> y)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> pa = <span class=\"built_in\">find</span>(x);</span><br><span class=\"line\">    <span class=\"type\">int</span> pb = <span class=\"built_in\">find</span>(y);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(pa != pb) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// if(rk[pa] &lt; rk[pb]) swap(pa, pb); // pa &gt; pb</span></span><br><span class=\"line\">        dsu[pb] = pa;</span><br><span class=\"line\">        rk[pa] += rk[pb];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">init</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">2</span> * n; i++) &#123;</span><br><span class=\"line\">        dsu[i] = i;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i &lt;= n) rk[i] = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> rk[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> node, <span class=\"type\">int</span> prev, <span class=\"type\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(node &lt;= n) &#123;</span><br><span class=\"line\">        ans[node] = val;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [c, w] : graph[node]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(c == prev) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"built_in\">dfs</span>(c, node, <span class=\"built_in\">madd</span>(val, w));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"built_in\">init</span>(n);</span><br><span class=\"line\">    <span class=\"type\">int</span> idx = n + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a, b;</span><br><span class=\"line\">        cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">        <span class=\"type\">int</span> node_a = <span class=\"built_in\">find</span>(a);</span><br><span class=\"line\">        <span class=\"type\">int</span> node_b = <span class=\"built_in\">find</span>(b);</span><br><span class=\"line\">        graph[idx].<span class=\"built_in\">pb</span>(&#123;node_a, <span class=\"built_in\">mdiv</span>(rk[node_a], rk[node_a] + rk[node_b])&#125;);</span><br><span class=\"line\">        graph[idx].<span class=\"built_in\">pb</span>(&#123;node_b, <span class=\"built_in\">mdiv</span>(rk[node_b], rk[node_a] + rk[node_b])&#125;);</span><br><span class=\"line\">        <span class=\"built_in\">modify</span>(node_a, node_b);</span><br><span class=\"line\">        <span class=\"built_in\">modify</span>(idx, node_a);</span><br><span class=\"line\">        idx += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(idx - <span class=\"number\">1</span>, <span class=\"number\">-1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        cout &lt;&lt; ans[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mtext>mod</mtext><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlog(\\text{mod}))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span> (due to mod division which is equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mtext>mod</mtext><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">log(\\text{mod})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mclose\">)</span></span></span></span>)</p>\n<h2 id=\"cf-round-892-div-2\"><a href=\"https://codeforces.com/contest/1859\">CF round 892 (Div. 2)</a></h2>\n<p>This was an pretty usual contest, and I got -25… sad. Im really not good at combating stress, so I got WA on pA unfortunately, and I didn’t solve pD in contest.<br>\npC was not a really good question imo. I got a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>4</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^4)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> that got TLE and is stumped me for a bit.<br>\nBut I got another idea: I precomputed all the answers (as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> was quite small), and actually AC’d it! amazing!<br>\nthe pD from this contest was pretty nice, maybe I’ll make an editorial later on I guess (Im lazy haha)</p>\n"},{"title":"End of Freshman Year","date":"2024-05-15T01:35:14.000Z","_content":"Time flies! Can't believe it's already been a year since I graduated high school, and I already finished my first year in university.\n\nI still remember back then I was so hopeless because I got rejected by Cornell or UIUC, and instead had to come to a university I just found out during college application, but everything seems to be alright now, and even better then I would ever expect!\n\nAnyways, this blog is to revise what I did in freshman year, and some hopes for my sophomore year.\n\n# Academics\n\nI would give myself a 9/10 for my academic performance. I was able to secure 4.0/4.0 on both semesters, and I aced honor linear algebra, getting more than 100 on the final grade (Since I got a 3 point bonus question right in the first midterm). I also did really well in the graduate machine learning course, although that class was more of a weird fever dream..\n\nSomething I think I could've done better was to challenge myself academically more in the first semester. The classes I chose were all extremely easy, and I basically didn't go to any classes.\n\n# Social\n\nI think a 7/10 is fair. I definitely could've been more proactive in this part, but my introvert ahh ass just couldn't. I really hoped that I could know more about the folks in the UPL, as they seem pretty chill.\n\nBut I think I did try socializing more than I expect, and I got alot of great friends that are kind and willing to help me grow.\n\n# Competitive Programming\n\nWell, I would give myself a 3/10 in CP. I have basically given up on it at this point since I think I am more passionate in ML/AI stuff than CP. Although obtaining this skill does help a lot in algorithmic thinking, and I had alot of fun doing ICPC and Hacker Cup.\n\n# Research\n\nI would say 7/10. The two main researches I did in freshman is the UDA on Maps from Academia Sinica and LLM knowledge from Skunkworks. \n\nFor the first one, we are currently under review, so it's done for now. The latter one is more of a joke, although this oppurtunity did led me to some valuble friends I would say.\n\n# Summary for Freshman Year\n\nI would give my freshman year an 8/10. I am quite satisfied with what I accomplished, especially in terms of academics. I think the biggest transformation for me is that I'm confident in myself and can think positively, thinking life is amazing. I hope I can keep this passion and mentality throughout my whole life.\n\n# Wishes and Goals for Sophomore Year\n\nI do have quite some wishes and goals for my second year in university. Some are simple, while some are ambitious. I will try my best to do them! (Difficulty not sorted)\n\n1. Maintain 4.0: My goal is to maintain 4.0 throughout my whole undergraduate years. I will be pursuing a double major in cs + math though, and math will definitely be challenging to get straight As.\n\n2. Obtain sophomore research fellowship: This is a scholarship that is awarded to sophomores that conducts research. It is pretty competitive, but two of my closest friends have it, and I hope to get it as well.\n\n3. Obtain a national level scholarship: It is doable (I talked to a Barry Goldwater recipent a couple days ago that is also a sophomore, and works with the professor I will be working with next semester), but this is perhaps one of the most challenging ones in this list.\n\n4. Get an internship: If possible a ML research-oriented internship. I've always wanted to try out industry positions, and this would be a good timing to do so.\n\n5. Start investing: This is something I've always wanted to do, but failed to dedicate myself into doing, and I think knowing how to keep and accumulate your money is an important skill.\n\n6. Workout: Well, I'm not saying to become a powerlifter or something like that, but I hope I can at least workout regularly to be healthy.\n\n7. Publish 5 papers: This sounds a bit crazy (I don't even have my first one yet lol), but I think it is doable, since I will do an REU in summer, and after finishing my work in Academia Sinica I could ask for a new research, plus I will work with a professor next semester. The point is, I hope the research I will do is more of a fundamental type research, and not just implementing a method on a subject type research.\n\n8. Be confident and love yourself: You can do it! :D","source":"_posts/End-of-Freshman-Year.md","raw":"---\ntitle: End of Freshman Year\ndate: 2024-05-14 20:35:14\ntags: [\"Life\"]\n---\nTime flies! Can't believe it's already been a year since I graduated high school, and I already finished my first year in university.\n\nI still remember back then I was so hopeless because I got rejected by Cornell or UIUC, and instead had to come to a university I just found out during college application, but everything seems to be alright now, and even better then I would ever expect!\n\nAnyways, this blog is to revise what I did in freshman year, and some hopes for my sophomore year.\n\n# Academics\n\nI would give myself a 9/10 for my academic performance. I was able to secure 4.0/4.0 on both semesters, and I aced honor linear algebra, getting more than 100 on the final grade (Since I got a 3 point bonus question right in the first midterm). I also did really well in the graduate machine learning course, although that class was more of a weird fever dream..\n\nSomething I think I could've done better was to challenge myself academically more in the first semester. The classes I chose were all extremely easy, and I basically didn't go to any classes.\n\n# Social\n\nI think a 7/10 is fair. I definitely could've been more proactive in this part, but my introvert ahh ass just couldn't. I really hoped that I could know more about the folks in the UPL, as they seem pretty chill.\n\nBut I think I did try socializing more than I expect, and I got alot of great friends that are kind and willing to help me grow.\n\n# Competitive Programming\n\nWell, I would give myself a 3/10 in CP. I have basically given up on it at this point since I think I am more passionate in ML/AI stuff than CP. Although obtaining this skill does help a lot in algorithmic thinking, and I had alot of fun doing ICPC and Hacker Cup.\n\n# Research\n\nI would say 7/10. The two main researches I did in freshman is the UDA on Maps from Academia Sinica and LLM knowledge from Skunkworks. \n\nFor the first one, we are currently under review, so it's done for now. The latter one is more of a joke, although this oppurtunity did led me to some valuble friends I would say.\n\n# Summary for Freshman Year\n\nI would give my freshman year an 8/10. I am quite satisfied with what I accomplished, especially in terms of academics. I think the biggest transformation for me is that I'm confident in myself and can think positively, thinking life is amazing. I hope I can keep this passion and mentality throughout my whole life.\n\n# Wishes and Goals for Sophomore Year\n\nI do have quite some wishes and goals for my second year in university. Some are simple, while some are ambitious. I will try my best to do them! (Difficulty not sorted)\n\n1. Maintain 4.0: My goal is to maintain 4.0 throughout my whole undergraduate years. I will be pursuing a double major in cs + math though, and math will definitely be challenging to get straight As.\n\n2. Obtain sophomore research fellowship: This is a scholarship that is awarded to sophomores that conducts research. It is pretty competitive, but two of my closest friends have it, and I hope to get it as well.\n\n3. Obtain a national level scholarship: It is doable (I talked to a Barry Goldwater recipent a couple days ago that is also a sophomore, and works with the professor I will be working with next semester), but this is perhaps one of the most challenging ones in this list.\n\n4. Get an internship: If possible a ML research-oriented internship. I've always wanted to try out industry positions, and this would be a good timing to do so.\n\n5. Start investing: This is something I've always wanted to do, but failed to dedicate myself into doing, and I think knowing how to keep and accumulate your money is an important skill.\n\n6. Workout: Well, I'm not saying to become a powerlifter or something like that, but I hope I can at least workout regularly to be healthy.\n\n7. Publish 5 papers: This sounds a bit crazy (I don't even have my first one yet lol), but I think it is doable, since I will do an REU in summer, and after finishing my work in Academia Sinica I could ask for a new research, plus I will work with a professor next semester. The point is, I hope the research I will do is more of a fundamental type research, and not just implementing a method on a subject type research.\n\n8. Be confident and love yourself: You can do it! :D","slug":"End-of-Freshman-Year","published":1,"updated":"2024-12-26T01:29:58.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblgr0008b0u9g8iebbcq","content":"<p>Time flies! Can’t believe it’s already been a year since I graduated high school, and I already finished my first year in university.</p>\n<p>I still remember back then I was so hopeless because I got rejected by Cornell or UIUC, and instead had to come to a university I just found out during college application, but everything seems to be alright now, and even better then I would ever expect!</p>\n<p>Anyways, this blog is to revise what I did in freshman year, and some hopes for my sophomore year.</p>\n<h1 id=\"academics\">Academics</h1>\n<p>I would give myself a 9/10 for my academic performance. I was able to secure 4.0/4.0 on both semesters, and I aced honor linear algebra, getting more than 100 on the final grade (Since I got a 3 point bonus question right in the first midterm). I also did really well in the graduate machine learning course, although that class was more of a weird fever dream…</p>\n<p>Something I think I could’ve done better was to challenge myself academically more in the first semester. The classes I chose were all extremely easy, and I basically didn’t go to any classes.</p>\n<h1 id=\"social\">Social</h1>\n<p>I think a 7/10 is fair. I definitely could’ve been more proactive in this part, but my introvert ahh ass just couldn’t. I really hoped that I could know more about the folks in the UPL, as they seem pretty chill.</p>\n<p>But I think I did try socializing more than I expect, and I got alot of great friends that are kind and willing to help me grow.</p>\n<h1 id=\"competitive-programming\">Competitive Programming</h1>\n<p>Well, I would give myself a 3/10 in CP. I have basically given up on it at this point since I think I am more passionate in ML/AI stuff than CP. Although obtaining this skill does help a lot in algorithmic thinking, and I had alot of fun doing ICPC and Hacker Cup.</p>\n<h1 id=\"research\">Research</h1>\n<p>I would say 7/10. The two main researches I did in freshman is the UDA on Maps from Academia Sinica and LLM knowledge from Skunkworks.</p>\n<p>For the first one, we are currently under review, so it’s done for now. The latter one is more of a joke, although this oppurtunity did led me to some valuble friends I would say.</p>\n<h1 id=\"summary-for-freshman-year\">Summary for Freshman Year</h1>\n<p>I would give my freshman year an 8/10. I am quite satisfied with what I accomplished, especially in terms of academics. I think the biggest transformation for me is that I’m confident in myself and can think positively, thinking life is amazing. I hope I can keep this passion and mentality throughout my whole life.</p>\n<h1 id=\"wishes-and-goals-for-sophomore-year\">Wishes and Goals for Sophomore Year</h1>\n<p>I do have quite some wishes and goals for my second year in university. Some are simple, while some are ambitious. I will try my best to do them! (Difficulty not sorted)</p>\n<ol>\n<li>\n<p>Maintain 4.0: My goal is to maintain 4.0 throughout my whole undergraduate years. I will be pursuing a double major in cs + math though, and math will definitely be challenging to get straight As.</p>\n</li>\n<li>\n<p>Obtain sophomore research fellowship: This is a scholarship that is awarded to sophomores that conducts research. It is pretty competitive, but two of my closest friends have it, and I hope to get it as well.</p>\n</li>\n<li>\n<p>Obtain a national level scholarship: It is doable (I talked to a Barry Goldwater recipent a couple days ago that is also a sophomore, and works with the professor I will be working with next semester), but this is perhaps one of the most challenging ones in this list.</p>\n</li>\n<li>\n<p>Get an internship: If possible a ML research-oriented internship. I’ve always wanted to try out industry positions, and this would be a good timing to do so.</p>\n</li>\n<li>\n<p>Start investing: This is something I’ve always wanted to do, but failed to dedicate myself into doing, and I think knowing how to keep and accumulate your money is an important skill.</p>\n</li>\n<li>\n<p>Workout: Well, I’m not saying to become a powerlifter or something like that, but I hope I can at least workout regularly to be healthy.</p>\n</li>\n<li>\n<p>Publish 5 papers: This sounds a bit crazy (I don’t even have my first one yet lol), but I think it is doable, since I will do an REU in summer, and after finishing my work in Academia Sinica I could ask for a new research, plus I will work with a professor next semester. The point is, I hope the research I will do is more of a fundamental type research, and not just implementing a method on a subject type research.</p>\n</li>\n<li>\n<p>Be confident and love yourself: You can do it! :D</p>\n</li>\n</ol>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>Time flies! Can’t believe it’s already been a year since I graduated high school, and I already finished my first year in university.</p>\n<p>I still remember back then I was so hopeless because I got rejected by Cornell or UIUC, and instead had to come to a university I just found out during college application, but everything seems to be alright now, and even better then I would ever expect!</p>\n<p>Anyways, this blog is to revise what I did in freshman year, and some hopes for my sophomore year.</p>\n<h1 id=\"academics\">Academics</h1>\n<p>I would give myself a 9/10 for my academic performance. I was able to secure 4.0/4.0 on both semesters, and I aced honor linear algebra, getting more than 100 on the final grade (Since I got a 3 point bonus question right in the first midterm). I also did really well in the graduate machine learning course, although that class was more of a weird fever dream…</p>\n<p>Something I think I could’ve done better was to challenge myself academically more in the first semester. The classes I chose were all extremely easy, and I basically didn’t go to any classes.</p>\n<h1 id=\"social\">Social</h1>\n<p>I think a 7/10 is fair. I definitely could’ve been more proactive in this part, but my introvert ahh ass just couldn’t. I really hoped that I could know more about the folks in the UPL, as they seem pretty chill.</p>\n<p>But I think I did try socializing more than I expect, and I got alot of great friends that are kind and willing to help me grow.</p>\n<h1 id=\"competitive-programming\">Competitive Programming</h1>\n<p>Well, I would give myself a 3/10 in CP. I have basically given up on it at this point since I think I am more passionate in ML/AI stuff than CP. Although obtaining this skill does help a lot in algorithmic thinking, and I had alot of fun doing ICPC and Hacker Cup.</p>\n<h1 id=\"research\">Research</h1>\n<p>I would say 7/10. The two main researches I did in freshman is the UDA on Maps from Academia Sinica and LLM knowledge from Skunkworks.</p>\n<p>For the first one, we are currently under review, so it’s done for now. The latter one is more of a joke, although this oppurtunity did led me to some valuble friends I would say.</p>\n<h1 id=\"summary-for-freshman-year\">Summary for Freshman Year</h1>\n<p>I would give my freshman year an 8/10. I am quite satisfied with what I accomplished, especially in terms of academics. I think the biggest transformation for me is that I’m confident in myself and can think positively, thinking life is amazing. I hope I can keep this passion and mentality throughout my whole life.</p>\n<h1 id=\"wishes-and-goals-for-sophomore-year\">Wishes and Goals for Sophomore Year</h1>\n<p>I do have quite some wishes and goals for my second year in university. Some are simple, while some are ambitious. I will try my best to do them! (Difficulty not sorted)</p>\n<ol>\n<li>\n<p>Maintain 4.0: My goal is to maintain 4.0 throughout my whole undergraduate years. I will be pursuing a double major in cs + math though, and math will definitely be challenging to get straight As.</p>\n</li>\n<li>\n<p>Obtain sophomore research fellowship: This is a scholarship that is awarded to sophomores that conducts research. It is pretty competitive, but two of my closest friends have it, and I hope to get it as well.</p>\n</li>\n<li>\n<p>Obtain a national level scholarship: It is doable (I talked to a Barry Goldwater recipent a couple days ago that is also a sophomore, and works with the professor I will be working with next semester), but this is perhaps one of the most challenging ones in this list.</p>\n</li>\n<li>\n<p>Get an internship: If possible a ML research-oriented internship. I’ve always wanted to try out industry positions, and this would be a good timing to do so.</p>\n</li>\n<li>\n<p>Start investing: This is something I’ve always wanted to do, but failed to dedicate myself into doing, and I think knowing how to keep and accumulate your money is an important skill.</p>\n</li>\n<li>\n<p>Workout: Well, I’m not saying to become a powerlifter or something like that, but I hope I can at least workout regularly to be healthy.</p>\n</li>\n<li>\n<p>Publish 5 papers: This sounds a bit crazy (I don’t even have my first one yet lol), but I think it is doable, since I will do an REU in summer, and after finishing my work in Academia Sinica I could ask for a new research, plus I will work with a professor next semester. The point is, I hope the research I will do is more of a fundamental type research, and not just implementing a method on a subject type research.</p>\n</li>\n<li>\n<p>Be confident and love yourself: You can do it! :D</p>\n</li>\n</ol>\n"},{"title":"End of 2023 + New Year's Resolution","date":"2023-12-30T17:00:58.000Z","_content":"\nHey guys, sorry for not updating in a while, just couldn't really find the time or put in the effort to type a new blog TMT\n\nWell uh I'll talk about ICPC first.\n\nUnfortunately, we got 3rd place in regionals, but because first place was also from our school, we couldn't qualify for NAC.\n\nNot gonna lie, its kind of my fault that I'm way too weak compared to my teammates, they definitely deserve to get in NAC, and I kind of pulled them back. Sorry Boying, I wasted your last chance in ICPC.\n\nAfter that I kind of shifted my focus to other things, and only started doing contests again recently, although I'm not doing really well in terms of performance, losing rating 7 rounds in a row. It's honestly pretty heart breaking but I also think this is not a bad thing, because I can really focus on experiencing the contests and making myself stronger, compared to skipping contests because of being afraid to lose rating.\n\nIn terms of academics, I am actually doing quite well. I finished the first semester with all A's quite easily and qualified for dean's list. I felt that my course load was really light this sememster though, so I will make it more challenging next semester. I also kind of want to double major in math, which is mindblowing if you told this to me half a year ago, as I am horrible at math and was literally rejected by every college because of it. But I actually find it quite interesting now when the problems aren't just trick math, and I think that math is very important so I should try my best to learn more. I'm self-studying calc 2 and 3 in this winter break now in hopes to skip them when the semester starts, we will see how it goes ;)\n\nI also attended by first hackathon—MadHacks. It was an interesting experience, and I got alot of different t-shirts and accessories.\n\n![stuff](stuff.png)\n\nIts a very excruciating experience though, I didn't sleep for like 30 hours and it was super exhausting, we didn't even wait till the ceremony and I went back to sleep. It turned out that we actually won a google backpack and it is pretty nice!\n\n2023 Was a really interesting year, I initally was really sad that I didn't get into prestigous schools like Cornell or UIUC, but after this semester, I'm actually quite glad that I went to UW Madison and met so many wonderful people!\n\nOK, now for my new year's resolution:\n\n1. Maintain 4.0 GPA\n2. Double Major in CS + MATH\n3. Doing at least 5 problems everyday on CF\n4. CF Master (or at least CM)\n5. Qualify for NAC\n6. Get Research\n7. Get Internship\n\nI hope 2024 will be a great year, and that I can have an epic comeback and become a better person than before!\n\n![comeback](comeback.png)\n\nHappy new year :D\n","source":"_posts/End-of-2023-New-Year-s-Resolution.md","raw":"---\ntitle: End of 2023 + New Year's Resolution\ndate: 2023-12-30 11:00:58\ntags: [\"Life\"]\n---\n\nHey guys, sorry for not updating in a while, just couldn't really find the time or put in the effort to type a new blog TMT\n\nWell uh I'll talk about ICPC first.\n\nUnfortunately, we got 3rd place in regionals, but because first place was also from our school, we couldn't qualify for NAC.\n\nNot gonna lie, its kind of my fault that I'm way too weak compared to my teammates, they definitely deserve to get in NAC, and I kind of pulled them back. Sorry Boying, I wasted your last chance in ICPC.\n\nAfter that I kind of shifted my focus to other things, and only started doing contests again recently, although I'm not doing really well in terms of performance, losing rating 7 rounds in a row. It's honestly pretty heart breaking but I also think this is not a bad thing, because I can really focus on experiencing the contests and making myself stronger, compared to skipping contests because of being afraid to lose rating.\n\nIn terms of academics, I am actually doing quite well. I finished the first semester with all A's quite easily and qualified for dean's list. I felt that my course load was really light this sememster though, so I will make it more challenging next semester. I also kind of want to double major in math, which is mindblowing if you told this to me half a year ago, as I am horrible at math and was literally rejected by every college because of it. But I actually find it quite interesting now when the problems aren't just trick math, and I think that math is very important so I should try my best to learn more. I'm self-studying calc 2 and 3 in this winter break now in hopes to skip them when the semester starts, we will see how it goes ;)\n\nI also attended by first hackathon—MadHacks. It was an interesting experience, and I got alot of different t-shirts and accessories.\n\n![stuff](stuff.png)\n\nIts a very excruciating experience though, I didn't sleep for like 30 hours and it was super exhausting, we didn't even wait till the ceremony and I went back to sleep. It turned out that we actually won a google backpack and it is pretty nice!\n\n2023 Was a really interesting year, I initally was really sad that I didn't get into prestigous schools like Cornell or UIUC, but after this semester, I'm actually quite glad that I went to UW Madison and met so many wonderful people!\n\nOK, now for my new year's resolution:\n\n1. Maintain 4.0 GPA\n2. Double Major in CS + MATH\n3. Doing at least 5 problems everyday on CF\n4. CF Master (or at least CM)\n5. Qualify for NAC\n6. Get Research\n7. Get Internship\n\nI hope 2024 will be a great year, and that I can have an epic comeback and become a better person than before!\n\n![comeback](comeback.png)\n\nHappy new year :D\n","slug":"End-of-2023-New-Year-s-Resolution","published":1,"updated":"2024-12-26T01:29:58.463Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblgs0009b0u9hiy65ivl","content":"<p>Hey guys, sorry for not updating in a while, just couldn’t really find the time or put in the effort to type a new blog TMT</p>\n<p>Well uh I’ll talk about ICPC first.</p>\n<p>Unfortunately, we got 3rd place in regionals, but because first place was also from our school, we couldn’t qualify for NAC.</p>\n<p>Not gonna lie, its kind of my fault that I’m way too weak compared to my teammates, they definitely deserve to get in NAC, and I kind of pulled them back. Sorry Boying, I wasted your last chance in ICPC.</p>\n<p>After that I kind of shifted my focus to other things, and only started doing contests again recently, although I’m not doing really well in terms of performance, losing rating 7 rounds in a row. It’s honestly pretty heart breaking but I also think this is not a bad thing, because I can really focus on experiencing the contests and making myself stronger, compared to skipping contests because of being afraid to lose rating.</p>\n<p>In terms of academics, I am actually doing quite well. I finished the first semester with all A’s quite easily and qualified for dean’s list. I felt that my course load was really light this sememster though, so I will make it more challenging next semester. I also kind of want to double major in math, which is mindblowing if you told this to me half a year ago, as I am horrible at math and was literally rejected by every college because of it. But I actually find it quite interesting now when the problems aren’t just trick math, and I think that math is very important so I should try my best to learn more. I’m self-studying calc 2 and 3 in this winter break now in hopes to skip them when the semester starts, we will see how it goes ;)</p>\n<p>I also attended by first hackathon—MadHacks. It was an interesting experience, and I got alot of different t-shirts and accessories.</p>\n<p><img src=\"stuff.png\" alt=\"stuff\"></p>\n<p>Its a very excruciating experience though, I didn’t sleep for like 30 hours and it was super exhausting, we didn’t even wait till the ceremony and I went back to sleep. It turned out that we actually won a google backpack and it is pretty nice!</p>\n<p>2023 Was a really interesting year, I initally was really sad that I didn’t get into prestigous schools like Cornell or UIUC, but after this semester, I’m actually quite glad that I went to UW Madison and met so many wonderful people!</p>\n<p>OK, now for my new year’s resolution:</p>\n<ol>\n<li>Maintain 4.0 GPA</li>\n<li>Double Major in CS + MATH</li>\n<li>Doing at least 5 problems everyday on CF</li>\n<li>CF Master (or at least CM)</li>\n<li>Qualify for NAC</li>\n<li>Get Research</li>\n<li>Get Internship</li>\n</ol>\n<p>I hope 2024 will be a great year, and that I can have an epic comeback and become a better person than before!</p>\n<p><img src=\"comeback.png\" alt=\"comeback\"></p>\n<p>Happy new year :D</p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>Hey guys, sorry for not updating in a while, just couldn’t really find the time or put in the effort to type a new blog TMT</p>\n<p>Well uh I’ll talk about ICPC first.</p>\n<p>Unfortunately, we got 3rd place in regionals, but because first place was also from our school, we couldn’t qualify for NAC.</p>\n<p>Not gonna lie, its kind of my fault that I’m way too weak compared to my teammates, they definitely deserve to get in NAC, and I kind of pulled them back. Sorry Boying, I wasted your last chance in ICPC.</p>\n<p>After that I kind of shifted my focus to other things, and only started doing contests again recently, although I’m not doing really well in terms of performance, losing rating 7 rounds in a row. It’s honestly pretty heart breaking but I also think this is not a bad thing, because I can really focus on experiencing the contests and making myself stronger, compared to skipping contests because of being afraid to lose rating.</p>\n<p>In terms of academics, I am actually doing quite well. I finished the first semester with all A’s quite easily and qualified for dean’s list. I felt that my course load was really light this sememster though, so I will make it more challenging next semester. I also kind of want to double major in math, which is mindblowing if you told this to me half a year ago, as I am horrible at math and was literally rejected by every college because of it. But I actually find it quite interesting now when the problems aren’t just trick math, and I think that math is very important so I should try my best to learn more. I’m self-studying calc 2 and 3 in this winter break now in hopes to skip them when the semester starts, we will see how it goes ;)</p>\n<p>I also attended by first hackathon—MadHacks. It was an interesting experience, and I got alot of different t-shirts and accessories.</p>\n<p><img src=\"stuff.png\" alt=\"stuff\"></p>\n<p>Its a very excruciating experience though, I didn’t sleep for like 30 hours and it was super exhausting, we didn’t even wait till the ceremony and I went back to sleep. It turned out that we actually won a google backpack and it is pretty nice!</p>\n<p>2023 Was a really interesting year, I initally was really sad that I didn’t get into prestigous schools like Cornell or UIUC, but after this semester, I’m actually quite glad that I went to UW Madison and met so many wonderful people!</p>\n<p>OK, now for my new year’s resolution:</p>\n<ol>\n<li>Maintain 4.0 GPA</li>\n<li>Double Major in CS + MATH</li>\n<li>Doing at least 5 problems everyday on CF</li>\n<li>CF Master (or at least CM)</li>\n<li>Qualify for NAC</li>\n<li>Get Research</li>\n<li>Get Internship</li>\n</ol>\n<p>I hope 2024 will be a great year, and that I can have an epic comeback and become a better person than before!</p>\n<p><img src=\"comeback.png\" alt=\"comeback\"></p>\n<p>Happy new year :D</p>\n"},{"title":"End of 2024 + New Year's Resolution","date":"2025-01-01T07:08:15.000Z","_content":"Happy new year! :D\n\nThis year felt so short compared to before, maybe because im getting old, so time flows faster in perspective?\n\nWell, first things first, lets look at my previous new years resolution:\n\n1. ✓ Maintain 4.0 GPA: I was able to maintain a 4.0 in both semesters suprisingly easy. The math classes that I thought I would struggle like honor linear algebra or number theory didn't really pose that much of a threat to me, and I actually felt my load was quite managable most of the time!\n2. ✓ Double Major in CS + MATH: Ok, technically I haven't declared the math major because im lazy, but I was able to finish difficult math classes with ease, so I would say that this resolution is fulfilled :D\n3. ✗ Doing at least 5 problems everyday on CF: Well, I soon realized that doing competitive programming isn't really worth it, so I stopped doing it. \n4. ✗ CF Master (or at least CM): Same reason as above. Honestly, I think it's quite a shame that I wasn't able to get to a decently high rank, as I spent quite some time on competitive programming through my high school career. But its okay, as I still learned a lot from the experience.\n5. ✗ Qualify for NAC: Same as above.\n6. ✓ Get Research: Not only I did research, I also published a first author paper at 2024 IEEE Conference on Big Data! I think I haven't written a blog on that, but I should as it is one of the big achievements I did this year.\n7. ✓ Get Internship: I was able to secure a NSF Research Experience for Undergrad (REU) Research Internship at UW Eau-Claire. I have written a blog on that before so if you are interested go check it out! The research I did here was the one that I published and attended the conference.\n\nSo, it seems that apart from the ones about competitive programming, I was able to do all my previous resolutions! Yay!\n\nI would consider this year as a great success, rating it 95/100. I tried by best at a lot of stuff and they paid off, and even though I feel like I slacked of left and right sometimes, I'm still quite proud of my achievements.\n\nNow, let's write this the resolutions for this year:\n\n1. Maintain 4.0 GPA\n2. Build/Maintain a big scale open-source project\n3. Get a research scholarship\n4. Do more research\n5. Get an internship\n\nI actually can't think of that much interesting resolutions, as I feel like my life is already really nice right now. Again, happy new year guys!","source":"_posts/End-of-2024-New-Year-s-Resolution.md","raw":"---\ntitle: End of 2024 + New Year's Resolution\ndate: 2025-01-01 01:08:15\ntags: [\"Life\"]\n---\nHappy new year! :D\n\nThis year felt so short compared to before, maybe because im getting old, so time flows faster in perspective?\n\nWell, first things first, lets look at my previous new years resolution:\n\n1. ✓ Maintain 4.0 GPA: I was able to maintain a 4.0 in both semesters suprisingly easy. The math classes that I thought I would struggle like honor linear algebra or number theory didn't really pose that much of a threat to me, and I actually felt my load was quite managable most of the time!\n2. ✓ Double Major in CS + MATH: Ok, technically I haven't declared the math major because im lazy, but I was able to finish difficult math classes with ease, so I would say that this resolution is fulfilled :D\n3. ✗ Doing at least 5 problems everyday on CF: Well, I soon realized that doing competitive programming isn't really worth it, so I stopped doing it. \n4. ✗ CF Master (or at least CM): Same reason as above. Honestly, I think it's quite a shame that I wasn't able to get to a decently high rank, as I spent quite some time on competitive programming through my high school career. But its okay, as I still learned a lot from the experience.\n5. ✗ Qualify for NAC: Same as above.\n6. ✓ Get Research: Not only I did research, I also published a first author paper at 2024 IEEE Conference on Big Data! I think I haven't written a blog on that, but I should as it is one of the big achievements I did this year.\n7. ✓ Get Internship: I was able to secure a NSF Research Experience for Undergrad (REU) Research Internship at UW Eau-Claire. I have written a blog on that before so if you are interested go check it out! The research I did here was the one that I published and attended the conference.\n\nSo, it seems that apart from the ones about competitive programming, I was able to do all my previous resolutions! Yay!\n\nI would consider this year as a great success, rating it 95/100. I tried by best at a lot of stuff and they paid off, and even though I feel like I slacked of left and right sometimes, I'm still quite proud of my achievements.\n\nNow, let's write this the resolutions for this year:\n\n1. Maintain 4.0 GPA\n2. Build/Maintain a big scale open-source project\n3. Get a research scholarship\n4. Do more research\n5. Get an internship\n\nI actually can't think of that much interesting resolutions, as I feel like my life is already really nice right now. Again, happy new year guys!","slug":"End-of-2024-New-Year-s-Resolution","published":1,"updated":"2025-01-01T08:38:59.237Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblgu000cb0u94eh70r99","content":"<p>Happy new year! :D</p>\n<p>This year felt so short compared to before, maybe because im getting old, so time flows faster in perspective?</p>\n<p>Well, first things first, lets look at my previous new years resolution:</p>\n<ol>\n<li>✓ Maintain 4.0 GPA: I was able to maintain a 4.0 in both semesters suprisingly easy. The math classes that I thought I would struggle like honor linear algebra or number theory didn’t really pose that much of a threat to me, and I actually felt my load was quite managable most of the time!</li>\n<li>✓ Double Major in CS + MATH: Ok, technically I haven’t declared the math major because im lazy, but I was able to finish difficult math classes with ease, so I would say that this resolution is fulfilled :D</li>\n<li>✗ Doing at least 5 problems everyday on CF: Well, I soon realized that doing competitive programming isn’t really worth it, so I stopped doing it.</li>\n<li>✗ CF Master (or at least CM): Same reason as above. Honestly, I think it’s quite a shame that I wasn’t able to get to a decently high rank, as I spent quite some time on competitive programming through my high school career. But its okay, as I still learned a lot from the experience.</li>\n<li>✗ Qualify for NAC: Same as above.</li>\n<li>✓ Get Research: Not only I did research, I also published a first author paper at 2024 IEEE Conference on Big Data! I think I haven’t written a blog on that, but I should as it is one of the big achievements I did this year.</li>\n<li>✓ Get Internship: I was able to secure a NSF Research Experience for Undergrad (REU) Research Internship at UW Eau-Claire. I have written a blog on that before so if you are interested go check it out! The research I did here was the one that I published and attended the conference.</li>\n</ol>\n<p>So, it seems that apart from the ones about competitive programming, I was able to do all my previous resolutions! Yay!</p>\n<p>I would consider this year as a great success, rating it 95/100. I tried by best at a lot of stuff and they paid off, and even though I feel like I slacked of left and right sometimes, I’m still quite proud of my achievements.</p>\n<p>Now, let’s write this the resolutions for this year:</p>\n<ol>\n<li>Maintain 4.0 GPA</li>\n<li>Build/Maintain a big scale open-source project</li>\n<li>Get a research scholarship</li>\n<li>Do more research</li>\n<li>Get an internship</li>\n</ol>\n<p>I actually can’t think of that much interesting resolutions, as I feel like my life is already really nice right now. Again, happy new year guys!</p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>Happy new year! :D</p>\n<p>This year felt so short compared to before, maybe because im getting old, so time flows faster in perspective?</p>\n<p>Well, first things first, lets look at my previous new years resolution:</p>\n<ol>\n<li>✓ Maintain 4.0 GPA: I was able to maintain a 4.0 in both semesters suprisingly easy. The math classes that I thought I would struggle like honor linear algebra or number theory didn’t really pose that much of a threat to me, and I actually felt my load was quite managable most of the time!</li>\n<li>✓ Double Major in CS + MATH: Ok, technically I haven’t declared the math major because im lazy, but I was able to finish difficult math classes with ease, so I would say that this resolution is fulfilled :D</li>\n<li>✗ Doing at least 5 problems everyday on CF: Well, I soon realized that doing competitive programming isn’t really worth it, so I stopped doing it.</li>\n<li>✗ CF Master (or at least CM): Same reason as above. Honestly, I think it’s quite a shame that I wasn’t able to get to a decently high rank, as I spent quite some time on competitive programming through my high school career. But its okay, as I still learned a lot from the experience.</li>\n<li>✗ Qualify for NAC: Same as above.</li>\n<li>✓ Get Research: Not only I did research, I also published a first author paper at 2024 IEEE Conference on Big Data! I think I haven’t written a blog on that, but I should as it is one of the big achievements I did this year.</li>\n<li>✓ Get Internship: I was able to secure a NSF Research Experience for Undergrad (REU) Research Internship at UW Eau-Claire. I have written a blog on that before so if you are interested go check it out! The research I did here was the one that I published and attended the conference.</li>\n</ol>\n<p>So, it seems that apart from the ones about competitive programming, I was able to do all my previous resolutions! Yay!</p>\n<p>I would consider this year as a great success, rating it 95/100. I tried by best at a lot of stuff and they paid off, and even though I feel like I slacked of left and right sometimes, I’m still quite proud of my achievements.</p>\n<p>Now, let’s write this the resolutions for this year:</p>\n<ol>\n<li>Maintain 4.0 GPA</li>\n<li>Build/Maintain a big scale open-source project</li>\n<li>Get a research scholarship</li>\n<li>Do more research</li>\n<li>Get an internship</li>\n</ol>\n<p>I actually can’t think of that much interesting resolutions, as I feel like my life is already really nice right now. Again, happy new year guys!</p>\n"},{"title":"ICPC Practice 1: ECNA 2018 & NCNA 2019","date":"2023-10-15T23:12:41.000Z","_content":"Our team is starting to practice for the regionals, so this is just a documentary of our performances.\n\n## [2018 East Central NA Regional Contest](https://ecna18.kattis.com/contests/ecna18)\n\nVirtual Rank: 5\n\nThis contest was extremely tedious and annoying. Most problems are really easy, but extremely implementation heavy. It was so bad that we actually just gave up and went to get food after the fourth hour.\nI really hope our regional wouldn't look like this, or else I might cry haha.\n\n## [2019 North Central NA Regional Contest](https://ncna19.kattis.com/contests/ncna19)\n\nSolved: 11/11\nVirtual Rank: 1\n\nThis is the contest that we just did today. Because it was a previous year of our region, so we did our best, and we AK'd the contest with twenty minutes left, which no other team did!\n\nI personally solved pJ (solve rate 46%), pF (solve rate 16%), and pA (solve rate 4%).\npJ was a really simple brute force check problem, but I was not familiar with compiling the code without code runner and debugging without my debug template, so I actually spent quite some time getting used to it.\npJ is also a pretty easy one in my opinion, but because of some silly mistake, I got 3 WA on it, which I am really ashamed of.\npA is a interesting one, the original teammate (who solved the final problem that nobody else solved in the contest) had no idea, and I actually identified that it's just a classic computational geometry problem: Minimum Enclosing Circle, so I one-shotted it with the powerful template I have.\n\nApart from a few problems, the contest isn't hard at all. A teammate of mine even said that \"Wow, this contest is so easy!\". (Although alot of problems still seem too out of reach for me).\n\nWe acutally solved our last three problems in a span of 40 minutes, one of which is the one nobody solved, so we were pretty excited about that.\n\nI learned that I need to try one-shotting the problems and actually code after you are fully sure about the implementation and idea, or else you will become a burden in the team because you are wasting precious time by occupying the computer. I will contiunue to train this part and I hope we can be as successful (or even more) in the regionals!\n","source":"_posts/ICPC-Practice-1-ECNA-2018-NCNA-2019.md","raw":"---\ntitle: 'ICPC Practice 1: ECNA 2018 & NCNA 2019'\ndate: 2023-10-15 18:12:41\ntags: [\"CP\"]\n---\nOur team is starting to practice for the regionals, so this is just a documentary of our performances.\n\n## [2018 East Central NA Regional Contest](https://ecna18.kattis.com/contests/ecna18)\n\nVirtual Rank: 5\n\nThis contest was extremely tedious and annoying. Most problems are really easy, but extremely implementation heavy. It was so bad that we actually just gave up and went to get food after the fourth hour.\nI really hope our regional wouldn't look like this, or else I might cry haha.\n\n## [2019 North Central NA Regional Contest](https://ncna19.kattis.com/contests/ncna19)\n\nSolved: 11/11\nVirtual Rank: 1\n\nThis is the contest that we just did today. Because it was a previous year of our region, so we did our best, and we AK'd the contest with twenty minutes left, which no other team did!\n\nI personally solved pJ (solve rate 46%), pF (solve rate 16%), and pA (solve rate 4%).\npJ was a really simple brute force check problem, but I was not familiar with compiling the code without code runner and debugging without my debug template, so I actually spent quite some time getting used to it.\npJ is also a pretty easy one in my opinion, but because of some silly mistake, I got 3 WA on it, which I am really ashamed of.\npA is a interesting one, the original teammate (who solved the final problem that nobody else solved in the contest) had no idea, and I actually identified that it's just a classic computational geometry problem: Minimum Enclosing Circle, so I one-shotted it with the powerful template I have.\n\nApart from a few problems, the contest isn't hard at all. A teammate of mine even said that \"Wow, this contest is so easy!\". (Although alot of problems still seem too out of reach for me).\n\nWe acutally solved our last three problems in a span of 40 minutes, one of which is the one nobody solved, so we were pretty excited about that.\n\nI learned that I need to try one-shotting the problems and actually code after you are fully sure about the implementation and idea, or else you will become a burden in the team because you are wasting precious time by occupying the computer. I will contiunue to train this part and I hope we can be as successful (or even more) in the regionals!\n","slug":"ICPC-Practice-1-ECNA-2018-NCNA-2019","published":1,"updated":"2024-12-26T01:29:58.471Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblgv000eb0u95p8g3pxp","content":"<p>Our team is starting to practice for the regionals, so this is just a documentary of our performances.</p>\n<h2 id=\"2018-east-central-na-regional-contest\"><a href=\"https://ecna18.kattis.com/contests/ecna18\">2018 East Central NA Regional Contest</a></h2>\n<p>Virtual Rank: 5</p>\n<p>This contest was extremely tedious and annoying. Most problems are really easy, but extremely implementation heavy. It was so bad that we actually just gave up and went to get food after the fourth hour.<br>\nI really hope our regional wouldn’t look like this, or else I might cry haha.</p>\n<h2 id=\"2019-north-central-na-regional-contest\"><a href=\"https://ncna19.kattis.com/contests/ncna19\">2019 North Central NA Regional Contest</a></h2>\n<p>Solved: 11/11<br>\nVirtual Rank: 1</p>\n<p>This is the contest that we just did today. Because it was a previous year of our region, so we did our best, and we AK’d the contest with twenty minutes left, which no other team did!</p>\n<p>I personally solved pJ (solve rate 46%), pF (solve rate 16%), and pA (solve rate 4%).<br>\npJ was a really simple brute force check problem, but I was not familiar with compiling the code without code runner and debugging without my debug template, so I actually spent quite some time getting used to it.<br>\npJ is also a pretty easy one in my opinion, but because of some silly mistake, I got 3 WA on it, which I am really ashamed of.<br>\npA is a interesting one, the original teammate (who solved the final problem that nobody else solved in the contest) had no idea, and I actually identified that it’s just a classic computational geometry problem: Minimum Enclosing Circle, so I one-shotted it with the powerful template I have.</p>\n<p>Apart from a few problems, the contest isn’t hard at all. A teammate of mine even said that “Wow, this contest is so easy!”. (Although alot of problems still seem too out of reach for me).</p>\n<p>We acutally solved our last three problems in a span of 40 minutes, one of which is the one nobody solved, so we were pretty excited about that.</p>\n<p>I learned that I need to try one-shotting the problems and actually code after you are fully sure about the implementation and idea, or else you will become a burden in the team because you are wasting precious time by occupying the computer. I will contiunue to train this part and I hope we can be as successful (or even more) in the regionals!</p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>Our team is starting to practice for the regionals, so this is just a documentary of our performances.</p>\n<h2 id=\"2018-east-central-na-regional-contest\"><a href=\"https://ecna18.kattis.com/contests/ecna18\">2018 East Central NA Regional Contest</a></h2>\n<p>Virtual Rank: 5</p>\n<p>This contest was extremely tedious and annoying. Most problems are really easy, but extremely implementation heavy. It was so bad that we actually just gave up and went to get food after the fourth hour.<br>\nI really hope our regional wouldn’t look like this, or else I might cry haha.</p>\n<h2 id=\"2019-north-central-na-regional-contest\"><a href=\"https://ncna19.kattis.com/contests/ncna19\">2019 North Central NA Regional Contest</a></h2>\n<p>Solved: 11/11<br>\nVirtual Rank: 1</p>\n<p>This is the contest that we just did today. Because it was a previous year of our region, so we did our best, and we AK’d the contest with twenty minutes left, which no other team did!</p>\n<p>I personally solved pJ (solve rate 46%), pF (solve rate 16%), and pA (solve rate 4%).<br>\npJ was a really simple brute force check problem, but I was not familiar with compiling the code without code runner and debugging without my debug template, so I actually spent quite some time getting used to it.<br>\npJ is also a pretty easy one in my opinion, but because of some silly mistake, I got 3 WA on it, which I am really ashamed of.<br>\npA is a interesting one, the original teammate (who solved the final problem that nobody else solved in the contest) had no idea, and I actually identified that it’s just a classic computational geometry problem: Minimum Enclosing Circle, so I one-shotted it with the powerful template I have.</p>\n<p>Apart from a few problems, the contest isn’t hard at all. A teammate of mine even said that “Wow, this contest is so easy!”. (Although alot of problems still seem too out of reach for me).</p>\n<p>We acutally solved our last three problems in a span of 40 minutes, one of which is the one nobody solved, so we were pretty excited about that.</p>\n<p>I learned that I need to try one-shotting the problems and actually code after you are fully sure about the implementation and idea, or else you will become a burden in the team because you are wasting precious time by occupying the computer. I will contiunue to train this part and I hope we can be as successful (or even more) in the regionals!</p>\n"},{"title":"Interesting CodeChef Problem","date":"2024-02-11T18:05:34.000Z","_content":"A while ago, someone in a server asked for help with this problem:\n\n## [Equality Etiquette](https://www.codechef.com/problems/EQUAL2?tab=statement)\n\nI solved it while I was on the airplane coming back to the US, and I thought it was a really interesting problem!\n\nI'll give my detailed explaination for this problem here:\n\nThe first thing I noticed immediately, is that the operations are not as complicated as it seems.\nWe only care about making the difference of the two numbers 0, and we can notice that adding a number to the bigger number does the same as subtracting a number to the smaller number, which is adding the number to the difference. The same goes for subtracting to the bigger number and adding to the smaller number, which subtracts the number from the difference.\n\nSo the problem now becomes: Whats the minimum number of n, such that when we apply positive and negative signs on certain numbers from 1 to n, the total sum will become the difference?\nBefore finding this exactly though, I first questioned that does there exist a number that couldn't be constructed by the operation, so I tried a couple numbers and I noticed that we can always construct the number with the operations!\n\nNamely, if the difference is odd, we can use the first 2 \\* diff - 1 numbers, and all numbers apart from diff will pair up and eliminate each other. An example is diff = 3:\n\n```cpp\ndiff = 3\n1, 2, 3, 4, 5 -> (1 + 5) - (2 + 4) + 3 = 3\n```\n\nAnd if the difference is even, we can use the first 2 \\* diff numbers, so that the left out pair will pair up with the number 2 * diff. An example is diff = 4:\n\n```cpp\ndiff = 4\n1, 2, 3, 4, 5, 6, 7, 8 -> (1 + 7) - (2 + 6) + (3 + 5) - (8) + 4 = 4\n```\n\nSo now we know an answer always exists. But now we need to figure out how can we get the optimal, smallest n? To figure this out, I tried out a few values of n to see what numbers can we obtain from the operation:\n\n```cpp\nn = 4\n1 + 2 + 3 + 4 = 10\n(-1) + 2 + 3 + 4 = 8\n1 + (-2) + 3 + 4 = 6\n1 + 2 + (-3) = 4 = 4\n...etc\n\nn = 5\n1 + 2 + 3 + 4 + 5 = 15\n(-1) + 2 + 3 + 4 + 5 = 13\n1 + (-2) + 3 + 4 + 5 = 11\n1 + 2 + (-3) + 4 + 5 = 9\n...etc\n```\n\nHave you noticed a pattern? It turns out that we can actually make all S(n) - 2k > 0 numbers (All numbers smaller than S(n) greater than 0 that have the same parity as it), where S(n) is the sum from 1 to n. You can prove this easily with induction but I think just observing should be quite obvious.\nNow, the problem is reduced to finding a minimum number n, such that S(n) is greater than the difference and they have the same parity.\nWe can find the S(n) > difference with a simple binary search, then just find the closest n with the same parity as diff, it will only be at most 2 away from the first number we obtained.\nCode:\n\n```cpp\nint sum(int num) {return (num * (num + 1)) / 2;}\nvoid solve() {\n    int a, b;\n    cin >> a >> b;\n    int diff = abs(a - b);\n    if(diff == 0) {\n        cout << 0 << endl;\n        return;\n    }\n    int l = 1, r = 1e6;\n    while(r - l > 1) {\n        int m = (r + l) / 2;\n        if(sum(m) < diff) l = m;\n        else r = m;\n    }\n    int num = (sum(l) >= diff) ? l : r;\n    while((sum(num) % 2) != (diff % 2)) {\n        num += 1;\n    }\n    cout << num << endl;\n    return;\n}\n```\n","source":"_posts/Interesting-CodeChef-Problem.md","raw":"---\ntitle: Interesting CodeChef Problem\ndate: 2024-02-11 12:05:34\ntags: [\"CP\"]\n---\nA while ago, someone in a server asked for help with this problem:\n\n## [Equality Etiquette](https://www.codechef.com/problems/EQUAL2?tab=statement)\n\nI solved it while I was on the airplane coming back to the US, and I thought it was a really interesting problem!\n\nI'll give my detailed explaination for this problem here:\n\nThe first thing I noticed immediately, is that the operations are not as complicated as it seems.\nWe only care about making the difference of the two numbers 0, and we can notice that adding a number to the bigger number does the same as subtracting a number to the smaller number, which is adding the number to the difference. The same goes for subtracting to the bigger number and adding to the smaller number, which subtracts the number from the difference.\n\nSo the problem now becomes: Whats the minimum number of n, such that when we apply positive and negative signs on certain numbers from 1 to n, the total sum will become the difference?\nBefore finding this exactly though, I first questioned that does there exist a number that couldn't be constructed by the operation, so I tried a couple numbers and I noticed that we can always construct the number with the operations!\n\nNamely, if the difference is odd, we can use the first 2 \\* diff - 1 numbers, and all numbers apart from diff will pair up and eliminate each other. An example is diff = 3:\n\n```cpp\ndiff = 3\n1, 2, 3, 4, 5 -> (1 + 5) - (2 + 4) + 3 = 3\n```\n\nAnd if the difference is even, we can use the first 2 \\* diff numbers, so that the left out pair will pair up with the number 2 * diff. An example is diff = 4:\n\n```cpp\ndiff = 4\n1, 2, 3, 4, 5, 6, 7, 8 -> (1 + 7) - (2 + 6) + (3 + 5) - (8) + 4 = 4\n```\n\nSo now we know an answer always exists. But now we need to figure out how can we get the optimal, smallest n? To figure this out, I tried out a few values of n to see what numbers can we obtain from the operation:\n\n```cpp\nn = 4\n1 + 2 + 3 + 4 = 10\n(-1) + 2 + 3 + 4 = 8\n1 + (-2) + 3 + 4 = 6\n1 + 2 + (-3) = 4 = 4\n...etc\n\nn = 5\n1 + 2 + 3 + 4 + 5 = 15\n(-1) + 2 + 3 + 4 + 5 = 13\n1 + (-2) + 3 + 4 + 5 = 11\n1 + 2 + (-3) + 4 + 5 = 9\n...etc\n```\n\nHave you noticed a pattern? It turns out that we can actually make all S(n) - 2k > 0 numbers (All numbers smaller than S(n) greater than 0 that have the same parity as it), where S(n) is the sum from 1 to n. You can prove this easily with induction but I think just observing should be quite obvious.\nNow, the problem is reduced to finding a minimum number n, such that S(n) is greater than the difference and they have the same parity.\nWe can find the S(n) > difference with a simple binary search, then just find the closest n with the same parity as diff, it will only be at most 2 away from the first number we obtained.\nCode:\n\n```cpp\nint sum(int num) {return (num * (num + 1)) / 2;}\nvoid solve() {\n    int a, b;\n    cin >> a >> b;\n    int diff = abs(a - b);\n    if(diff == 0) {\n        cout << 0 << endl;\n        return;\n    }\n    int l = 1, r = 1e6;\n    while(r - l > 1) {\n        int m = (r + l) / 2;\n        if(sum(m) < diff) l = m;\n        else r = m;\n    }\n    int num = (sum(l) >= diff) ? l : r;\n    while((sum(num) % 2) != (diff % 2)) {\n        num += 1;\n    }\n    cout << num << endl;\n    return;\n}\n```\n","slug":"Interesting-CodeChef-Problem","published":1,"updated":"2024-12-26T01:29:58.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblgx000hb0u90q8mfakt","content":"<p>A while ago, someone in a server asked for help with this problem:</p>\n<h2 id=\"equality-etiquette\"><a href=\"https://www.codechef.com/problems/EQUAL2?tab=statement\">Equality Etiquette</a></h2>\n<p>I solved it while I was on the airplane coming back to the US, and I thought it was a really interesting problem!</p>\n<p>I’ll give my detailed explaination for this problem here:</p>\n<p>The first thing I noticed immediately, is that the operations are not as complicated as it seems.<br>\nWe only care about making the difference of the two numbers 0, and we can notice that adding a number to the bigger number does the same as subtracting a number to the smaller number, which is adding the number to the difference. The same goes for subtracting to the bigger number and adding to the smaller number, which subtracts the number from the difference.</p>\n<p>So the problem now becomes: Whats the minimum number of n, such that when we apply positive and negative signs on certain numbers from 1 to n, the total sum will become the difference?<br>\nBefore finding this exactly though, I first questioned that does there exist a number that couldn’t be constructed by the operation, so I tried a couple numbers and I noticed that we can always construct the number with the operations!</p>\n<p>Namely, if the difference is odd, we can use the first 2 * diff - 1 numbers, and all numbers apart from diff will pair up and eliminate each other. An example is diff = 3:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> -&gt; (<span class=\"number\">1</span> + <span class=\"number\">5</span>) - (<span class=\"number\">2</span> + <span class=\"number\">4</span>) + <span class=\"number\">3</span> = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>And if the difference is even, we can use the first 2 * diff numbers, so that the left out pair will pair up with the number 2 * diff. An example is diff = 4:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span> -&gt; (<span class=\"number\">1</span> + <span class=\"number\">7</span>) - (<span class=\"number\">2</span> + <span class=\"number\">6</span>) + (<span class=\"number\">3</span> + <span class=\"number\">5</span>) - (<span class=\"number\">8</span>) + <span class=\"number\">4</span> = <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>So now we know an answer always exists. But now we need to figure out how can we get the optimal, smallest n? To figure this out, I tried out a few values of n to see what numbers can we obtain from the operation:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">2</span> + <span class=\"number\">3</span> + <span class=\"number\">4</span> = <span class=\"number\">10</span></span><br><span class=\"line\">(<span class=\"number\">-1</span>) + <span class=\"number\">2</span> + <span class=\"number\">3</span> + <span class=\"number\">4</span> = <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">1</span> + (<span class=\"number\">-2</span>) + <span class=\"number\">3</span> + <span class=\"number\">4</span> = <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">2</span> + (<span class=\"number\">-3</span>) = <span class=\"number\">4</span> = <span class=\"number\">4</span></span><br><span class=\"line\">...etc</span><br><span class=\"line\"></span><br><span class=\"line\">n = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">2</span> + <span class=\"number\">3</span> + <span class=\"number\">4</span> + <span class=\"number\">5</span> = <span class=\"number\">15</span></span><br><span class=\"line\">(<span class=\"number\">-1</span>) + <span class=\"number\">2</span> + <span class=\"number\">3</span> + <span class=\"number\">4</span> + <span class=\"number\">5</span> = <span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"number\">1</span> + (<span class=\"number\">-2</span>) + <span class=\"number\">3</span> + <span class=\"number\">4</span> + <span class=\"number\">5</span> = <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">2</span> + (<span class=\"number\">-3</span>) + <span class=\"number\">4</span> + <span class=\"number\">5</span> = <span class=\"number\">9</span></span><br><span class=\"line\">...etc</span><br></pre></td></tr></table></figure>\n<p>Have you noticed a pattern? It turns out that we can actually make all S(n) - 2k &gt; 0 numbers (All numbers smaller than S(n) greater than 0 that have the same parity as it), where S(n) is the sum from 1 to n. You can prove this easily with induction but I think just observing should be quite obvious.<br>\nNow, the problem is reduced to finding a minimum number n, such that S(n) is greater than the difference and they have the same parity.<br>\nWe can find the S(n) &gt; difference with a simple binary search, then just find the closest n with the same parity as diff, it will only be at most 2 away from the first number we obtained.<br>\nCode:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> </span>&#123;<span class=\"keyword\">return</span> (num * (num + <span class=\"number\">1</span>)) / <span class=\"number\">2</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a, b;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    <span class=\"type\">int</span> diff = <span class=\"built_in\">abs</span>(a - b);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(diff == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"number\">0</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"number\">1</span>, r = <span class=\"number\">1e6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r - l &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m = (r + l) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">sum</span>(m) &lt; diff) l = m;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> r = m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> num = (<span class=\"built_in\">sum</span>(l) &gt;= diff) ? l : r;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((<span class=\"built_in\">sum</span>(num) % <span class=\"number\">2</span>) != (diff % <span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">        num += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; num &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>A while ago, someone in a server asked for help with this problem:</p>\n<h2 id=\"equality-etiquette\"><a href=\"https://www.codechef.com/problems/EQUAL2?tab=statement\">Equality Etiquette</a></h2>\n<p>I solved it while I was on the airplane coming back to the US, and I thought it was a really interesting problem!</p>\n<p>I’ll give my detailed explaination for this problem here:</p>\n<p>The first thing I noticed immediately, is that the operations are not as complicated as it seems.<br>\nWe only care about making the difference of the two numbers 0, and we can notice that adding a number to the bigger number does the same as subtracting a number to the smaller number, which is adding the number to the difference. The same goes for subtracting to the bigger number and adding to the smaller number, which subtracts the number from the difference.</p>\n<p>So the problem now becomes: Whats the minimum number of n, such that when we apply positive and negative signs on certain numbers from 1 to n, the total sum will become the difference?<br>\nBefore finding this exactly though, I first questioned that does there exist a number that couldn’t be constructed by the operation, so I tried a couple numbers and I noticed that we can always construct the number with the operations!</p>\n<p>Namely, if the difference is odd, we can use the first 2 * diff - 1 numbers, and all numbers apart from diff will pair up and eliminate each other. An example is diff = 3:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff = <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span> -&gt; (<span class=\"number\">1</span> + <span class=\"number\">5</span>) - (<span class=\"number\">2</span> + <span class=\"number\">4</span>) + <span class=\"number\">3</span> = <span class=\"number\">3</span></span><br></pre></td></tr></table></figure>\n<p>And if the difference is even, we can use the first 2 * diff numbers, so that the left out pair will pair up with the number 2 * diff. An example is diff = 4:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">diff = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span> -&gt; (<span class=\"number\">1</span> + <span class=\"number\">7</span>) - (<span class=\"number\">2</span> + <span class=\"number\">6</span>) + (<span class=\"number\">3</span> + <span class=\"number\">5</span>) - (<span class=\"number\">8</span>) + <span class=\"number\">4</span> = <span class=\"number\">4</span></span><br></pre></td></tr></table></figure>\n<p>So now we know an answer always exists. But now we need to figure out how can we get the optimal, smallest n? To figure this out, I tried out a few values of n to see what numbers can we obtain from the operation:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">n = <span class=\"number\">4</span></span><br><span class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">2</span> + <span class=\"number\">3</span> + <span class=\"number\">4</span> = <span class=\"number\">10</span></span><br><span class=\"line\">(<span class=\"number\">-1</span>) + <span class=\"number\">2</span> + <span class=\"number\">3</span> + <span class=\"number\">4</span> = <span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"number\">1</span> + (<span class=\"number\">-2</span>) + <span class=\"number\">3</span> + <span class=\"number\">4</span> = <span class=\"number\">6</span></span><br><span class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">2</span> + (<span class=\"number\">-3</span>) = <span class=\"number\">4</span> = <span class=\"number\">4</span></span><br><span class=\"line\">...etc</span><br><span class=\"line\"></span><br><span class=\"line\">n = <span class=\"number\">5</span></span><br><span class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">2</span> + <span class=\"number\">3</span> + <span class=\"number\">4</span> + <span class=\"number\">5</span> = <span class=\"number\">15</span></span><br><span class=\"line\">(<span class=\"number\">-1</span>) + <span class=\"number\">2</span> + <span class=\"number\">3</span> + <span class=\"number\">4</span> + <span class=\"number\">5</span> = <span class=\"number\">13</span></span><br><span class=\"line\"><span class=\"number\">1</span> + (<span class=\"number\">-2</span>) + <span class=\"number\">3</span> + <span class=\"number\">4</span> + <span class=\"number\">5</span> = <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">1</span> + <span class=\"number\">2</span> + (<span class=\"number\">-3</span>) + <span class=\"number\">4</span> + <span class=\"number\">5</span> = <span class=\"number\">9</span></span><br><span class=\"line\">...etc</span><br></pre></td></tr></table></figure>\n<p>Have you noticed a pattern? It turns out that we can actually make all S(n) - 2k &gt; 0 numbers (All numbers smaller than S(n) greater than 0 that have the same parity as it), where S(n) is the sum from 1 to n. You can prove this easily with induction but I think just observing should be quite obvious.<br>\nNow, the problem is reduced to finding a minimum number n, such that S(n) is greater than the difference and they have the same parity.<br>\nWe can find the S(n) &gt; difference with a simple binary search, then just find the closest n with the same parity as diff, it will only be at most 2 away from the first number we obtained.<br>\nCode:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">sum</span><span class=\"params\">(<span class=\"type\">int</span> num)</span> </span>&#123;<span class=\"keyword\">return</span> (num * (num + <span class=\"number\">1</span>)) / <span class=\"number\">2</span>;&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> a, b;</span><br><span class=\"line\">    cin &gt;&gt; a &gt;&gt; b;</span><br><span class=\"line\">    <span class=\"type\">int</span> diff = <span class=\"built_in\">abs</span>(a - b);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(diff == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"number\">0</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"number\">1</span>, r = <span class=\"number\">1e6</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r - l &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m = (r + l) / <span class=\"number\">2</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">sum</span>(m) &lt; diff) l = m;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> r = m;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> num = (<span class=\"built_in\">sum</span>(l) &gt;= diff) ? l : r;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>((<span class=\"built_in\">sum</span>(num) % <span class=\"number\">2</span>) != (diff % <span class=\"number\">2</span>)) &#123;</span><br><span class=\"line\">        num += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; num &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Linear Algebra in ML: PCA","date":"2024-05-11T06:29:00.000Z","katex":true,"_content":"Hey guys! Since class is over and im back at Taiwan, I want to share some learning on some mathematical foundations for ML. I'm not sure what I want to cover nor how deep I want to cover, although I'll try to make this as approachable for people.\n\nPrerequisites: \n\nMatrix Operations and Identities, Basis, Diagonalizability, Eigenvalues and Vectors, Variance and Covariance\n\n# What is PCA and Why?\n\nPrincipal Component Analysis (PCA) is a powerful statistical technique commonly used for dimension reduction and simplification, while retaining the important information in the data.\n\nConsider a typical RGB image with dimensions of 224 x 224 x 3, totaling 150,528 data points for a single image. That is quite alot of data points for each image! In reality, many of these points are correlated and don't significantly contribute to our understanding of the image's content—altering a few pixels won't change whether an image of a cat is recognized as a dog.\n\nPerforming dimension reduction with PCA can speed up computation by reducing the number of dimensions to process, allowing only the most crucial information to be retained while removing redundant, useless data (noise).\n\n# Formulating and Solving PCA\n\nConsider a dataset where each data point $\\mathbf{x}_i$ has $m$ features, represented as columns in the matrix $\\mathbf{X}$. Here, $\\mathbf{X}$ is a $m \\times n$ matrix with datapoints $\\mathbf{x}_1, \\dots, \\mathbf{x}_n$. We want to preprocess it to mean = 0.\n\nThe goal of PCA is to reduce the dimensionality of this dataset from $m$ to $k$ (where $k < m$) by finding a new orthonormal basis $\\beta' = \\{\\beta'_1, \\dots, \\beta'_k\\}$, $\\beta'_1 \\geq \\dots \\geq \\beta'_k$ that \"best expresses\" the variability in the data. \n\nAfter obtaining $\\beta'$, each data point $\\mathbf{x}_i$ is projected onto this new basis to obtain:\n\n$$\n\\mathbf{y}_i = (\\mathbf{x}_i \\cdot \\beta'_1)\\beta'_1 + \\dots + (\\mathbf{x}_i \\cdot \\beta'_k)\\beta'_k\n$$\n\nwhere we denote $\\mathbf{Y}$ as a matrix whose column $i$ is the coefficients of $\\mathbf{y}_i$.\n\nWe can also write this projection process as a matrix equation:\n\n$$\n\\mathbf{Y} = \\mathbf{B}\\mathbf{X}\n$$\n\nWhere the $i$'th row $\\mathbf{B}_i = \\beta'_i$. (This equation is also called change of basis)\n\n## Optimization Objective\n\nWe need to clairify what \"best expresses\" meant in the previous paragraph.\n\nIn the best case, we would want each principal component have the highest variance. High variance indicates wide spread from the mean, which essentially means we retain as much information as possible from the original dataset.\n\nFuthermore, we would wish the covariance between the principal components is minimized. Having high covariance means the components are correlated, and would be redundant.\n\nCombined together, it's easy to see in the most optimal case, the covariance matrix for $\\mathbf{Y}$, $\\mathbf{C_Y} = \\frac{1}{n - 1}\\mathbf{Y}\\mathbf{Y}^T$, should be a diagonal matrix. \n\nOur problem now becomes finding $\\mathbf{B}$ that satisfies our goals, which we can find out by manipulating some equations:\n\n$$\n\\begin{aligned}\n\\mathbf{C_Y} &= \\frac{1}{n - 1}\\mathbf{Y}\\mathbf{Y}^T \\\\\n&= \\frac{1}{n - 1}(\\mathbf{B}\\mathbf{X})(\\mathbf{B}\\mathbf{X})^T \\\\\n&= \\frac{1}{n - 1}\\mathbf{B}(\\mathbf{X}\\mathbf{X}^T)\\mathbf{B}^T \\\\\n&= \\frac{1}{n - 1}\\mathbf{B}(\\mathbf{P}\\mathbf{D}\\mathbf{P}^{-1})\\mathbf{B}^T,\n\\end{aligned}\n$$\n\nwhere $\\mathbf{P}$ and $\\mathbf{D}$ are the eigenvectors and eigenvalues of $\\mathbf{X}\\mathbf{X}^T$, respectively.\n\nNotice if we choose $\\mathbf{B} = \\mathbf{P}_k^T$, containing only the top $k$ eigenvectors, simplifies $\\mathbf{C_Y}$ to:\n\n$$\n\\begin{aligned}\n\\mathbf{C_Y} &= \\frac{1}{n - 1}(\\mathbf{P}_k^T\\mathbf{P})\\mathbf{D}(\\mathbf{P^{-1}}\\mathbf{P}_k) \\\\  &= \n\\frac{1}{n - 1} \\mathbf{I}_k\\mathbf{D}\\mathbf{I}_k^T \\\\ &=\n\\frac{1}{n - 1} \\mathbf{D}_k\n\\end{aligned}\n$$\n\nwhere $\\mathbf{D}_k$ contains only the largest $k$ eigenvalues.\n\nThus, We've shown choosing $\\mathbf{B} = \\mathbf{P}_k^T$ ensures that $\\mathbf{C_Y}$ is diagonal, effectively making each principal component capture distinct variance from the dataset, and \"best expressing\" the data as per our initial goal.\n\nWe are also guaranteed that $\\mathbf{B}$ forms a orthonormal basis, since $\\mathbf{P}$ is also orthonormal due to being eigenvectors of symmertrical matricies.\n\n# Examples\n\nAfter roughly going through the idea behind PCA, I will give two examples to make the process even clearer.\n\n## Example 1: Tabular Data\n\nThis example will go through the process of PCA mathematically via a simple tabular a data.\n\n$$\n\\mathbf{X} = \\begin{bmatrix}\n2.3 & 2.6 & 1.5 & 3.1 \\\\\n4.9 & 5.3 & 3.2 & 6.3 \\\\\n5.1 & 5.2 & 4.9 & 5.3 \\\\\n8.2 & 6.3 & 7.4 & 6.8 \\\\\n4.4 & 3.1 & 3.6 & 3.5 \\\\\n\\end{bmatrix}\n$$\n\nOur dataset contains 4 data points aranged in columns and 5 features for each data point. I designed it so $x_2$ is around 2 times of $x_1$, and $x_4$ is two times of $x_5$, and $x_3$ is independent.\n\n### Step 1. Center the data\n\nWe first want to make the mean of the data 0 to calculate the covariance matrix later.\n\n$$\n\\mathbf{X}_{\\text{c}} = \\mathbf{X} - \\bar\\mathbf{X} = \n\\begin{bmatrix}\n    -0.075 & 0.225 & -0.875 & 0.725 \\\\\n    -0.025 & 0.375 & -1.725 & 1.375 \\\\\n    -0.025 & 0.075 & -0.225 & 0.175 \\\\\n    1.025 & -0.875 & 0.225 & -0.375 \\\\\n    0.75 & -0.55 & -0.05 & -0.15 \\\\\n\\end{bmatrix}  \n$$\n\nWe use $\\mathbf{X} = \\mathbf{X}_\\text{c}$ from now on.\n\n### Step 2. Calculate the symmetric matrix $\\mathbf{X}\\mathbf{X}^T$\n\n$$\n\\begin{aligned}\n\\mathbf{X}\\mathbf{X}^T &= \n\\begin{bmatrix}\n    -0.075 & 0.225 & -0.875 & 0.725 \\\\\n    -0.025 & 0.375 & -1.725 & 1.375 \\\\\n    -0.025 & 0.075 & -0.225 & 0.175 \\\\\n    1.025 & -0.875 & 0.225 & -0.375 \\\\\n    0.75 & -0.55 & -0.05 & -0.15 \\\\\n\\end{bmatrix} \n\\begin{bmatrix}\n    -0.075 & -0.025 & -0.025 & 1.025 & 0.75 \\\\\n    0.225 & 0.375 & 0.075 & -0.875 & -0.55 \\\\\n    -0.875 & -1.725 & -0.225 & 0.225 & -0.05 \\\\\n    0.725 & 1.375 & 0.175 & -0.375 & -0.15 \\\\\n\\end{bmatrix} \\\\ &=\n\\begin{bmatrix}\n    1.347 & 2.592 & 0.343 & -0.742 & -0.245 \\\\\n    2.592 & 5.008 & 0.658 & -1.257 & -0.345 \\\\\n    0.343 & 0.658 & 0.088 & -0.207 & -0.075 \\\\\n    -0.742 & -1.257 & -0.207 & 2.007 & 1.295 \\\\\n    -0.245 & -0.345 & -0.075 & 1.295 & 0.89 \\\\\n\\end{bmatrix}\n\\end{aligned}\n$$\n\n### Step 3. Find eigenvalues and vectors for the matrix\n\nYou can use your favorite method to find the quantities, I just used a solver and this is the result:\n\nEigen Values: \n\n$\n\\begin{bmatrix}\n    -4 \\cdot 10^{-7} & -0.0 & 0.0 & 0.0 & 0.0 \\\\\n    -0.0 & -2.7 \\cdot 10^{-7} & 0.0 & 0.0 & 0.0 \\\\\n    -0.0 & -0.0 & 0.002 & 0.0 & 0.0 \\\\\n    -0.0 & -0.0 & 0.0 & 2.351 & 0.0 \\\\\n    -0.0 & -0.0 & 0.0 & 0.0 & 6.986 \\\\\n\\end{bmatrix}\n$\n\nEigen Vectors: \n\n$\n\\begin{bmatrix}\n    -0.833 & 0.012 & 0.324 & 0.116 & -0.434 \\\\\n    0.455 & 0.094 & -0.053 & 0.311 & -0.827 \\\\\n    -0.042 & -0.966 & -0.227 & 0.02 & -0.111 \\\\\n    0.15 & -0.154 & 0.541 & 0.75 & 0.313 \\\\\n    -0.274 & 0.183 & -0.74 & 0.571 & 0.132 \\\\\n\\end{bmatrix}\n$\n\n(Note: torch.linalg.eigh returns the eigenvalues and vectors from small to big)\n\n### Step 4. Choose your $k$ and do reduction\n\nIn this example, I will choose $k = 3$, but usually you would want to choose the smallest $k$ that can keep some percentage of the variance (95 or 99).\n\nWhen $k = 3$, we choose\n\n$\\mathbf{B} = \\mathbf{P}_k^T =$\n\n$\n\\begin{bmatrix}\n    0.324 & -0.053 & -0.227 & 0.541 & -0.74 \\\\\n    0.116 & 0.311 & 0.02 & 0.75 & 0.571 \\\\\n    -0.434 & -0.827 & -0.111 & 0.313 & 0.132 \\\\\n\\end{bmatrix}\n$\n\nThen,\n\n$\n\\begin{aligned}\n3\\mathbf{C_Y} &= \\mathbf{B}\\mathbf{P}\\mathbf{D}\\mathbf{P^{-1}}\\mathbf{B^{-1}} \\\\ &=\n\\begin{bmatrix}\n    0.002 & 0.0 & 0.0 \\\\\n    0.0 & 2.351 & 0.0 \\\\\n    0.0 & 0.0 & 6.986 \\\\\n\\end{bmatrix}\n\\end{aligned}\n$\nWhich is what we expected.\n\n### Step 5. Project to new basis and reconstruct data\n\nWe will now obtain the projection coefficient matrix $\\mathbf{Y}$ and use it to reconstruct the data with the new basis.\n\n$\\mathbf{Y} = \\mathbf{B}\\mathbf{X} =\n\\begin{bmatrix}\n    -0.018 & -0.031 & 0.018 & 0.03 \\\\\n    1.181 & -0.826 & -0.503 & 0.148 \\\\\n    0.475 & -0.762 & 1.895 & -1.608 \\\\\n\\end{bmatrix}\n$\n\nAnd if we try to reconstruct the original matrix with our new basis:\n\n$\\mathbf{B}^T\\mathbf{Y} + X_\\text{mean} = \n\\begin{bmatrix}\n    2.3 & 2.6 & 1.5 & 3.1 \\\\\n    4.9 & 5.3 & 3.2 & 6.3 \\\\\n    5.1 & 5.2 & 4.9 & 5.3 \\\\\n    8.2 & 6.3 & 7.4 & 6.8 \\\\\n    4.4 & 3.1 & 3.6 & 3.5 \\\\\n\\end{bmatrix}\n$\n\nAnd if we use $k = 2$:\n\n$\n\\begin{bmatrix}\n    2.306 & 2.61 & 1.494 & 3.09 \\\\\n    4.899 & 5.298 & 3.201 & 6.302 \\\\\n    5.096 & 5.193 & 4.904 & 5.307 \\\\\n    8.21 & 6.317 & 7.39 & 6.784 \\\\\n    4.387 & 3.077 & 3.613 & 3.522 \\\\\n\\end{bmatrix}\n$\n\nAnd finally, $k = 1$:\n\n$\n\\begin{bmatrix}\n    2.169 & 2.706 & 1.553 & 3.073 \\\\\n    4.532 & 5.556 & 3.357 & 6.255 \\\\\n    5.072 & 5.21 & 4.914 & 5.304 \\\\\n    7.324 & 6.937 & 7.767 & 6.672 \\\\\n    3.713 & 3.549 & 3.9 & 3.438 \\\\\n\\end{bmatrix}\n$\n\nAs you can see, PCA did a pretty good job in perserving the relationships of features with fewer dimensions.\n\n## Example 2: MNIST\n\nMNIST is a classic hand writing digit dataset. We will use PCA to reduce the dimension of it and check the reconstruction results w.r.t different $k$.\n\n[Here is the google colab for this example](https://colab.research.google.com/drive/1l0tPmVIBreJFQmfSA2u19g60MXAk8pa8?usp=sharing), I will only show the result and the code for PCA in this blog.\n\n```py\ndef PCA(images, k):\n  # Flatten the image and center the data\n  images = images.reshape([images.shape[0], -1])\n  mean = images.mean(0)\n  images = images - mean \n  # Calculate covariance matrix and eigenvalues/vectors\n  cov_matrix = torch.matmul(images.T, images) / (images.shape[0] - 1)\n  eigen_values, eigen_vectors = torch.linalg.eigh(cov_matrix)\n  # Get eigenvectors w.r.t top k eigenvalues\n  eigen_vectors_k = eigen_vectors[:, -k:]\n  # Get Y, matrix with coefficients w.r.t new basis\n  projected_data = torch.matmul(images, eigen_vectors_k)\n  # Reconstruct images\n  new_images = torch.matmul(projected_data, eigen_vectors_k.T) + mean\n  return new_images\n```\n\n![PCA](PCA.png)\n\n# Afterword\n\nPCA is quite an old, yet powerful linear dimension reduction algorithm. The whole encoder-decoder architecture, and embedding systems all use dimension reduction, so this is very important! If you want to learn more about dimension reduction, (deep)auto-encoders are a good place to start. Good luck!\n\nIt took me quite some time to compose this blog, so I hope it was clear and concise for you to understand.\n\nMy freshman year is finally over, and after my grades all roll out, I think I will make a short blog to summarize up my first year in college!\n\nTaiwan food yummy~\n\n# References\n\n[A Tutorial on Principal Component Analysis](https://www.cs.cmu.edu/~elaw/papers/pca.pdf)\n\n[ML Lecture 13: Unsupervised Learning - Linear Methods](https://youtu.be/iwh5o_M4BNU?si=mPfm6E6RLNkHPlQw)\n\n","source":"_posts/Linear-Algebra-in-ML-1-PCA.md","raw":"---\ntitle: 'Linear Algebra in ML: PCA'\ndate: 2024-05-11 01:29:00\ntags: [\"Math\", \"AI\"]\nkatex: true\n---\nHey guys! Since class is over and im back at Taiwan, I want to share some learning on some mathematical foundations for ML. I'm not sure what I want to cover nor how deep I want to cover, although I'll try to make this as approachable for people.\n\nPrerequisites: \n\nMatrix Operations and Identities, Basis, Diagonalizability, Eigenvalues and Vectors, Variance and Covariance\n\n# What is PCA and Why?\n\nPrincipal Component Analysis (PCA) is a powerful statistical technique commonly used for dimension reduction and simplification, while retaining the important information in the data.\n\nConsider a typical RGB image with dimensions of 224 x 224 x 3, totaling 150,528 data points for a single image. That is quite alot of data points for each image! In reality, many of these points are correlated and don't significantly contribute to our understanding of the image's content—altering a few pixels won't change whether an image of a cat is recognized as a dog.\n\nPerforming dimension reduction with PCA can speed up computation by reducing the number of dimensions to process, allowing only the most crucial information to be retained while removing redundant, useless data (noise).\n\n# Formulating and Solving PCA\n\nConsider a dataset where each data point $\\mathbf{x}_i$ has $m$ features, represented as columns in the matrix $\\mathbf{X}$. Here, $\\mathbf{X}$ is a $m \\times n$ matrix with datapoints $\\mathbf{x}_1, \\dots, \\mathbf{x}_n$. We want to preprocess it to mean = 0.\n\nThe goal of PCA is to reduce the dimensionality of this dataset from $m$ to $k$ (where $k < m$) by finding a new orthonormal basis $\\beta' = \\{\\beta'_1, \\dots, \\beta'_k\\}$, $\\beta'_1 \\geq \\dots \\geq \\beta'_k$ that \"best expresses\" the variability in the data. \n\nAfter obtaining $\\beta'$, each data point $\\mathbf{x}_i$ is projected onto this new basis to obtain:\n\n$$\n\\mathbf{y}_i = (\\mathbf{x}_i \\cdot \\beta'_1)\\beta'_1 + \\dots + (\\mathbf{x}_i \\cdot \\beta'_k)\\beta'_k\n$$\n\nwhere we denote $\\mathbf{Y}$ as a matrix whose column $i$ is the coefficients of $\\mathbf{y}_i$.\n\nWe can also write this projection process as a matrix equation:\n\n$$\n\\mathbf{Y} = \\mathbf{B}\\mathbf{X}\n$$\n\nWhere the $i$'th row $\\mathbf{B}_i = \\beta'_i$. (This equation is also called change of basis)\n\n## Optimization Objective\n\nWe need to clairify what \"best expresses\" meant in the previous paragraph.\n\nIn the best case, we would want each principal component have the highest variance. High variance indicates wide spread from the mean, which essentially means we retain as much information as possible from the original dataset.\n\nFuthermore, we would wish the covariance between the principal components is minimized. Having high covariance means the components are correlated, and would be redundant.\n\nCombined together, it's easy to see in the most optimal case, the covariance matrix for $\\mathbf{Y}$, $\\mathbf{C_Y} = \\frac{1}{n - 1}\\mathbf{Y}\\mathbf{Y}^T$, should be a diagonal matrix. \n\nOur problem now becomes finding $\\mathbf{B}$ that satisfies our goals, which we can find out by manipulating some equations:\n\n$$\n\\begin{aligned}\n\\mathbf{C_Y} &= \\frac{1}{n - 1}\\mathbf{Y}\\mathbf{Y}^T \\\\\n&= \\frac{1}{n - 1}(\\mathbf{B}\\mathbf{X})(\\mathbf{B}\\mathbf{X})^T \\\\\n&= \\frac{1}{n - 1}\\mathbf{B}(\\mathbf{X}\\mathbf{X}^T)\\mathbf{B}^T \\\\\n&= \\frac{1}{n - 1}\\mathbf{B}(\\mathbf{P}\\mathbf{D}\\mathbf{P}^{-1})\\mathbf{B}^T,\n\\end{aligned}\n$$\n\nwhere $\\mathbf{P}$ and $\\mathbf{D}$ are the eigenvectors and eigenvalues of $\\mathbf{X}\\mathbf{X}^T$, respectively.\n\nNotice if we choose $\\mathbf{B} = \\mathbf{P}_k^T$, containing only the top $k$ eigenvectors, simplifies $\\mathbf{C_Y}$ to:\n\n$$\n\\begin{aligned}\n\\mathbf{C_Y} &= \\frac{1}{n - 1}(\\mathbf{P}_k^T\\mathbf{P})\\mathbf{D}(\\mathbf{P^{-1}}\\mathbf{P}_k) \\\\  &= \n\\frac{1}{n - 1} \\mathbf{I}_k\\mathbf{D}\\mathbf{I}_k^T \\\\ &=\n\\frac{1}{n - 1} \\mathbf{D}_k\n\\end{aligned}\n$$\n\nwhere $\\mathbf{D}_k$ contains only the largest $k$ eigenvalues.\n\nThus, We've shown choosing $\\mathbf{B} = \\mathbf{P}_k^T$ ensures that $\\mathbf{C_Y}$ is diagonal, effectively making each principal component capture distinct variance from the dataset, and \"best expressing\" the data as per our initial goal.\n\nWe are also guaranteed that $\\mathbf{B}$ forms a orthonormal basis, since $\\mathbf{P}$ is also orthonormal due to being eigenvectors of symmertrical matricies.\n\n# Examples\n\nAfter roughly going through the idea behind PCA, I will give two examples to make the process even clearer.\n\n## Example 1: Tabular Data\n\nThis example will go through the process of PCA mathematically via a simple tabular a data.\n\n$$\n\\mathbf{X} = \\begin{bmatrix}\n2.3 & 2.6 & 1.5 & 3.1 \\\\\n4.9 & 5.3 & 3.2 & 6.3 \\\\\n5.1 & 5.2 & 4.9 & 5.3 \\\\\n8.2 & 6.3 & 7.4 & 6.8 \\\\\n4.4 & 3.1 & 3.6 & 3.5 \\\\\n\\end{bmatrix}\n$$\n\nOur dataset contains 4 data points aranged in columns and 5 features for each data point. I designed it so $x_2$ is around 2 times of $x_1$, and $x_4$ is two times of $x_5$, and $x_3$ is independent.\n\n### Step 1. Center the data\n\nWe first want to make the mean of the data 0 to calculate the covariance matrix later.\n\n$$\n\\mathbf{X}_{\\text{c}} = \\mathbf{X} - \\bar\\mathbf{X} = \n\\begin{bmatrix}\n    -0.075 & 0.225 & -0.875 & 0.725 \\\\\n    -0.025 & 0.375 & -1.725 & 1.375 \\\\\n    -0.025 & 0.075 & -0.225 & 0.175 \\\\\n    1.025 & -0.875 & 0.225 & -0.375 \\\\\n    0.75 & -0.55 & -0.05 & -0.15 \\\\\n\\end{bmatrix}  \n$$\n\nWe use $\\mathbf{X} = \\mathbf{X}_\\text{c}$ from now on.\n\n### Step 2. Calculate the symmetric matrix $\\mathbf{X}\\mathbf{X}^T$\n\n$$\n\\begin{aligned}\n\\mathbf{X}\\mathbf{X}^T &= \n\\begin{bmatrix}\n    -0.075 & 0.225 & -0.875 & 0.725 \\\\\n    -0.025 & 0.375 & -1.725 & 1.375 \\\\\n    -0.025 & 0.075 & -0.225 & 0.175 \\\\\n    1.025 & -0.875 & 0.225 & -0.375 \\\\\n    0.75 & -0.55 & -0.05 & -0.15 \\\\\n\\end{bmatrix} \n\\begin{bmatrix}\n    -0.075 & -0.025 & -0.025 & 1.025 & 0.75 \\\\\n    0.225 & 0.375 & 0.075 & -0.875 & -0.55 \\\\\n    -0.875 & -1.725 & -0.225 & 0.225 & -0.05 \\\\\n    0.725 & 1.375 & 0.175 & -0.375 & -0.15 \\\\\n\\end{bmatrix} \\\\ &=\n\\begin{bmatrix}\n    1.347 & 2.592 & 0.343 & -0.742 & -0.245 \\\\\n    2.592 & 5.008 & 0.658 & -1.257 & -0.345 \\\\\n    0.343 & 0.658 & 0.088 & -0.207 & -0.075 \\\\\n    -0.742 & -1.257 & -0.207 & 2.007 & 1.295 \\\\\n    -0.245 & -0.345 & -0.075 & 1.295 & 0.89 \\\\\n\\end{bmatrix}\n\\end{aligned}\n$$\n\n### Step 3. Find eigenvalues and vectors for the matrix\n\nYou can use your favorite method to find the quantities, I just used a solver and this is the result:\n\nEigen Values: \n\n$\n\\begin{bmatrix}\n    -4 \\cdot 10^{-7} & -0.0 & 0.0 & 0.0 & 0.0 \\\\\n    -0.0 & -2.7 \\cdot 10^{-7} & 0.0 & 0.0 & 0.0 \\\\\n    -0.0 & -0.0 & 0.002 & 0.0 & 0.0 \\\\\n    -0.0 & -0.0 & 0.0 & 2.351 & 0.0 \\\\\n    -0.0 & -0.0 & 0.0 & 0.0 & 6.986 \\\\\n\\end{bmatrix}\n$\n\nEigen Vectors: \n\n$\n\\begin{bmatrix}\n    -0.833 & 0.012 & 0.324 & 0.116 & -0.434 \\\\\n    0.455 & 0.094 & -0.053 & 0.311 & -0.827 \\\\\n    -0.042 & -0.966 & -0.227 & 0.02 & -0.111 \\\\\n    0.15 & -0.154 & 0.541 & 0.75 & 0.313 \\\\\n    -0.274 & 0.183 & -0.74 & 0.571 & 0.132 \\\\\n\\end{bmatrix}\n$\n\n(Note: torch.linalg.eigh returns the eigenvalues and vectors from small to big)\n\n### Step 4. Choose your $k$ and do reduction\n\nIn this example, I will choose $k = 3$, but usually you would want to choose the smallest $k$ that can keep some percentage of the variance (95 or 99).\n\nWhen $k = 3$, we choose\n\n$\\mathbf{B} = \\mathbf{P}_k^T =$\n\n$\n\\begin{bmatrix}\n    0.324 & -0.053 & -0.227 & 0.541 & -0.74 \\\\\n    0.116 & 0.311 & 0.02 & 0.75 & 0.571 \\\\\n    -0.434 & -0.827 & -0.111 & 0.313 & 0.132 \\\\\n\\end{bmatrix}\n$\n\nThen,\n\n$\n\\begin{aligned}\n3\\mathbf{C_Y} &= \\mathbf{B}\\mathbf{P}\\mathbf{D}\\mathbf{P^{-1}}\\mathbf{B^{-1}} \\\\ &=\n\\begin{bmatrix}\n    0.002 & 0.0 & 0.0 \\\\\n    0.0 & 2.351 & 0.0 \\\\\n    0.0 & 0.0 & 6.986 \\\\\n\\end{bmatrix}\n\\end{aligned}\n$\nWhich is what we expected.\n\n### Step 5. Project to new basis and reconstruct data\n\nWe will now obtain the projection coefficient matrix $\\mathbf{Y}$ and use it to reconstruct the data with the new basis.\n\n$\\mathbf{Y} = \\mathbf{B}\\mathbf{X} =\n\\begin{bmatrix}\n    -0.018 & -0.031 & 0.018 & 0.03 \\\\\n    1.181 & -0.826 & -0.503 & 0.148 \\\\\n    0.475 & -0.762 & 1.895 & -1.608 \\\\\n\\end{bmatrix}\n$\n\nAnd if we try to reconstruct the original matrix with our new basis:\n\n$\\mathbf{B}^T\\mathbf{Y} + X_\\text{mean} = \n\\begin{bmatrix}\n    2.3 & 2.6 & 1.5 & 3.1 \\\\\n    4.9 & 5.3 & 3.2 & 6.3 \\\\\n    5.1 & 5.2 & 4.9 & 5.3 \\\\\n    8.2 & 6.3 & 7.4 & 6.8 \\\\\n    4.4 & 3.1 & 3.6 & 3.5 \\\\\n\\end{bmatrix}\n$\n\nAnd if we use $k = 2$:\n\n$\n\\begin{bmatrix}\n    2.306 & 2.61 & 1.494 & 3.09 \\\\\n    4.899 & 5.298 & 3.201 & 6.302 \\\\\n    5.096 & 5.193 & 4.904 & 5.307 \\\\\n    8.21 & 6.317 & 7.39 & 6.784 \\\\\n    4.387 & 3.077 & 3.613 & 3.522 \\\\\n\\end{bmatrix}\n$\n\nAnd finally, $k = 1$:\n\n$\n\\begin{bmatrix}\n    2.169 & 2.706 & 1.553 & 3.073 \\\\\n    4.532 & 5.556 & 3.357 & 6.255 \\\\\n    5.072 & 5.21 & 4.914 & 5.304 \\\\\n    7.324 & 6.937 & 7.767 & 6.672 \\\\\n    3.713 & 3.549 & 3.9 & 3.438 \\\\\n\\end{bmatrix}\n$\n\nAs you can see, PCA did a pretty good job in perserving the relationships of features with fewer dimensions.\n\n## Example 2: MNIST\n\nMNIST is a classic hand writing digit dataset. We will use PCA to reduce the dimension of it and check the reconstruction results w.r.t different $k$.\n\n[Here is the google colab for this example](https://colab.research.google.com/drive/1l0tPmVIBreJFQmfSA2u19g60MXAk8pa8?usp=sharing), I will only show the result and the code for PCA in this blog.\n\n```py\ndef PCA(images, k):\n  # Flatten the image and center the data\n  images = images.reshape([images.shape[0], -1])\n  mean = images.mean(0)\n  images = images - mean \n  # Calculate covariance matrix and eigenvalues/vectors\n  cov_matrix = torch.matmul(images.T, images) / (images.shape[0] - 1)\n  eigen_values, eigen_vectors = torch.linalg.eigh(cov_matrix)\n  # Get eigenvectors w.r.t top k eigenvalues\n  eigen_vectors_k = eigen_vectors[:, -k:]\n  # Get Y, matrix with coefficients w.r.t new basis\n  projected_data = torch.matmul(images, eigen_vectors_k)\n  # Reconstruct images\n  new_images = torch.matmul(projected_data, eigen_vectors_k.T) + mean\n  return new_images\n```\n\n![PCA](PCA.png)\n\n# Afterword\n\nPCA is quite an old, yet powerful linear dimension reduction algorithm. The whole encoder-decoder architecture, and embedding systems all use dimension reduction, so this is very important! If you want to learn more about dimension reduction, (deep)auto-encoders are a good place to start. Good luck!\n\nIt took me quite some time to compose this blog, so I hope it was clear and concise for you to understand.\n\nMy freshman year is finally over, and after my grades all roll out, I think I will make a short blog to summarize up my first year in college!\n\nTaiwan food yummy~\n\n# References\n\n[A Tutorial on Principal Component Analysis](https://www.cs.cmu.edu/~elaw/papers/pca.pdf)\n\n[ML Lecture 13: Unsupervised Learning - Linear Methods](https://youtu.be/iwh5o_M4BNU?si=mPfm6E6RLNkHPlQw)\n\n","slug":"Linear-Algebra-in-ML-1-PCA","published":1,"updated":"2024-12-26T01:29:58.473Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblgz000jb0u95wjudl73","content":"<p>Hey guys! Since class is over and im back at Taiwan, I want to share some learning on some mathematical foundations for ML. I’m not sure what I want to cover nor how deep I want to cover, although I’ll try to make this as approachable for people.</p>\n<p>Prerequisites:</p>\n<p>Matrix Operations and Identities, Basis, Diagonalizability, Eigenvalues and Vectors, Variance and Covariance</p>\n<h1 id=\"what-is-pca-and-why\">What is PCA and Why?</h1>\n<p>Principal Component Analysis (PCA) is a powerful statistical technique commonly used for dimension reduction and simplification, while retaining the important information in the data.</p>\n<p>Consider a typical RGB image with dimensions of 224 x 224 x 3, totaling 150,528 data points for a single image. That is quite alot of data points for each image! In reality, many of these points are correlated and don’t significantly contribute to our understanding of the image’s content—altering a few pixels won’t change whether an image of a cat is recognized as a dog.</p>\n<p>Performing dimension reduction with PCA can speed up computation by reducing the number of dimensions to process, allowing only the most crucial information to be retained while removing redundant, useless data (noise).</p>\n<h1 id=\"formulating-and-solving-pca\">Formulating and Solving PCA</h1>\n<p>Consider a dataset where each data point <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"bold\">x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{x}_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.59444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> features, represented as columns in the matrix <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">X</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{X}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span></span></span></span>. Here, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">X</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{X}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span></span></span></span> is a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">m \\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> matrix with datapoints <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"bold\">x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi mathvariant=\"bold\">x</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{x}_1, \\dots, \\mathbf{x}_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.63888em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. We want to preprocess it to mean = 0.</p>\n<p>The goal of PCA is to reduce the dimensionality of this dataset from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> (where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>&lt;</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">k &lt; m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>) by finding a new orthonormal basis <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>β</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>=</mo><mo stretchy=\"false\">{</mo><msubsup><mi>β</mi><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msubsup><mi>β</mi><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\beta&#x27; = \\{\\beta&#x27;_1, \\dots, \\beta&#x27;_k\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.035em;vertical-align:-0.2831079999999999em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.05278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4168920000000003em;margin-left:-0.05278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831079999999999em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>β</mi><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo>≥</mo><mo>⋯</mo><mo>≥</mo><msubsup><mi>β</mi><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">\\beta&#x27;_1 \\geq \\dots \\geq \\beta&#x27;_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.24810799999999997em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.05278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.035em;vertical-align:-0.2831079999999999em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4168920000000003em;margin-left:-0.05278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831079999999999em;\"><span></span></span></span></span></span></span></span></span></span> that “best expresses” the variability in the data.</p>\n<p>After obtaining <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>β</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\beta&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, each data point <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"bold\">x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{x}_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.59444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is projected onto this new basis to obtain:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi mathvariant=\"bold\">y</mi><mi>i</mi></msub><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi mathvariant=\"bold\">x</mi><mi>i</mi></msub><mo>⋅</mo><msubsup><mi>β</mi><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">)</mo><msubsup><mi>β</mi><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo>+</mo><mo>⋯</mo><mo>+</mo><mo stretchy=\"false\">(</mo><msub><mi mathvariant=\"bold\">x</mi><mi>i</mi></msub><mo>⋅</mo><msubsup><mi>β</mi><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">)</mo><msubsup><mi>β</mi><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathbf{y}_i = (\\mathbf{x}_i \\cdot \\beta&#x27;_1)\\beta&#x27;_1 + \\dots + (\\mathbf{x}_i \\cdot \\beta&#x27;_k)\\beta&#x27;_k\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.63888em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">y</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.051892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8018919999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.05278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8018919999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.05278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.051892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8018919999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.05278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8018919999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.05278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>where we denote <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Y</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Y}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.02875em;\">Y</span></span></span></span></span> as a matrix whose column <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> is the coefficients of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"bold\">y</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{y}_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.63888em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">y</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n<p>We can also write this projection process as a matrix equation:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"bold\">Y</mi><mo>=</mo><mi mathvariant=\"bold\">B</mi><mi mathvariant=\"bold\">X</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Y} = \\mathbf{B}\\mathbf{X}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.02875em;\">Y</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span></span></span></span></span></p>\n<p>Where the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>'th row <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"bold\">B</mi><mi>i</mi></msub><mo>=</mo><msubsup><mi>β</mi><mi>i</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathbf{B}_i = \\beta&#x27;_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83611em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:-0.05278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span></span></span></span>. (This equation is also called change of basis)</p>\n<h2 id=\"optimization-objective\">Optimization Objective</h2>\n<p>We need to clairify what “best expresses” meant in the previous paragraph.</p>\n<p>In the best case, we would want each principal component have the highest variance. High variance indicates wide spread from the mean, which essentially means we retain as much information as possible from the original dataset.</p>\n<p>Futhermore, we would wish the covariance between the principal components is minimized. Having high covariance means the components are correlated, and would be redundant.</p>\n<p>Combined together, it’s easy to see in the most optimal case, the covariance matrix for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Y</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Y}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.02875em;\">Y</span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">Y</mi></msub><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mi mathvariant=\"bold\">Y</mi><msup><mi mathvariant=\"bold\">Y</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbf{C_Y} = \\frac{1}{n - 1}\\mathbf{Y}\\mathbf{Y}^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83611em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33027699999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbf mtight\" style=\"margin-right:0.02875em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2484389999999999em;vertical-align:-0.403331em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.403331em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.02875em;\">Y</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.02875em;\">Y</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span>, should be a diagonal matrix.</p>\n<p>Our problem now becomes finding <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">B</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{B}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span></span></span></span> that satisfies our goals, which we can find out by manipulating some equations:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msub><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">Y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mi mathvariant=\"bold\">Y</mi><msup><mi mathvariant=\"bold\">Y</mi><mi>T</mi></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold\">B</mi><mi mathvariant=\"bold\">X</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold\">B</mi><mi mathvariant=\"bold\">X</mi><msup><mo stretchy=\"false\">)</mo><mi>T</mi></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mi mathvariant=\"bold\">B</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold\">X</mi><msup><mi mathvariant=\"bold\">X</mi><mi>T</mi></msup><mo stretchy=\"false\">)</mo><msup><mi mathvariant=\"bold\">B</mi><mi>T</mi></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mi mathvariant=\"bold\">B</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold\">P</mi><mi mathvariant=\"bold\">D</mi><msup><mi mathvariant=\"bold\">P</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">)</mo><msup><mi mathvariant=\"bold\">B</mi><mi>T</mi></msup><mo separator=\"true\">,</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\n\\mathbf{C_Y} &amp;= \\frac{1}{n - 1}\\mathbf{Y}\\mathbf{Y}^T \\\\\n&amp;= \\frac{1}{n - 1}(\\mathbf{B}\\mathbf{X})(\\mathbf{B}\\mathbf{X})^T \\\\\n&amp;= \\frac{1}{n - 1}\\mathbf{B}(\\mathbf{X}\\mathbf{X}^T)\\mathbf{B}^T \\\\\n&amp;= \\frac{1}{n - 1}\\mathbf{B}(\\mathbf{P}\\mathbf{D}\\mathbf{P}^{-1})\\mathbf{B}^T,\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:9.56308em;vertical-align:-4.531539999999999em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.03154em;\"><span style=\"top:-7.03154em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33027699999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbf mtight\" style=\"margin-right:0.02875em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-4.64077em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"></span></span><span style=\"top:0.14076999999999873em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4.531539999999999em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.03154em;\"><span style=\"top:-7.03154em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.02875em;\">Y</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.02875em;\">Y</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span><span style=\"top:-4.64077em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span><span style=\"top:0.14076999999999873em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbf\">P</span></span><span class=\"mord\"><span class=\"mord mathbf\">D</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">P</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4.531539999999999em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{P}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">P</span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">D</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{D}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">D</span></span></span></span></span> are the eigenvectors and eigenvalues of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">X</mi><msup><mi mathvariant=\"bold\">X</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbf{X}\\mathbf{X}^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span>, respectively.</p>\n<p>Notice if we choose <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">B</mi><mo>=</mo><msubsup><mi mathvariant=\"bold\">P</mi><mi>k</mi><mi>T</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathbf{B} = \\mathbf{P}_k^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1244389999999997em;vertical-align:-0.2831079999999999em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">P</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-2.4168920000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831079999999999em;\"><span></span></span></span></span></span></span></span></span></span>, containing only the top <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> eigenvectors, simplifies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">Y</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{C_Y}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83611em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33027699999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbf mtight\" style=\"margin-right:0.02875em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> to:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msub><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">Y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo stretchy=\"false\">(</mo><msubsup><mi mathvariant=\"bold\">P</mi><mi>k</mi><mi>T</mi></msubsup><mi mathvariant=\"bold\">P</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"bold\">D</mi><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"bold\">P</mi><mrow><mo>−</mo><mn mathvariant=\"bold\">1</mn></mrow></msup><msub><mi mathvariant=\"bold\">P</mi><mi>k</mi></msub><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><msub><mi mathvariant=\"bold\">I</mi><mi>k</mi></msub><mi mathvariant=\"bold\">D</mi><msubsup><mi mathvariant=\"bold\">I</mi><mi>k</mi><mi>T</mi></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><msub><mi mathvariant=\"bold\">D</mi><mi>k</mi></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\n\\mathbf{C_Y} &amp;= \\frac{1}{n - 1}(\\mathbf{P}_k^T\\mathbf{P})\\mathbf{D}(\\mathbf{P^{-1}}\\mathbf{P}_k) \\\\  &amp;= \n\\frac{1}{n - 1} \\mathbf{I}_k\\mathbf{D}\\mathbf{I}_k^T \\\\ &amp;=\n\\frac{1}{n - 1} \\mathbf{D}_k\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:7.1723099999999995em;vertical-align:-3.3361549999999998em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.8361549999999998em;\"><span style=\"top:-5.836155em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33027699999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbf mtight\" style=\"margin-right:0.02875em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.445385em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.0546150000000003em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.3361549999999998em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.8361549999999998em;\"><span style=\"top:-5.836155em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">P</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-2.4530000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathbf\">P</span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathbf\">D</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathbf mtight\">1</span></span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">P</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.445385em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">I</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathbf\">D</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">I</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-2.4530000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-1.0546150000000003em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">D</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.3361549999999998em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"bold\">D</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{D}_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83611em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">D</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> contains only the largest <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> eigenvalues.</p>\n<p>Thus, We’ve shown choosing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">B</mi><mo>=</mo><msubsup><mi mathvariant=\"bold\">P</mi><mi>k</mi><mi>T</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathbf{B} = \\mathbf{P}_k^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1244389999999997em;vertical-align:-0.2831079999999999em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">P</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-2.4168920000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831079999999999em;\"><span></span></span></span></span></span></span></span></span></span> ensures that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">Y</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{C_Y}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83611em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33027699999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbf mtight\" style=\"margin-right:0.02875em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> is diagonal, effectively making each principal component capture distinct variance from the dataset, and “best expressing” the data as per our initial goal.</p>\n<p>We are also guaranteed that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">B</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{B}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span></span></span></span> forms a orthonormal basis, since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{P}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">P</span></span></span></span></span> is also orthonormal due to being eigenvectors of symmertrical matricies.</p>\n<h1 id=\"examples\">Examples</h1>\n<p>After roughly going through the idea behind PCA, I will give two examples to make the process even clearer.</p>\n<h2 id=\"example-1-tabular-data\">Example 1: Tabular Data</h2>\n<p>This example will go through the process of PCA mathematically via a simple tabular a data.</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"bold\">X</mi><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.3</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.6</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.5</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.9</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.3</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.9</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>8.2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.3</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>7.4</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.8</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.4</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.6</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.5</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbf{X} = \\begin{bmatrix}\n2.3 &amp; 2.6 &amp; 1.5 &amp; 3.1 \\\\\n4.9 &amp; 5.3 &amp; 3.2 &amp; 6.3 \\\\\n5.1 &amp; 5.2 &amp; 4.9 &amp; 5.3 \\\\\n8.2 &amp; 6.3 &amp; 7.4 &amp; 6.8 \\\\\n4.4 &amp; 3.1 &amp; 3.6 &amp; 3.5 \\\\\n\\end{bmatrix}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:6.00503em;vertical-align:-2.75004em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">3</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">9</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">1</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">8</span><span class=\"mord\">.</span><span class=\"mord\">2</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">6</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">3</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">2</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">3</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">2</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">9</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">7</span><span class=\"mord\">.</span><span class=\"mord\">4</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">1</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">3</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">3</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">8</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>Our dataset contains 4 data points aranged in columns and 5 features for each data point. I designed it so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is around 2 times of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is two times of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>5</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is independent.</p>\n<h3 id=\"step-1-center-the-data\">Step 1. Center the data</h3>\n<p>We first want to make the mean of the data 0 to calculate the covariance matrix later.</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi mathvariant=\"bold\">X</mi><mtext>c</mtext></msub><mo>=</mo><mi mathvariant=\"bold\">X</mi><mo>−</mo><mover accent=\"true\"><mi mathvariant=\"bold\">X</mi><mo>ˉ</mo></mover><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.075</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.225</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.875</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.725</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.025</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.375</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>1.725</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.375</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.025</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.075</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.225</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.175</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.025</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.875</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.225</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.375</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.75</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.55</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.05</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.15</mn></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbf{X}_{\\text{c}} = \\mathbf{X} - \\bar\\mathbf{X} = \n\\begin{bmatrix}\n    -0.075 &amp; 0.225 &amp; -0.875 &amp; 0.725 \\\\\n    -0.025 &amp; 0.375 &amp; -1.725 &amp; 1.375 \\\\\n    -0.025 &amp; 0.075 &amp; -0.225 &amp; 0.175 \\\\\n    1.025 &amp; -0.875 &amp; 0.225 &amp; -0.375 \\\\\n    0.75 &amp; -0.55 &amp; -0.05 &amp; -0.15 \\\\\n\\end{bmatrix}  \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83611em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">c</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76944em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8228899999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8228899999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span></span><span style=\"top:-3.25511em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">ˉ</span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:6.00503em;vertical-align:-2.75004em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>We use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">X</mi><mo>=</mo><msub><mi mathvariant=\"bold\">X</mi><mtext>c</mtext></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{X} = \\mathbf{X}_\\text{c}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83611em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> from now on.</p>\n<h3 id=\"step-2-calculate-the-symmetric-matrix-mathbf-x-mathbf-x-t\">Step 2. Calculate the symmetric matrix <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">X</mi><msup><mi mathvariant=\"bold\">X</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbf{X}\\mathbf{X}^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span></h3>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi mathvariant=\"bold\">X</mi><msup><mi mathvariant=\"bold\">X</mi><mi>T</mi></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.075</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.225</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.875</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.725</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.025</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.375</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>1.725</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.375</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.025</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.075</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.225</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.175</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.025</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.875</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.225</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.375</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.75</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.55</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.05</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.15</mn></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.075</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.025</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.025</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.025</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.75</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.225</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.375</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.075</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.875</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.55</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.875</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>1.725</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.225</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.225</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.05</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.725</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.375</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.175</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.375</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.15</mn></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.347</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.592</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.343</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.742</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.245</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.592</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.008</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.658</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>1.257</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.345</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.343</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.658</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.088</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.207</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.075</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.742</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>1.257</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.207</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.007</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.295</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.245</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.345</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.075</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.295</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.89</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\n\\mathbf{X}\\mathbf{X}^T &amp;= \n\\begin{bmatrix}\n    -0.075 &amp; 0.225 &amp; -0.875 &amp; 0.725 \\\\\n    -0.025 &amp; 0.375 &amp; -1.725 &amp; 1.375 \\\\\n    -0.025 &amp; 0.075 &amp; -0.225 &amp; 0.175 \\\\\n    1.025 &amp; -0.875 &amp; 0.225 &amp; -0.375 \\\\\n    0.75 &amp; -0.55 &amp; -0.05 &amp; -0.15 \\\\\n\\end{bmatrix} \n\\begin{bmatrix}\n    -0.075 &amp; -0.025 &amp; -0.025 &amp; 1.025 &amp; 0.75 \\\\\n    0.225 &amp; 0.375 &amp; 0.075 &amp; -0.875 &amp; -0.55 \\\\\n    -0.875 &amp; -1.725 &amp; -0.225 &amp; 0.225 &amp; -0.05 \\\\\n    0.725 &amp; 1.375 &amp; 0.175 &amp; -0.375 &amp; -0.15 \\\\\n\\end{bmatrix} \\\\ &amp;=\n\\begin{bmatrix}\n    1.347 &amp; 2.592 &amp; 0.343 &amp; -0.742 &amp; -0.245 \\\\\n    2.592 &amp; 5.008 &amp; 0.658 &amp; -1.257 &amp; -0.345 \\\\\n    0.343 &amp; 0.658 &amp; 0.088 &amp; -0.207 &amp; -0.075 \\\\\n    -0.742 &amp; -1.257 &amp; -0.207 &amp; 2.007 &amp; 1.295 \\\\\n    -0.245 &amp; -0.345 &amp; -0.075 &amp; 1.295 &amp; 0.89 \\\\\n\\end{bmatrix}\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:12.61006em;vertical-align:-6.05503em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:6.55503em;\"><span style=\"top:-8.55503em;\"><span class=\"pstrut\" style=\"height:5.25499em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:5.25499em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:6.05503em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:6.55503em;\"><span style=\"top:-8.55503em;\"><span class=\"pstrut\" style=\"height:5.25499em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6529999999999996em;\"><span style=\"top:-1.6499900000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.79999em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.3959900000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.4119800000000002em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.653em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.15003em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6500000000000004em;\"><span style=\"top:-4.8100000000000005em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.2099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6500000000000004em;\"><span style=\"top:-4.8100000000000005em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.2099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6500000000000004em;\"><span style=\"top:-4.8100000000000005em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.2099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6500000000000004em;\"><span style=\"top:-4.8100000000000005em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.2099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6500000000000004em;\"><span style=\"top:-4.8100000000000005em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">5</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.2099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6529999999999996em;\"><span style=\"top:-1.6499900000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.79999em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.3959900000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.4119800000000002em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.653em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.15003em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:5.25499em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">7</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">9</span><span class=\"mord\">2</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">3</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">4</span><span class=\"mord\">2</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">4</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">9</span><span class=\"mord\">2</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">8</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">6</span><span class=\"mord\">5</span><span class=\"mord\">8</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">7</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">3</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">6</span><span class=\"mord\">5</span><span class=\"mord\">8</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">8</span><span class=\"mord\">8</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">7</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">4</span><span class=\"mord\">2</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">7</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">7</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">7</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">9</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">4</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">9</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">9</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:6.05503em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h3 id=\"step-3-find-eigenvalues-and-vectors-for-the-matrix\">Step 3. Find eigenvalues and vectors for the matrix</h3>\n<p>You can use your favorite method to find the quantities, I just used a solver and this is the result:</p>\n<p>Eigen Values:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>4</mn><mo>⋅</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>7</mn></mrow></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>2.7</mn><mo>⋅</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>7</mn></mrow></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.002</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.351</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.986</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><annotation encoding=\"application/x-tex\">\n\\begin{bmatrix}\n    -4 \\cdot 10^{-7} &amp; -0.0 &amp; 0.0 &amp; 0.0 &amp; 0.0 \\\\\n    -0.0 &amp; -2.7 \\cdot 10^{-7} &amp; 0.0 &amp; 0.0 &amp; 0.0 \\\\\n    -0.0 &amp; -0.0 &amp; 0.002 &amp; 0.0 &amp; 0.0 \\\\\n    -0.0 &amp; -0.0 &amp; 0.0 &amp; 2.351 &amp; 0.0 \\\\\n    -0.0 &amp; -0.0 &amp; 0.0 &amp; 0.0 &amp; 6.986 \\\\\n\\end{bmatrix}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:6.00503em;vertical-align:-2.75004em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">2</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">5</span><span class=\"mord\">1</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">9</span><span class=\"mord\">8</span><span class=\"mord\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>Eigen Vectors:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.833</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.012</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.324</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.116</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.434</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.455</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.094</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.053</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.311</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.827</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.042</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.966</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.227</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.02</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.111</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.15</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.154</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.541</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.75</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.313</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.274</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.183</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.74</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.571</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.132</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><annotation encoding=\"application/x-tex\">\n\\begin{bmatrix}\n    -0.833 &amp; 0.012 &amp; 0.324 &amp; 0.116 &amp; -0.434 \\\\\n    0.455 &amp; 0.094 &amp; -0.053 &amp; 0.311 &amp; -0.827 \\\\\n    -0.042 &amp; -0.966 &amp; -0.227 &amp; 0.02 &amp; -0.111 \\\\\n    0.15 &amp; -0.154 &amp; 0.541 &amp; 0.75 &amp; 0.313 \\\\\n    -0.274 &amp; 0.183 &amp; -0.74 &amp; 0.571 &amp; 0.132 \\\\\n\\end{bmatrix}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:6.00503em;vertical-align:-2.75004em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">3</span><span class=\"mord\">3</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">4</span><span class=\"mord\">5</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">4</span><span class=\"mord\">2</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">2</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">9</span><span class=\"mord\">4</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">9</span><span class=\"mord\">6</span><span class=\"mord\">6</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">5</span><span class=\"mord\">4</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">4</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">5</span><span class=\"mord\">3</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">7</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">4</span><span class=\"mord\">1</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">6</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">1</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">7</span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">4</span><span class=\"mord\">3</span><span class=\"mord\">4</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">2</span><span class=\"mord\">7</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">1</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">3</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>(Note: torch.linalg.eigh returns the eigenvalues and vectors from small to big)</p>\n<h3 id=\"step-4-choose-your-k-and-do-reduction\">Step 4. Choose your <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> and do reduction</h3>\n<p>In this example, I will choose <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">k = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>, but usually you would want to choose the smallest <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> that can keep some percentage of the variance (95 or 99).</p>\n<p>When <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">k = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>, we choose</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">B</mi><mo>=</mo><msubsup><mi mathvariant=\"bold\">P</mi><mi>k</mi><mi>T</mi></msubsup><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{B} = \\mathbf{P}_k^T =</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1244389999999997em;vertical-align:-0.2831079999999999em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">P</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-2.4168920000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831079999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.324</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.053</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.227</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.541</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.74</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.116</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.311</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.02</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.75</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.571</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.434</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.827</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.111</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.313</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.132</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><annotation encoding=\"application/x-tex\">\n\\begin{bmatrix}\n    0.324 &amp; -0.053 &amp; -0.227 &amp; 0.541 &amp; -0.74 \\\\\n    0.116 &amp; 0.311 &amp; 0.02 &amp; 0.75 &amp; 0.571 \\\\\n    -0.434 &amp; -0.827 &amp; -0.111 &amp; 0.313 &amp; 0.132 \\\\\n\\end{bmatrix}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.6010299999999997em;vertical-align:-1.55002em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.0510099999999998em;\"><span style=\"top:-2.2500000000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.8099900000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.05101em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">4</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">6</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">4</span><span class=\"mord\">3</span><span class=\"mord\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">5</span><span class=\"mord\">3</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">1</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">2</span><span class=\"mord\">7</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">7</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">4</span><span class=\"mord\">1</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">4</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">7</span><span class=\"mord\">1</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.0510099999999998em;\"><span style=\"top:-2.2500000000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.8099900000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.05101em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>Then,</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mn>3</mn><msub><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">Y</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi mathvariant=\"bold\">B</mi><mi mathvariant=\"bold\">P</mi><mi mathvariant=\"bold\">D</mi><msup><mi mathvariant=\"bold\">P</mi><mrow><mo>−</mo><mn mathvariant=\"bold\">1</mn></mrow></msup><msup><mi mathvariant=\"bold\">B</mi><mrow><mo>−</mo><mn mathvariant=\"bold\">1</mn></mrow></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.002</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.351</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.986</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\n\\begin{aligned}\n3\\mathbf{C_Y} &amp;= \\mathbf{B}\\mathbf{P}\\mathbf{D}\\mathbf{P^{-1}}\\mathbf{B^{-1}} \\\\ &amp;=\n\\begin{bmatrix}\n    0.002 &amp; 0.0 &amp; 0.0 \\\\\n    0.0 &amp; 2.351 &amp; 0.0 \\\\\n    0.0 &amp; 0.0 &amp; 6.986 \\\\\n\\end{bmatrix}\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:5.425138em;vertical-align:-2.462569em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.962569em;\"><span style=\"top:-6.149471em;\"><span class=\"pstrut\" style=\"height:4.05101em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33027699999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbf mtight\" style=\"margin-right:0.02875em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.438461em;\"><span class=\"pstrut\" style=\"height:4.05101em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.462569em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.962569em;\"><span style=\"top:-6.149471em;\"><span class=\"pstrut\" style=\"height:4.05101em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"mord\"><span class=\"mord mathbf\">P</span></span><span class=\"mord\"><span class=\"mord mathbf\">D</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathbf mtight\">1</span></span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathbf mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.438461em;\"><span class=\"pstrut\" style=\"height:4.05101em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.0510099999999998em;\"><span style=\"top:-2.2500000000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.8099900000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.05101em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">2</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">5</span><span class=\"mord\">1</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">9</span><span class=\"mord\">8</span><span class=\"mord\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.0510099999999998em;\"><span style=\"top:-2.2500000000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.8099900000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.05101em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.462569em;\"><span></span></span></span></span></span></span></span></span></span></span><br>\nWhich is what we expected.</p>\n<h3 id=\"step-5-project-to-new-basis-and-reconstruct-data\">Step 5. Project to new basis and reconstruct data</h3>\n<p>We will now obtain the projection coefficient matrix <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Y</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Y}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.02875em;\">Y</span></span></span></span></span> and use it to reconstruct the data with the new basis.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Y</mi><mo>=</mo><mi mathvariant=\"bold\">B</mi><mi mathvariant=\"bold\">X</mi><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.018</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.031</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.018</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.03</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.181</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.826</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.503</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.148</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.475</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.762</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.895</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>1.608</mn></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Y} = \\mathbf{B}\\mathbf{X} =\n\\begin{bmatrix}\n    -0.018 &amp; -0.031 &amp; 0.018 &amp; 0.03 \\\\\n    1.181 &amp; -0.826 &amp; -0.503 &amp; 0.148 \\\\\n    0.475 &amp; -0.762 &amp; 1.895 &amp; -1.608 \\\\\n\\end{bmatrix}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.02875em;\">Y</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.6010299999999997em;vertical-align:-1.55002em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.0510099999999998em;\"><span style=\"top:-2.2500000000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.8099900000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.05101em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">8</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">1</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">4</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">3</span><span class=\"mord\">1</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">2</span><span class=\"mord\">6</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">6</span><span class=\"mord\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">8</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">0</span><span class=\"mord\">3</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">9</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">3</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">4</span><span class=\"mord\">8</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">6</span><span class=\"mord\">0</span><span class=\"mord\">8</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.0510099999999998em;\"><span style=\"top:-2.2500000000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.8099900000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.05101em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>And if we try to reconstruct the original matrix with our new basis:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"bold\">B</mi><mi>T</mi></msup><mi mathvariant=\"bold\">Y</mi><mo>+</mo><msub><mi>X</mi><mtext>mean</mtext></msub><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.3</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.6</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.5</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.9</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.3</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.9</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>8.2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.3</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>7.4</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.8</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.4</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.6</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.5</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbf{B}^T\\mathbf{Y} + X_\\text{mean} = \n\\begin{bmatrix}\n    2.3 &amp; 2.6 &amp; 1.5 &amp; 3.1 \\\\\n    4.9 &amp; 5.3 &amp; 3.2 &amp; 6.3 \\\\\n    5.1 &amp; 5.2 &amp; 4.9 &amp; 5.3 \\\\\n    8.2 &amp; 6.3 &amp; 7.4 &amp; 6.8 \\\\\n    4.4 &amp; 3.1 &amp; 3.6 &amp; 3.5 \\\\\n\\end{bmatrix}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.924661em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.02875em;\">Y</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">mean</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:6.00503em;vertical-align:-2.75004em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">3</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">9</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">1</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">8</span><span class=\"mord\">.</span><span class=\"mord\">2</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">6</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">3</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">2</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">3</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">2</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">9</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">7</span><span class=\"mord\">.</span><span class=\"mord\">4</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">1</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">3</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">3</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">8</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>And if we use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">k = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.306</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.61</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.494</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.09</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.899</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.298</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.201</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.302</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.096</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.193</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.904</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.307</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>8.21</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.317</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>7.39</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.784</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.387</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.077</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.613</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.522</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><annotation encoding=\"application/x-tex\">\n\\begin{bmatrix}\n    2.306 &amp; 2.61 &amp; 1.494 &amp; 3.09 \\\\\n    4.899 &amp; 5.298 &amp; 3.201 &amp; 6.302 \\\\\n    5.096 &amp; 5.193 &amp; 4.904 &amp; 5.307 \\\\\n    8.21 &amp; 6.317 &amp; 7.39 &amp; 6.784 \\\\\n    4.387 &amp; 3.077 &amp; 3.613 &amp; 3.522 \\\\\n\\end{bmatrix}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:6.00503em;vertical-align:-2.75004em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mord\">6</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">9</span><span class=\"mord\">9</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">9</span><span class=\"mord\">6</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">8</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">1</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">8</span><span class=\"mord\">7</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">6</span><span class=\"mord\">1</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">9</span><span class=\"mord\">8</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">3</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">7</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">7</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">4</span><span class=\"mord\">9</span><span class=\"mord\">4</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">1</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">4</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">7</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">9</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">6</span><span class=\"mord\">1</span><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">9</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mord\">2</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mord\">7</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">8</span><span class=\"mord\">4</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">2</span><span class=\"mord\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>And finally, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">k = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.169</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.706</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.553</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.073</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.532</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.556</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.357</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.255</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.072</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.21</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.914</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.304</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>7.324</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.937</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>7.767</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.672</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.713</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.549</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.9</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.438</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><annotation encoding=\"application/x-tex\">\n\\begin{bmatrix}\n    2.169 &amp; 2.706 &amp; 1.553 &amp; 3.073 \\\\\n    4.532 &amp; 5.556 &amp; 3.357 &amp; 6.255 \\\\\n    5.072 &amp; 5.21 &amp; 4.914 &amp; 5.304 \\\\\n    7.324 &amp; 6.937 &amp; 7.767 &amp; 6.672 \\\\\n    3.713 &amp; 3.549 &amp; 3.9 &amp; 3.438 \\\\\n\\end{bmatrix}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:6.00503em;vertical-align:-2.75004em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">9</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">3</span><span class=\"mord\">2</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">2</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">7</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">4</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">1</span><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">0</span><span class=\"mord\">6</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">5</span><span class=\"mord\">6</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">1</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">9</span><span class=\"mord\">3</span><span class=\"mord\">7</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">4</span><span class=\"mord\">9</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">5</span><span class=\"mord\">3</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">5</span><span class=\"mord\">7</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">9</span><span class=\"mord\">1</span><span class=\"mord\">4</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">7</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">6</span><span class=\"mord\">7</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">9</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">3</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mord\">4</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">6</span><span class=\"mord\">7</span><span class=\"mord\">2</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">4</span><span class=\"mord\">3</span><span class=\"mord\">8</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>As you can see, PCA did a pretty good job in perserving the relationships of features with fewer dimensions.</p>\n<h2 id=\"example-2-mnist\">Example 2: MNIST</h2>\n<p>MNIST is a classic hand writing digit dataset. We will use PCA to reduce the dimension of it and check the reconstruction results w.r.t different <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>.</p>\n<p><a href=\"https://colab.research.google.com/drive/1l0tPmVIBreJFQmfSA2u19g60MXAk8pa8?usp=sharing\">Here is the google colab for this example</a>, I will only show the result and the code for PCA in this blog.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">PCA</span>(<span class=\"params\">images, k</span>):</span><br><span class=\"line\">  <span class=\"comment\"># Flatten the image and center the data</span></span><br><span class=\"line\">  images = images.reshape([images.shape[<span class=\"number\">0</span>], -<span class=\"number\">1</span>])</span><br><span class=\"line\">  mean = images.mean(<span class=\"number\">0</span>)</span><br><span class=\"line\">  images = images - mean </span><br><span class=\"line\">  <span class=\"comment\"># Calculate covariance matrix and eigenvalues/vectors</span></span><br><span class=\"line\">  cov_matrix = torch.matmul(images.T, images) / (images.shape[<span class=\"number\">0</span>] - <span class=\"number\">1</span>)</span><br><span class=\"line\">  eigen_values, eigen_vectors = torch.linalg.eigh(cov_matrix)</span><br><span class=\"line\">  <span class=\"comment\"># Get eigenvectors w.r.t top k eigenvalues</span></span><br><span class=\"line\">  eigen_vectors_k = eigen_vectors[:, -k:]</span><br><span class=\"line\">  <span class=\"comment\"># Get Y, matrix with coefficients w.r.t new basis</span></span><br><span class=\"line\">  projected_data = torch.matmul(images, eigen_vectors_k)</span><br><span class=\"line\">  <span class=\"comment\"># Reconstruct images</span></span><br><span class=\"line\">  new_images = torch.matmul(projected_data, eigen_vectors_k.T) + mean</span><br><span class=\"line\">  <span class=\"keyword\">return</span> new_images</span><br></pre></td></tr></table></figure>\n<p><img src=\"PCA.png\" alt=\"PCA\"></p>\n<h1 id=\"afterword\">Afterword</h1>\n<p>PCA is quite an old, yet powerful linear dimension reduction algorithm. The whole encoder-decoder architecture, and embedding systems all use dimension reduction, so this is very important! If you want to learn more about dimension reduction, (deep)auto-encoders are a good place to start. Good luck!</p>\n<p>It took me quite some time to compose this blog, so I hope it was clear and concise for you to understand.</p>\n<p>My freshman year is finally over, and after my grades all roll out, I think I will make a short blog to summarize up my first year in college!</p>\n<p>Taiwan food yummy~</p>\n<h1 id=\"references\">References</h1>\n<p><a href=\"https://www.cs.cmu.edu/~elaw/papers/pca.pdf\">A Tutorial on Principal Component Analysis</a></p>\n<p><a href=\"https://youtu.be/iwh5o_M4BNU?si=mPfm6E6RLNkHPlQw\">ML Lecture 13: Unsupervised Learning - Linear Methods</a></p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>Hey guys! Since class is over and im back at Taiwan, I want to share some learning on some mathematical foundations for ML. I’m not sure what I want to cover nor how deep I want to cover, although I’ll try to make this as approachable for people.</p>\n<p>Prerequisites:</p>\n<p>Matrix Operations and Identities, Basis, Diagonalizability, Eigenvalues and Vectors, Variance and Covariance</p>\n<h1 id=\"what-is-pca-and-why\">What is PCA and Why?</h1>\n<p>Principal Component Analysis (PCA) is a powerful statistical technique commonly used for dimension reduction and simplification, while retaining the important information in the data.</p>\n<p>Consider a typical RGB image with dimensions of 224 x 224 x 3, totaling 150,528 data points for a single image. That is quite alot of data points for each image! In reality, many of these points are correlated and don’t significantly contribute to our understanding of the image’s content—altering a few pixels won’t change whether an image of a cat is recognized as a dog.</p>\n<p>Performing dimension reduction with PCA can speed up computation by reducing the number of dimensions to process, allowing only the most crucial information to be retained while removing redundant, useless data (noise).</p>\n<h1 id=\"formulating-and-solving-pca\">Formulating and Solving PCA</h1>\n<p>Consider a dataset where each data point <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"bold\">x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{x}_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.59444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> features, represented as columns in the matrix <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">X</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{X}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span></span></span></span>. Here, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">X</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{X}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span></span></span></span> is a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>×</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">m \\times n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> matrix with datapoints <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"bold\">x</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msub><mi mathvariant=\"bold\">x</mi><mi>n</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{x}_1, \\dots, \\mathbf{x}_n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.63888em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>. We want to preprocess it to mean = 0.</p>\n<p>The goal of PCA is to reduce the dimensionality of this dataset from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> (where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>&lt;</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">k &lt; m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73354em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>) by finding a new orthonormal basis <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>β</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>=</mo><mo stretchy=\"false\">{</mo><msubsup><mi>β</mi><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo separator=\"true\">,</mo><mo>…</mo><mo separator=\"true\">,</mo><msubsup><mi>β</mi><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\beta&#x27; = \\{\\beta&#x27;_1, \\dots, \\beta&#x27;_k\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.035em;vertical-align:-0.2831079999999999em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.05278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\">…</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4168920000000003em;margin-left:-0.05278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831079999999999em;\"><span></span></span></span></span></span></span><span class=\"mclose\">}</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>β</mi><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo>≥</mo><mo>⋯</mo><mo>≥</mo><msubsup><mi>β</mi><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">\\beta&#x27;_1 \\geq \\dots \\geq \\beta&#x27;_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.24810799999999997em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4518920000000004em;margin-left:-0.05278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.24810799999999997em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.035em;vertical-align:-0.2831079999999999em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.4168920000000003em;margin-left:-0.05278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831079999999999em;\"><span></span></span></span></span></span></span></span></span></span> that “best expresses” the variability in the data.</p>\n<p>After obtaining <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>β</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">\\beta&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.946332em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, each data point <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"bold\">x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{x}_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.59444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is projected onto this new basis to obtain:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi mathvariant=\"bold\">y</mi><mi>i</mi></msub><mo>=</mo><mo stretchy=\"false\">(</mo><msub><mi mathvariant=\"bold\">x</mi><mi>i</mi></msub><mo>⋅</mo><msubsup><mi>β</mi><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">)</mo><msubsup><mi>β</mi><mn>1</mn><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo>+</mo><mo>⋯</mo><mo>+</mo><mo stretchy=\"false\">(</mo><msub><mi mathvariant=\"bold\">x</mi><mi>i</mi></msub><mo>⋅</mo><msubsup><mi>β</mi><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup><mo stretchy=\"false\">)</mo><msubsup><mi>β</mi><mi>k</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathbf{y}_i = (\\mathbf{x}_i \\cdot \\beta&#x27;_1)\\beta&#x27;_1 + \\dots + (\\mathbf{x}_i \\cdot \\beta&#x27;_k)\\beta&#x27;_k\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.63888em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">y</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.051892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8018919999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.05278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8018919999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.05278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">x</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.051892em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8018919999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.05278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8018919999999999em;\"><span style=\"top:-2.4530000000000003em;margin-left:-0.05278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>where we denote <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Y</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Y}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.02875em;\">Y</span></span></span></span></span> as a matrix whose column <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> is the coefficients of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"bold\">y</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{y}_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.63888em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.01597em;\">y</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>.</p>\n<p>We can also write this projection process as a matrix equation:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"bold\">Y</mi><mo>=</mo><mi mathvariant=\"bold\">B</mi><mi mathvariant=\"bold\">X</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Y} = \\mathbf{B}\\mathbf{X}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.02875em;\">Y</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span></span></span></span></span></p>\n<p>Where the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>'th row <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"bold\">B</mi><mi>i</mi></msub><mo>=</mo><msubsup><mi>β</mi><mi>i</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathbf{B}_i = \\beta&#x27;_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83611em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.010556em;vertical-align:-0.258664em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05278em;\">β</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-2.441336em;margin-left:-0.05278em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.258664em;\"><span></span></span></span></span></span></span></span></span></span>. (This equation is also called change of basis)</p>\n<h2 id=\"optimization-objective\">Optimization Objective</h2>\n<p>We need to clairify what “best expresses” meant in the previous paragraph.</p>\n<p>In the best case, we would want each principal component have the highest variance. High variance indicates wide spread from the mean, which essentially means we retain as much information as possible from the original dataset.</p>\n<p>Futhermore, we would wish the covariance between the principal components is minimized. Having high covariance means the components are correlated, and would be redundant.</p>\n<p>Combined together, it’s easy to see in the most optimal case, the covariance matrix for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Y</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Y}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.02875em;\">Y</span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">Y</mi></msub><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mi mathvariant=\"bold\">Y</mi><msup><mi mathvariant=\"bold\">Y</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbf{C_Y} = \\frac{1}{n - 1}\\mathbf{Y}\\mathbf{Y}^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83611em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33027699999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbf mtight\" style=\"margin-right:0.02875em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.2484389999999999em;vertical-align:-0.403331em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.845108em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.403331em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.02875em;\">Y</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.02875em;\">Y</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span>, should be a diagonal matrix.</p>\n<p>Our problem now becomes finding <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">B</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{B}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span></span></span></span> that satisfies our goals, which we can find out by manipulating some equations:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msub><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">Y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mi mathvariant=\"bold\">Y</mi><msup><mi mathvariant=\"bold\">Y</mi><mi>T</mi></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold\">B</mi><mi mathvariant=\"bold\">X</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold\">B</mi><mi mathvariant=\"bold\">X</mi><msup><mo stretchy=\"false\">)</mo><mi>T</mi></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mi mathvariant=\"bold\">B</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold\">X</mi><msup><mi mathvariant=\"bold\">X</mi><mi>T</mi></msup><mo stretchy=\"false\">)</mo><msup><mi mathvariant=\"bold\">B</mi><mi>T</mi></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mi mathvariant=\"bold\">B</mi><mo stretchy=\"false\">(</mo><mi mathvariant=\"bold\">P</mi><mi mathvariant=\"bold\">D</mi><msup><mi mathvariant=\"bold\">P</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy=\"false\">)</mo><msup><mi mathvariant=\"bold\">B</mi><mi>T</mi></msup><mo separator=\"true\">,</mo></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\n\\mathbf{C_Y} &amp;= \\frac{1}{n - 1}\\mathbf{Y}\\mathbf{Y}^T \\\\\n&amp;= \\frac{1}{n - 1}(\\mathbf{B}\\mathbf{X})(\\mathbf{B}\\mathbf{X})^T \\\\\n&amp;= \\frac{1}{n - 1}\\mathbf{B}(\\mathbf{X}\\mathbf{X}^T)\\mathbf{B}^T \\\\\n&amp;= \\frac{1}{n - 1}\\mathbf{B}(\\mathbf{P}\\mathbf{D}\\mathbf{P}^{-1})\\mathbf{B}^T,\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:9.56308em;vertical-align:-4.531539999999999em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.03154em;\"><span style=\"top:-7.03154em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33027699999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbf mtight\" style=\"margin-right:0.02875em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-4.64077em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"></span></span><span style=\"top:0.14076999999999873em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4.531539999999999em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:5.03154em;\"><span style=\"top:-7.03154em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.02875em;\">Y</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.02875em;\">Y</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span><span style=\"top:-4.64077em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"mclose\">)</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span><span style=\"top:0.14076999999999873em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathbf\">P</span></span><span class=\"mord\"><span class=\"mord mathbf\">D</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">P</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mpunct\">,</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:4.531539999999999em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{P}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">P</span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">D</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{D}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">D</span></span></span></span></span> are the eigenvectors and eigenvalues of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">X</mi><msup><mi mathvariant=\"bold\">X</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbf{X}\\mathbf{X}^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span>, respectively.</p>\n<p>Notice if we choose <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">B</mi><mo>=</mo><msubsup><mi mathvariant=\"bold\">P</mi><mi>k</mi><mi>T</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathbf{B} = \\mathbf{P}_k^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1244389999999997em;vertical-align:-0.2831079999999999em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">P</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-2.4168920000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831079999999999em;\"><span></span></span></span></span></span></span></span></span></span>, containing only the top <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> eigenvectors, simplifies <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">Y</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{C_Y}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83611em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33027699999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbf mtight\" style=\"margin-right:0.02875em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> to:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msub><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">Y</mi></msub></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><mo stretchy=\"false\">(</mo><msubsup><mi mathvariant=\"bold\">P</mi><mi>k</mi><mi>T</mi></msubsup><mi mathvariant=\"bold\">P</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"bold\">D</mi><mo stretchy=\"false\">(</mo><msup><mi mathvariant=\"bold\">P</mi><mrow><mo>−</mo><mn mathvariant=\"bold\">1</mn></mrow></msup><msub><mi mathvariant=\"bold\">P</mi><mi>k</mi></msub><mo stretchy=\"false\">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><msub><mi mathvariant=\"bold\">I</mi><mi>k</mi></msub><mi mathvariant=\"bold\">D</mi><msubsup><mi mathvariant=\"bold\">I</mi><mi>k</mi><mi>T</mi></msubsup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mn>1</mn><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></mfrac><msub><mi mathvariant=\"bold\">D</mi><mi>k</mi></msub></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\n\\mathbf{C_Y} &amp;= \\frac{1}{n - 1}(\\mathbf{P}_k^T\\mathbf{P})\\mathbf{D}(\\mathbf{P^{-1}}\\mathbf{P}_k) \\\\  &amp;= \n\\frac{1}{n - 1} \\mathbf{I}_k\\mathbf{D}\\mathbf{I}_k^T \\\\ &amp;=\n\\frac{1}{n - 1} \\mathbf{D}_k\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:7.1723099999999995em;vertical-align:-3.3361549999999998em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.8361549999999998em;\"><span style=\"top:-5.836155em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33027699999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbf mtight\" style=\"margin-right:0.02875em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.445385em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"></span></span><span style=\"top:-1.0546150000000003em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.3361549999999998em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.8361549999999998em;\"><span style=\"top:-5.836155em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">P</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-2.4530000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathbf\">P</span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathbf\">D</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathbf mtight\">1</span></span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">P</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span><span style=\"top:-3.445385em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">I</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathbf\">D</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">I</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-2.4530000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.247em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-1.0546150000000003em;\"><span class=\"pstrut\" style=\"height:3.32144em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7693300000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">D</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.3361549999999998em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"bold\">D</mi><mi>k</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{D}_k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83611em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">D</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33610799999999996em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> contains only the largest <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> eigenvalues.</p>\n<p>Thus, We’ve shown choosing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">B</mi><mo>=</mo><msubsup><mi mathvariant=\"bold\">P</mi><mi>k</mi><mi>T</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\mathbf{B} = \\mathbf{P}_k^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1244389999999997em;vertical-align:-0.2831079999999999em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">P</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-2.4168920000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831079999999999em;\"><span></span></span></span></span></span></span></span></span></span> ensures that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">Y</mi></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{C_Y}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83611em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33027699999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbf mtight\" style=\"margin-right:0.02875em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span> is diagonal, effectively making each principal component capture distinct variance from the dataset, and “best expressing” the data as per our initial goal.</p>\n<p>We are also guaranteed that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">B</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{B}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span></span></span></span> forms a orthonormal basis, since <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">P</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{P}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">P</span></span></span></span></span> is also orthonormal due to being eigenvectors of symmertrical matricies.</p>\n<h1 id=\"examples\">Examples</h1>\n<p>After roughly going through the idea behind PCA, I will give two examples to make the process even clearer.</p>\n<h2 id=\"example-1-tabular-data\">Example 1: Tabular Data</h2>\n<p>This example will go through the process of PCA mathematically via a simple tabular a data.</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi mathvariant=\"bold\">X</mi><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.3</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.6</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.5</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.9</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.3</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.9</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>8.2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.3</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>7.4</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.8</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.4</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.6</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.5</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbf{X} = \\begin{bmatrix}\n2.3 &amp; 2.6 &amp; 1.5 &amp; 3.1 \\\\\n4.9 &amp; 5.3 &amp; 3.2 &amp; 6.3 \\\\\n5.1 &amp; 5.2 &amp; 4.9 &amp; 5.3 \\\\\n8.2 &amp; 6.3 &amp; 7.4 &amp; 6.8 \\\\\n4.4 &amp; 3.1 &amp; 3.6 &amp; 3.5 \\\\\n\\end{bmatrix}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:6.00503em;vertical-align:-2.75004em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">3</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">9</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">1</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">8</span><span class=\"mord\">.</span><span class=\"mord\">2</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">6</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">3</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">2</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">3</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">2</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">9</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">7</span><span class=\"mord\">.</span><span class=\"mord\">4</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">1</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">3</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">3</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">8</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>Our dataset contains 4 data points aranged in columns and 5 features for each data point. I designed it so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>2</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is around 2 times of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>4</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is two times of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>5</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mn>3</mn></msub></mrow><annotation encoding=\"application/x-tex\">x_3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is independent.</p>\n<h3 id=\"step-1-center-the-data\">Step 1. Center the data</h3>\n<p>We first want to make the mean of the data 0 to calculate the covariance matrix later.</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi mathvariant=\"bold\">X</mi><mtext>c</mtext></msub><mo>=</mo><mi mathvariant=\"bold\">X</mi><mo>−</mo><mover accent=\"true\"><mi mathvariant=\"bold\">X</mi><mo>ˉ</mo></mover><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.075</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.225</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.875</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.725</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.025</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.375</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>1.725</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.375</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.025</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.075</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.225</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.175</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.025</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.875</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.225</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.375</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.75</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.55</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.05</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.15</mn></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbf{X}_{\\text{c}} = \\mathbf{X} - \\bar\\mathbf{X} = \n\\begin{bmatrix}\n    -0.075 &amp; 0.225 &amp; -0.875 &amp; 0.725 \\\\\n    -0.025 &amp; 0.375 &amp; -1.725 &amp; 1.375 \\\\\n    -0.025 &amp; 0.075 &amp; -0.225 &amp; 0.175 \\\\\n    1.025 &amp; -0.875 &amp; 0.225 &amp; -0.375 \\\\\n    0.75 &amp; -0.55 &amp; -0.05 &amp; -0.15 \\\\\n\\end{bmatrix}  \n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.83611em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">c</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76944em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8228899999999999em;vertical-align:0em;\"></span><span class=\"mord accent\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8228899999999999em;\"><span style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span></span><span style=\"top:-3.25511em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"accent-body\" style=\"left:-0.16666em;\"><span class=\"mord\">ˉ</span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:6.00503em;vertical-align:-2.75004em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<p>We use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">X</mi><mo>=</mo><msub><mi mathvariant=\"bold\">X</mi><mtext>c</mtext></msub></mrow><annotation encoding=\"application/x-tex\">\\mathbf{X} = \\mathbf{X}_\\text{c}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83611em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">c</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> from now on.</p>\n<h3 id=\"step-2-calculate-the-symmetric-matrix-mathbf-x-mathbf-x-t\">Step 2. Calculate the symmetric matrix <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">X</mi><msup><mi mathvariant=\"bold\">X</mi><mi>T</mi></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbf{X}\\mathbf{X}^T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8413309999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span></span></h3>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mi mathvariant=\"bold\">X</mi><msup><mi mathvariant=\"bold\">X</mi><mi>T</mi></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.075</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.225</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.875</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.725</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.025</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.375</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>1.725</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.375</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.025</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.075</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.225</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.175</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.025</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.875</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.225</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.375</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.75</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.55</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.05</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.15</mn></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.075</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.025</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.025</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.025</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.75</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.225</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.375</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.075</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.875</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.55</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.875</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>1.725</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.225</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.225</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.05</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.725</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.375</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.175</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.375</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.15</mn></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.347</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.592</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.343</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.742</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.245</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.592</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.008</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.658</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>1.257</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.345</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.343</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.658</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.088</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.207</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.075</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.742</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>1.257</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.207</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.007</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.295</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.245</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.345</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.075</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.295</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.89</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\n\\mathbf{X}\\mathbf{X}^T &amp;= \n\\begin{bmatrix}\n    -0.075 &amp; 0.225 &amp; -0.875 &amp; 0.725 \\\\\n    -0.025 &amp; 0.375 &amp; -1.725 &amp; 1.375 \\\\\n    -0.025 &amp; 0.075 &amp; -0.225 &amp; 0.175 \\\\\n    1.025 &amp; -0.875 &amp; 0.225 &amp; -0.375 \\\\\n    0.75 &amp; -0.55 &amp; -0.05 &amp; -0.15 \\\\\n\\end{bmatrix} \n\\begin{bmatrix}\n    -0.075 &amp; -0.025 &amp; -0.025 &amp; 1.025 &amp; 0.75 \\\\\n    0.225 &amp; 0.375 &amp; 0.075 &amp; -0.875 &amp; -0.55 \\\\\n    -0.875 &amp; -1.725 &amp; -0.225 &amp; 0.225 &amp; -0.05 \\\\\n    0.725 &amp; 1.375 &amp; 0.175 &amp; -0.375 &amp; -0.15 \\\\\n\\end{bmatrix} \\\\ &amp;=\n\\begin{bmatrix}\n    1.347 &amp; 2.592 &amp; 0.343 &amp; -0.742 &amp; -0.245 \\\\\n    2.592 &amp; 5.008 &amp; 0.658 &amp; -1.257 &amp; -0.345 \\\\\n    0.343 &amp; 0.658 &amp; 0.088 &amp; -0.207 &amp; -0.075 \\\\\n    -0.742 &amp; -1.257 &amp; -0.207 &amp; 2.007 &amp; 1.295 \\\\\n    -0.245 &amp; -0.345 &amp; -0.075 &amp; 1.295 &amp; 0.89 \\\\\n\\end{bmatrix}\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:12.61006em;vertical-align:-6.05503em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:6.55503em;\"><span style=\"top:-8.55503em;\"><span class=\"pstrut\" style=\"height:5.25499em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913309999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:5.25499em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:6.05503em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:6.55503em;\"><span style=\"top:-8.55503em;\"><span class=\"pstrut\" style=\"height:5.25499em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6529999999999996em;\"><span style=\"top:-1.6499900000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.79999em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.3959900000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.4119800000000002em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.653em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.15003em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6500000000000004em;\"><span style=\"top:-4.8100000000000005em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.2099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6500000000000004em;\"><span style=\"top:-4.8100000000000005em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.2099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6500000000000004em;\"><span style=\"top:-4.8100000000000005em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.2099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6500000000000004em;\"><span style=\"top:-4.8100000000000005em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.2099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6500000000000004em;\"><span style=\"top:-4.8100000000000005em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.61em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">5</span></span></span><span style=\"top:-2.4099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.2099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.6529999999999996em;\"><span style=\"top:-1.6499900000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.79999em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.3959900000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.4119800000000002em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.653em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.15003em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-2.25em;\"><span class=\"pstrut\" style=\"height:5.25499em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">7</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">9</span><span class=\"mord\">2</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">3</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">4</span><span class=\"mord\">2</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">4</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">9</span><span class=\"mord\">2</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">8</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">6</span><span class=\"mord\">5</span><span class=\"mord\">8</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">7</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">3</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">6</span><span class=\"mord\">5</span><span class=\"mord\">8</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">8</span><span class=\"mord\">8</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">7</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">4</span><span class=\"mord\">2</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">7</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">7</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">7</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">9</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">4</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">4</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">9</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">9</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:6.05503em;\"><span></span></span></span></span></span></span></span></span></span></span></span></p>\n<h3 id=\"step-3-find-eigenvalues-and-vectors-for-the-matrix\">Step 3. Find eigenvalues and vectors for the matrix</h3>\n<p>You can use your favorite method to find the quantities, I just used a solver and this is the result:</p>\n<p>Eigen Values:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>4</mn><mo>⋅</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>7</mn></mrow></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>2.7</mn><mo>⋅</mo><mn>1</mn><msup><mn>0</mn><mrow><mo>−</mo><mn>7</mn></mrow></msup></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.002</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.351</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.0</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.986</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><annotation encoding=\"application/x-tex\">\n\\begin{bmatrix}\n    -4 \\cdot 10^{-7} &amp; -0.0 &amp; 0.0 &amp; 0.0 &amp; 0.0 \\\\\n    -0.0 &amp; -2.7 \\cdot 10^{-7} &amp; 0.0 &amp; 0.0 &amp; 0.0 \\\\\n    -0.0 &amp; -0.0 &amp; 0.002 &amp; 0.0 &amp; 0.0 \\\\\n    -0.0 &amp; -0.0 &amp; 0.0 &amp; 2.351 &amp; 0.0 \\\\\n    -0.0 &amp; -0.0 &amp; 0.0 &amp; 0.0 &amp; 6.986 \\\\\n\\end{bmatrix}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:6.00503em;vertical-align:-2.75004em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mtight\">7</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">2</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">5</span><span class=\"mord\">1</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">9</span><span class=\"mord\">8</span><span class=\"mord\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>Eigen Vectors:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.833</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.012</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.324</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.116</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.434</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.455</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.094</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.053</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.311</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.827</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.042</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.966</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.227</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.02</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.111</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.15</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.154</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.541</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.75</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.313</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.274</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.183</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.74</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.571</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.132</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><annotation encoding=\"application/x-tex\">\n\\begin{bmatrix}\n    -0.833 &amp; 0.012 &amp; 0.324 &amp; 0.116 &amp; -0.434 \\\\\n    0.455 &amp; 0.094 &amp; -0.053 &amp; 0.311 &amp; -0.827 \\\\\n    -0.042 &amp; -0.966 &amp; -0.227 &amp; 0.02 &amp; -0.111 \\\\\n    0.15 &amp; -0.154 &amp; 0.541 &amp; 0.75 &amp; 0.313 \\\\\n    -0.274 &amp; 0.183 &amp; -0.74 &amp; 0.571 &amp; 0.132 \\\\\n\\end{bmatrix}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:6.00503em;vertical-align:-2.75004em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">3</span><span class=\"mord\">3</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">4</span><span class=\"mord\">5</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">4</span><span class=\"mord\">2</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">2</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">9</span><span class=\"mord\">4</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">9</span><span class=\"mord\">6</span><span class=\"mord\">6</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">5</span><span class=\"mord\">4</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">4</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">5</span><span class=\"mord\">3</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">7</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">4</span><span class=\"mord\">1</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">6</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">1</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">7</span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">4</span><span class=\"mord\">3</span><span class=\"mord\">4</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">2</span><span class=\"mord\">7</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">1</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">3</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>(Note: torch.linalg.eigh returns the eigenvalues and vectors from small to big)</p>\n<h3 id=\"step-4-choose-your-k-and-do-reduction\">Step 4. Choose your <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> and do reduction</h3>\n<p>In this example, I will choose <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">k = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>, but usually you would want to choose the smallest <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> that can keep some percentage of the variance (95 or 99).</p>\n<p>When <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">k = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>, we choose</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">B</mi><mo>=</mo><msubsup><mi mathvariant=\"bold\">P</mi><mi>k</mi><mi>T</mi></msubsup><mo>=</mo></mrow><annotation encoding=\"application/x-tex\">\\mathbf{B} = \\mathbf{P}_k^T =</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1244389999999997em;vertical-align:-0.2831079999999999em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">P</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-2.4168920000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831079999999999em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span></span></span></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.324</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.053</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.227</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.541</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.74</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.116</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.311</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.02</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.75</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.571</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.434</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.827</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.111</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.313</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.132</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><annotation encoding=\"application/x-tex\">\n\\begin{bmatrix}\n    0.324 &amp; -0.053 &amp; -0.227 &amp; 0.541 &amp; -0.74 \\\\\n    0.116 &amp; 0.311 &amp; 0.02 &amp; 0.75 &amp; 0.571 \\\\\n    -0.434 &amp; -0.827 &amp; -0.111 &amp; 0.313 &amp; 0.132 \\\\\n\\end{bmatrix}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.6010299999999997em;vertical-align:-1.55002em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.0510099999999998em;\"><span style=\"top:-2.2500000000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.8099900000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.05101em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">4</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">6</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">4</span><span class=\"mord\">3</span><span class=\"mord\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">5</span><span class=\"mord\">3</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">1</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">2</span><span class=\"mord\">7</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">2</span><span class=\"mord\">7</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">2</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">4</span><span class=\"mord\">1</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">4</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">7</span><span class=\"mord\">1</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">3</span><span class=\"mord\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.0510099999999998em;\"><span style=\"top:-2.2500000000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.8099900000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.05101em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>Then,</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mtable rowspacing=\"0.24999999999999992em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mn>3</mn><msub><mi mathvariant=\"bold\">C</mi><mi mathvariant=\"bold\">Y</mi></msub></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mi mathvariant=\"bold\">B</mi><mi mathvariant=\"bold\">P</mi><mi mathvariant=\"bold\">D</mi><msup><mi mathvariant=\"bold\">P</mi><mrow><mo>−</mo><mn mathvariant=\"bold\">1</mn></mrow></msup><msup><mi mathvariant=\"bold\">B</mi><mrow><mo>−</mo><mn mathvariant=\"bold\">1</mn></mrow></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.002</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.351</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.0</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.986</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\n\\begin{aligned}\n3\\mathbf{C_Y} &amp;= \\mathbf{B}\\mathbf{P}\\mathbf{D}\\mathbf{P^{-1}}\\mathbf{B^{-1}} \\\\ &amp;=\n\\begin{bmatrix}\n    0.002 &amp; 0.0 &amp; 0.0 \\\\\n    0.0 &amp; 2.351 &amp; 0.0 \\\\\n    0.0 &amp; 0.0 &amp; 6.986 \\\\\n\\end{bmatrix}\n\\end{aligned}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:5.425138em;vertical-align:-2.462569em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.962569em;\"><span style=\"top:-6.149471em;\"><span class=\"pstrut\" style=\"height:4.05101em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">C</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.33027699999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathbf mtight\" style=\"margin-right:0.02875em;\">Y</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.438461em;\"><span class=\"pstrut\" style=\"height:4.05101em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.462569em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.962569em;\"><span style=\"top:-6.149471em;\"><span class=\"pstrut\" style=\"height:4.05101em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"mord\"><span class=\"mord mathbf\">P</span></span><span class=\"mord\"><span class=\"mord mathbf\">D</span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">P</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathbf mtight\">1</span></span></span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">B</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.864108em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">−</span><span class=\"mord mathbf mtight\">1</span></span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.438461em;\"><span class=\"pstrut\" style=\"height:4.05101em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.0510099999999998em;\"><span style=\"top:-2.2500000000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.8099900000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.05101em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">2</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">5</span><span class=\"mord\">1</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">9</span><span class=\"mord\">8</span><span class=\"mord\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.0510099999999998em;\"><span style=\"top:-2.2500000000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.8099900000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.05101em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.462569em;\"><span></span></span></span></span></span></span></span></span></span></span><br>\nWhich is what we expected.</p>\n<h3 id=\"step-5-project-to-new-basis-and-reconstruct-data\">Step 5. Project to new basis and reconstruct data</h3>\n<p>We will now obtain the projection coefficient matrix <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Y</mi></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Y}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.02875em;\">Y</span></span></span></span></span> and use it to reconstruct the data with the new basis.</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"bold\">Y</mi><mo>=</mo><mi mathvariant=\"bold\">B</mi><mi mathvariant=\"bold\">X</mi><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.018</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.031</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.018</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.03</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.181</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.826</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.503</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.148</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>0.475</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>0.762</mn></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.895</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mrow><mo>−</mo><mn>1.608</mn></mrow></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbf{Y} = \\mathbf{B}\\mathbf{X} =\n\\begin{bmatrix}\n    -0.018 &amp; -0.031 &amp; 0.018 &amp; 0.03 \\\\\n    1.181 &amp; -0.826 &amp; -0.503 &amp; 0.148 \\\\\n    0.475 &amp; -0.762 &amp; 1.895 &amp; -1.608 \\\\\n\\end{bmatrix}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.02875em;\">Y</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68611em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"mord\"><span class=\"mord mathbf\">X</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.6010299999999997em;vertical-align:-1.55002em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.0510099999999998em;\"><span style=\"top:-2.2500000000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.8099900000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.05101em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">8</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">8</span><span class=\"mord\">1</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">4</span><span class=\"mord\">7</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">3</span><span class=\"mord\">1</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">2</span><span class=\"mord\">6</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">6</span><span class=\"mord\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">8</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">0</span><span class=\"mord\">3</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">9</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.05em;\"><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">3</span></span></span><span style=\"top:-3.0099999999999993em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">4</span><span class=\"mord\">8</span></span></span><span style=\"top:-1.8099999999999994em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">−</span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">6</span><span class=\"mord\">0</span><span class=\"mord\">8</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.5500000000000007em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.0510099999999998em;\"><span style=\"top:-2.2500000000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.8099900000000004em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.05101em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.55002em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>And if we try to reconstruct the original matrix with our new basis:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"bold\">B</mi><mi>T</mi></msup><mi mathvariant=\"bold\">Y</mi><mo>+</mo><msub><mi>X</mi><mtext>mean</mtext></msub><mo>=</mo><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.3</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.6</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.5</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.1</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.9</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.3</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.9</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.3</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>8.2</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.3</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>7.4</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.8</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.4</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.1</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.6</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.5</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow></mrow><annotation encoding=\"application/x-tex\">\\mathbf{B}^T\\mathbf{Y} + X_\\text{mean} = \n\\begin{bmatrix}\n    2.3 &amp; 2.6 &amp; 1.5 &amp; 3.1 \\\\\n    4.9 &amp; 5.3 &amp; 3.2 &amp; 6.3 \\\\\n    5.1 &amp; 5.2 &amp; 4.9 &amp; 5.3 \\\\\n    8.2 &amp; 6.3 &amp; 7.4 &amp; 6.8 \\\\\n    4.4 &amp; 3.1 &amp; 3.6 &amp; 3.5 \\\\\n\\end{bmatrix}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.924661em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbf\">B</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8413309999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathbf\" style=\"margin-right:0.02875em;\">Y</span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.07847em;\">X</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">mean</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:6.00503em;vertical-align:-2.75004em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">3</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">9</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">1</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">8</span><span class=\"mord\">.</span><span class=\"mord\">2</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">4</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">6</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">3</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">2</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">3</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">5</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">2</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">9</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">7</span><span class=\"mord\">.</span><span class=\"mord\">4</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">6</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">1</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">3</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">3</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">8</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">5</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>And if we use <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">k = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.306</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.61</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.494</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.09</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.899</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.298</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.201</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.302</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.096</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.193</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.904</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.307</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>8.21</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.317</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>7.39</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.784</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.387</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.077</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.613</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.522</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><annotation encoding=\"application/x-tex\">\n\\begin{bmatrix}\n    2.306 &amp; 2.61 &amp; 1.494 &amp; 3.09 \\\\\n    4.899 &amp; 5.298 &amp; 3.201 &amp; 6.302 \\\\\n    5.096 &amp; 5.193 &amp; 4.904 &amp; 5.307 \\\\\n    8.21 &amp; 6.317 &amp; 7.39 &amp; 6.784 \\\\\n    4.387 &amp; 3.077 &amp; 3.613 &amp; 3.522 \\\\\n\\end{bmatrix}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:6.00503em;vertical-align:-2.75004em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mord\">6</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">8</span><span class=\"mord\">9</span><span class=\"mord\">9</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">9</span><span class=\"mord\">6</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">8</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">1</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">8</span><span class=\"mord\">7</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">6</span><span class=\"mord\">1</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">9</span><span class=\"mord\">8</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">9</span><span class=\"mord\">3</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">1</span><span class=\"mord\">7</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">7</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">4</span><span class=\"mord\">9</span><span class=\"mord\">4</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">1</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">9</span><span class=\"mord\">0</span><span class=\"mord\">4</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">7</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">9</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">6</span><span class=\"mord\">1</span><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">9</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mord\">2</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mord\">7</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">8</span><span class=\"mord\">4</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">2</span><span class=\"mord\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>And finally, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">k = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo fence=\"true\">[</mo><mtable rowspacing=\"0.15999999999999992em\" columnspacing=\"1em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.169</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>2.706</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>1.553</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.073</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.532</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.556</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.357</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.255</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.072</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.21</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>4.914</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>5.304</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>7.324</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.937</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>7.767</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>6.672</mn></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.713</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.549</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.9</mn></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"false\"><mn>3.438</mn></mstyle></mtd></mtr></mtable><mo fence=\"true\">]</mo></mrow><annotation encoding=\"application/x-tex\">\n\\begin{bmatrix}\n    2.169 &amp; 2.706 &amp; 1.553 &amp; 3.073 \\\\\n    4.532 &amp; 5.556 &amp; 3.357 &amp; 6.255 \\\\\n    5.072 &amp; 5.21 &amp; 4.914 &amp; 5.304 \\\\\n    7.324 &amp; 6.937 &amp; 7.767 &amp; 6.672 \\\\\n    3.713 &amp; 3.549 &amp; 3.9 &amp; 3.438 \\\\\n\\end{bmatrix}\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:6.00503em;vertical-align:-2.75004em;\"></span><span class=\"minner\"><span class=\"mopen\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎣</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎢</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎡</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">1</span><span class=\"mord\">6</span><span class=\"mord\">9</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">3</span><span class=\"mord\">2</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">2</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">7</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mord\">4</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">1</span><span class=\"mord\">3</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">0</span><span class=\"mord\">6</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">5</span><span class=\"mord\">6</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">1</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">9</span><span class=\"mord\">3</span><span class=\"mord\">7</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">4</span><span class=\"mord\">9</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">5</span><span class=\"mord\">5</span><span class=\"mord\">3</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">5</span><span class=\"mord\">7</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\">.</span><span class=\"mord\">9</span><span class=\"mord\">1</span><span class=\"mord\">4</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">7</span><span class=\"mord\">.</span><span class=\"mord\">7</span><span class=\"mord\">6</span><span class=\"mord\">7</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">9</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"arraycolsep\" style=\"width:0.5em;\"></span><span class=\"col-align-c\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2500000000000004em;\"><span style=\"top:-5.410000000000001em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">0</span><span class=\"mord\">7</span><span class=\"mord\">3</span></span></span><span style=\"top:-4.21em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">2</span><span class=\"mord\">5</span><span class=\"mord\">5</span></span></span><span style=\"top:-3.01em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">5</span><span class=\"mord\">.</span><span class=\"mord\">3</span><span class=\"mord\">0</span><span class=\"mord\">4</span></span></span><span style=\"top:-1.8099999999999998em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">6</span><span class=\"mord\">.</span><span class=\"mord\">6</span><span class=\"mord\">7</span><span class=\"mord\">2</span></span></span><span style=\"top:-0.6099999999999997em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"mord\">.</span><span class=\"mord\">4</span><span class=\"mord\">3</span><span class=\"mord\">8</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.7500000000000004em;\"><span></span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"delimsizing mult\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:3.2549900000000003em;\"><span style=\"top:-1.0499800000000006em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎦</span></span></span><span style=\"top:-2.1999800000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-2.79598em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.39198em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-3.9879800000000003em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-4.0139700000000005em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎥</span></span></span><span style=\"top:-5.25499em;\"><span class=\"pstrut\" style=\"height:3.1550000000000002em;\"></span><span class=\"delimsizinginner delim-size4\"><span>⎤</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.75004em;\"><span></span></span></span></span></span></span></span></span></span></span></p>\n<p>As you can see, PCA did a pretty good job in perserving the relationships of features with fewer dimensions.</p>\n<h2 id=\"example-2-mnist\">Example 2: MNIST</h2>\n<p>MNIST is a classic hand writing digit dataset. We will use PCA to reduce the dimension of it and check the reconstruction results w.r.t different <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>.</p>\n<p><a href=\"https://colab.research.google.com/drive/1l0tPmVIBreJFQmfSA2u19g60MXAk8pa8?usp=sharing\">Here is the google colab for this example</a>, I will only show the result and the code for PCA in this blog.</p>\n<figure class=\"highlight py\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">PCA</span>(<span class=\"params\">images, k</span>):</span><br><span class=\"line\">  <span class=\"comment\"># Flatten the image and center the data</span></span><br><span class=\"line\">  images = images.reshape([images.shape[<span class=\"number\">0</span>], -<span class=\"number\">1</span>])</span><br><span class=\"line\">  mean = images.mean(<span class=\"number\">0</span>)</span><br><span class=\"line\">  images = images - mean </span><br><span class=\"line\">  <span class=\"comment\"># Calculate covariance matrix and eigenvalues/vectors</span></span><br><span class=\"line\">  cov_matrix = torch.matmul(images.T, images) / (images.shape[<span class=\"number\">0</span>] - <span class=\"number\">1</span>)</span><br><span class=\"line\">  eigen_values, eigen_vectors = torch.linalg.eigh(cov_matrix)</span><br><span class=\"line\">  <span class=\"comment\"># Get eigenvectors w.r.t top k eigenvalues</span></span><br><span class=\"line\">  eigen_vectors_k = eigen_vectors[:, -k:]</span><br><span class=\"line\">  <span class=\"comment\"># Get Y, matrix with coefficients w.r.t new basis</span></span><br><span class=\"line\">  projected_data = torch.matmul(images, eigen_vectors_k)</span><br><span class=\"line\">  <span class=\"comment\"># Reconstruct images</span></span><br><span class=\"line\">  new_images = torch.matmul(projected_data, eigen_vectors_k.T) + mean</span><br><span class=\"line\">  <span class=\"keyword\">return</span> new_images</span><br></pre></td></tr></table></figure>\n<p><img src=\"PCA.png\" alt=\"PCA\"></p>\n<h1 id=\"afterword\">Afterword</h1>\n<p>PCA is quite an old, yet powerful linear dimension reduction algorithm. The whole encoder-decoder architecture, and embedding systems all use dimension reduction, so this is very important! If you want to learn more about dimension reduction, (deep)auto-encoders are a good place to start. Good luck!</p>\n<p>It took me quite some time to compose this blog, so I hope it was clear and concise for you to understand.</p>\n<p>My freshman year is finally over, and after my grades all roll out, I think I will make a short blog to summarize up my first year in college!</p>\n<p>Taiwan food yummy~</p>\n<h1 id=\"references\">References</h1>\n<p><a href=\"https://www.cs.cmu.edu/~elaw/papers/pca.pdf\">A Tutorial on Principal Component Analysis</a></p>\n<p><a href=\"https://youtu.be/iwh5o_M4BNU?si=mPfm6E6RLNkHPlQw\">ML Lecture 13: Unsupervised Learning - Linear Methods</a></p>\n"},{"title":"Music I enjoyed recently 2","date":"2024-02-20T05:52:34.000Z","_content":"\nThe workload in school has ramped up quite quickly recently, so listening to music really helped me lessen my stress. I also discovered alot of great songs that I enjoy recently, so I wanted to share them here.\n\n## Japanese\n\n### [【初音ミク×GUMI×鏡音リン】PaⅢ.SENSATION](https://youtu.be/OMQNhcGZbX4?si=SRjlQTWukNjbnmN_)\n\nMiku and GUMI and Rin? Sign me up!\n\n### [まにまに / 初音ミク](https://youtu.be/9O2VyUM5MlQ?si=Emp2M_Ag822nwz9f)\n\nI really like the part at 3:08, its just so epic and I enjoy it so much!!\n\n### [バースデイ / 可不](https://youtu.be/mA5cl5tYHaQ?si=v93t_EK8bW9b_GEa)\n\nIts so hard to find a bad KAFU song...\n\n### [ロクデナシ「眼差し](https://youtu.be/J4hdiW-V5no?si=QOSZ27N2Tu5hMCBi)\n\nA really soothing and warm song imo.\n\n### [ピノキオピー - ノンブレス・オブリージュ feat. 初音ミク](https://youtu.be/lw7pcm1W5tw?si=Ux95vmdHuCXxstnY)\n\nOk yes, the only reason I know this song is because of that funny osu map.\n\n### [Myuk - 愛の唄](https://youtu.be/go6iydhxbW0?si=JN-NRX5gkV0X61XU)\n\nI basically listened to this non-stop while I was on the plane back to the US.\n\n### [夜明けの歌 (feat. DAZBEE)](https://youtu.be/CTdggeWFUHA?si=nb5Qwwm6eqpIK-3c)\n\nI really like M2U, and this made me fell in love with DAZBEE too.\n\n### [Marigold (feat. Guriri)](https://youtu.be/hqB9_UgzJ5A?si=xKMzE8tMnu6QY8l8)\n\nI mean well, if you know M2U you should know marigold already, but I still put it in here because its just SO good.\n\n### [DAZBEE (ダズビー) | ‘イビツナコトバ’](https://youtu.be/f09oTPk4hTY?si=Og00KHUVamJyXq-c)\n\nDAZBEE rocks im telling you!\n\n### [Kano - スキスキ絶頂症](https://youtu.be/wJ3qE4PNdbs?si=xAOCr_wQg49Ii-HK)\n\nThis is also a really classic song from OSU, and Kano is such a goat with a awesome voice line. I really like her vocal!\n\n### [緑黄色社会 - Mela!](https://youtu.be/wzslO9QbDAQ?si=vgQKsQNli8pxYMI3)\n\nMela Mela! I probabily repeated this song the most times out off all the songs here...\n\n### [緑黄色社会- Shout Baby](https://youtu.be/YOnqT1xVTM0?si=6mVKdoO_qSR3nRCq)\n\nAnother super banger music from the same band :D\n\n### [緑黄色社会 - 花になって](https://youtu.be/voAu0YRWUNE?si=tZDLOVlqwxD5h8TB)\n\nI think this is the OP for a recent anime, and was discussed quite often to not match the tone of the anime (along with 勇者 for frieren), but they both are bangers so who cares :D\n\n### [ユイカ - Seventeen's Song](https://youtu.be/9C178An_B_I?si=rBPn6HrRt8-yGk3M)\n\nReally cute, really like :D\n\n### [Empty old City - Chronicle A](https://youtu.be/cND2-LfD62w?si=EBrFgH0Up7JnJw3h)\n\nIdk how I found this, but I do not regret a bit, really catchy!\n\n### [EGOIST『絶体絶命』](https://youtu.be/DR5FSueiJxI?si=fa0U9TcXszF_B_7P)\n\nMan, EGOIST really knows how to make bangers, I also replayed this over and over, and I was shocked to find out this was made for a mobile game...\n\n### [EGOIST - 最後の花弁](https://youtu.be/zj9OiizX3t8?si=couZESZeGbTtMM5H)\n\nIts EGOIST, go listen to it NOW!\n\n### [毒々 / covered by 幸祜](https://youtu.be/Ylq9EvCvB5c?si=k1FmEGuHcmlsI4xK)\n\nAwesome cover from KOKO as always.\n\n### [ELFENSJóN - 星屑の輪廻](https://youtu.be/65etqlBdI5k?si=4XVt5FJBOn6AWNRe)\n\nAwesome male vocal, really enjoyed!\n\n### [ELFENSJóN『暁を葬れば』](https://youtu.be/cBA9nkoCPs4?si=sMPWl640gS1CBeQg)\n\nAwesome female vocal, really enjoyed! :D\n\n### [すいそうぐらし- 大人なふりして](https://youtu.be/Q_nUpKfXepA?si=Ksfm88erJyRTknJs)\n\nI somehow just found out this song yesterday, but lemme tell you, I am ADDICTED, its so good TMT\n\n### [女王蜂 - Mephisto](https://youtu.be/dLlD-dZNACM?si=ud8Of0E7AUIvPawZ)\n\nI'm really curious in the sexuality of the vocal in this band, they have an insane vocal and I love it.\n\n### [椎名もた(siinamota)/ 少女A](https://youtu.be/AqI97zHMoQw?si=eGvbh_lzqhgNr0Br)\n\nThis song deserves a special place in my heart.\n\n## Korean\n\n### [약속지가 (feat. Sherie)](https://youtu.be/NxFLl23XtY8?si=wp7xAiUfm3a-InnE)\n\nIts from M2U, ofc its a FUCKING BANGER AAAAA\n\n### [IVE 아이브 'I AM'](https://youtu.be/6ZUIwj3FgUY?si=iW4LcnEPFJSetjZS)\n\nThis song is way too addicting, even as someone who doesn't particularly enjoy KPOP, im still addicted to it haha.\n\n### [SEVENTEEN (세븐틴) '손오공'](https://youtu.be/-GQg25oP0S4?si=DpqVDgHW4gho4ezR)\n\nDoes listening to this song make me gay? ngl korean boys really do know how do be sexy asf TMT\n\n## Chinese\n\n### [南西肯恩 NeciKen〈我也曾經想過這樣殺了我自己 Once I Thought of Leaving〉](https://youtu.be/aT6056Eb11I?si=n3McR-FVQyPQJpv9)\n\nQuite a depressing song, when I'm feeling down I really like listening to this.\n\n### [南西肯恩 NeciKen〈大海 Ocean〉](https://youtu.be/exVEN7hlqBg?si=0bapuyGw5ASqT3Uh)\n\nAlso a depressing song, but its so good...\n\n### [Hello Nico〈花〉](https://youtu.be/BlblBvpVgjE?si=fDEMM3O18n7ih-Jt)\n\nGuess what? its also depressing hahaha, I guess indie bands love being depressed...\n\n### [VH - 複寫 (More)](https://youtu.be/RZOZ8GRJL-Y?si=ax7Mi6cCRFsheQc5)\n\nThis guitar made me had an orgasm...\n\n## Others\n\n### [EigHt Novel - 輪廻転生](https://youtu.be/vuEYQsiaNeA?si=Z_Sh5atKUuOZkYlO)\n\nCriminally underrated, this should have 100x more views wtf\n\n### [goreshit - Bad Habits](https://youtu.be/og7S-j4Ls7k?si=GYinV5m8T4gUqt7S)\n\nI remember seeing a [meme](https://youtu.be/OGXJiJbxmWo?si=F-4ugPY6Z8muDaiu) about breakcore, its so fucking funny that its true lmaoooo\n\n### [goreshit - Toromi Hearts 2](https://youtu.be/pk5F3q5UiWQ?si=aOvxEM4iiOIJNPds)\n\nSelf explainatory.\n\n### [Sewerslvt - Mr. Kill Myself](https://youtu.be/RgFaK6ZQifE?si=qADh61AXoy1rzDdy)\n\nBreakcore goes brrrrr\n\n### [Undefeatable (feat. Kellin Quinn)](https://youtu.be/u_FRDqHT5y0?si=3JSglr1wmMW7K54r)\n\nSo uh, why does music from Sonic slap so hard TMT\n\n### [Radiant](https://youtu.be/eImNc6AIViQ?si=FAHpisBue5PVdELW)\n\nAnother example of mobile game music being way too good.\n\n---------------------------------------------------------------------\n\nI did not expect this to be so long. I included some music in other languages because people actually asked me about my interests in chinese musics and others. I still have so many music I want to put in here but its getting absurdly long, so maybe next time!\n\nedit: ok wait fuck I need to add this one, I just found it out after writing it, and its so fucking amazing\n\n### [tn-shi - Synthesis](https://youtu.be/dOP7G5J755s?si=xut-FttlCGh8I-of)\n\nOne of the craziest, creative visuals, baller music, holy fucking shit this is amazing god!!!\n","source":"_posts/Music-I-enjoyed-recently-2.md","raw":"---\ntitle: Music I enjoyed recently 2\ndate: 2024-02-19 23:52:34\ntags: [\"Life\"]\n---\n\nThe workload in school has ramped up quite quickly recently, so listening to music really helped me lessen my stress. I also discovered alot of great songs that I enjoy recently, so I wanted to share them here.\n\n## Japanese\n\n### [【初音ミク×GUMI×鏡音リン】PaⅢ.SENSATION](https://youtu.be/OMQNhcGZbX4?si=SRjlQTWukNjbnmN_)\n\nMiku and GUMI and Rin? Sign me up!\n\n### [まにまに / 初音ミク](https://youtu.be/9O2VyUM5MlQ?si=Emp2M_Ag822nwz9f)\n\nI really like the part at 3:08, its just so epic and I enjoy it so much!!\n\n### [バースデイ / 可不](https://youtu.be/mA5cl5tYHaQ?si=v93t_EK8bW9b_GEa)\n\nIts so hard to find a bad KAFU song...\n\n### [ロクデナシ「眼差し](https://youtu.be/J4hdiW-V5no?si=QOSZ27N2Tu5hMCBi)\n\nA really soothing and warm song imo.\n\n### [ピノキオピー - ノンブレス・オブリージュ feat. 初音ミク](https://youtu.be/lw7pcm1W5tw?si=Ux95vmdHuCXxstnY)\n\nOk yes, the only reason I know this song is because of that funny osu map.\n\n### [Myuk - 愛の唄](https://youtu.be/go6iydhxbW0?si=JN-NRX5gkV0X61XU)\n\nI basically listened to this non-stop while I was on the plane back to the US.\n\n### [夜明けの歌 (feat. DAZBEE)](https://youtu.be/CTdggeWFUHA?si=nb5Qwwm6eqpIK-3c)\n\nI really like M2U, and this made me fell in love with DAZBEE too.\n\n### [Marigold (feat. Guriri)](https://youtu.be/hqB9_UgzJ5A?si=xKMzE8tMnu6QY8l8)\n\nI mean well, if you know M2U you should know marigold already, but I still put it in here because its just SO good.\n\n### [DAZBEE (ダズビー) | ‘イビツナコトバ’](https://youtu.be/f09oTPk4hTY?si=Og00KHUVamJyXq-c)\n\nDAZBEE rocks im telling you!\n\n### [Kano - スキスキ絶頂症](https://youtu.be/wJ3qE4PNdbs?si=xAOCr_wQg49Ii-HK)\n\nThis is also a really classic song from OSU, and Kano is such a goat with a awesome voice line. I really like her vocal!\n\n### [緑黄色社会 - Mela!](https://youtu.be/wzslO9QbDAQ?si=vgQKsQNli8pxYMI3)\n\nMela Mela! I probabily repeated this song the most times out off all the songs here...\n\n### [緑黄色社会- Shout Baby](https://youtu.be/YOnqT1xVTM0?si=6mVKdoO_qSR3nRCq)\n\nAnother super banger music from the same band :D\n\n### [緑黄色社会 - 花になって](https://youtu.be/voAu0YRWUNE?si=tZDLOVlqwxD5h8TB)\n\nI think this is the OP for a recent anime, and was discussed quite often to not match the tone of the anime (along with 勇者 for frieren), but they both are bangers so who cares :D\n\n### [ユイカ - Seventeen's Song](https://youtu.be/9C178An_B_I?si=rBPn6HrRt8-yGk3M)\n\nReally cute, really like :D\n\n### [Empty old City - Chronicle A](https://youtu.be/cND2-LfD62w?si=EBrFgH0Up7JnJw3h)\n\nIdk how I found this, but I do not regret a bit, really catchy!\n\n### [EGOIST『絶体絶命』](https://youtu.be/DR5FSueiJxI?si=fa0U9TcXszF_B_7P)\n\nMan, EGOIST really knows how to make bangers, I also replayed this over and over, and I was shocked to find out this was made for a mobile game...\n\n### [EGOIST - 最後の花弁](https://youtu.be/zj9OiizX3t8?si=couZESZeGbTtMM5H)\n\nIts EGOIST, go listen to it NOW!\n\n### [毒々 / covered by 幸祜](https://youtu.be/Ylq9EvCvB5c?si=k1FmEGuHcmlsI4xK)\n\nAwesome cover from KOKO as always.\n\n### [ELFENSJóN - 星屑の輪廻](https://youtu.be/65etqlBdI5k?si=4XVt5FJBOn6AWNRe)\n\nAwesome male vocal, really enjoyed!\n\n### [ELFENSJóN『暁を葬れば』](https://youtu.be/cBA9nkoCPs4?si=sMPWl640gS1CBeQg)\n\nAwesome female vocal, really enjoyed! :D\n\n### [すいそうぐらし- 大人なふりして](https://youtu.be/Q_nUpKfXepA?si=Ksfm88erJyRTknJs)\n\nI somehow just found out this song yesterday, but lemme tell you, I am ADDICTED, its so good TMT\n\n### [女王蜂 - Mephisto](https://youtu.be/dLlD-dZNACM?si=ud8Of0E7AUIvPawZ)\n\nI'm really curious in the sexuality of the vocal in this band, they have an insane vocal and I love it.\n\n### [椎名もた(siinamota)/ 少女A](https://youtu.be/AqI97zHMoQw?si=eGvbh_lzqhgNr0Br)\n\nThis song deserves a special place in my heart.\n\n## Korean\n\n### [약속지가 (feat. Sherie)](https://youtu.be/NxFLl23XtY8?si=wp7xAiUfm3a-InnE)\n\nIts from M2U, ofc its a FUCKING BANGER AAAAA\n\n### [IVE 아이브 'I AM'](https://youtu.be/6ZUIwj3FgUY?si=iW4LcnEPFJSetjZS)\n\nThis song is way too addicting, even as someone who doesn't particularly enjoy KPOP, im still addicted to it haha.\n\n### [SEVENTEEN (세븐틴) '손오공'](https://youtu.be/-GQg25oP0S4?si=DpqVDgHW4gho4ezR)\n\nDoes listening to this song make me gay? ngl korean boys really do know how do be sexy asf TMT\n\n## Chinese\n\n### [南西肯恩 NeciKen〈我也曾經想過這樣殺了我自己 Once I Thought of Leaving〉](https://youtu.be/aT6056Eb11I?si=n3McR-FVQyPQJpv9)\n\nQuite a depressing song, when I'm feeling down I really like listening to this.\n\n### [南西肯恩 NeciKen〈大海 Ocean〉](https://youtu.be/exVEN7hlqBg?si=0bapuyGw5ASqT3Uh)\n\nAlso a depressing song, but its so good...\n\n### [Hello Nico〈花〉](https://youtu.be/BlblBvpVgjE?si=fDEMM3O18n7ih-Jt)\n\nGuess what? its also depressing hahaha, I guess indie bands love being depressed...\n\n### [VH - 複寫 (More)](https://youtu.be/RZOZ8GRJL-Y?si=ax7Mi6cCRFsheQc5)\n\nThis guitar made me had an orgasm...\n\n## Others\n\n### [EigHt Novel - 輪廻転生](https://youtu.be/vuEYQsiaNeA?si=Z_Sh5atKUuOZkYlO)\n\nCriminally underrated, this should have 100x more views wtf\n\n### [goreshit - Bad Habits](https://youtu.be/og7S-j4Ls7k?si=GYinV5m8T4gUqt7S)\n\nI remember seeing a [meme](https://youtu.be/OGXJiJbxmWo?si=F-4ugPY6Z8muDaiu) about breakcore, its so fucking funny that its true lmaoooo\n\n### [goreshit - Toromi Hearts 2](https://youtu.be/pk5F3q5UiWQ?si=aOvxEM4iiOIJNPds)\n\nSelf explainatory.\n\n### [Sewerslvt - Mr. Kill Myself](https://youtu.be/RgFaK6ZQifE?si=qADh61AXoy1rzDdy)\n\nBreakcore goes brrrrr\n\n### [Undefeatable (feat. Kellin Quinn)](https://youtu.be/u_FRDqHT5y0?si=3JSglr1wmMW7K54r)\n\nSo uh, why does music from Sonic slap so hard TMT\n\n### [Radiant](https://youtu.be/eImNc6AIViQ?si=FAHpisBue5PVdELW)\n\nAnother example of mobile game music being way too good.\n\n---------------------------------------------------------------------\n\nI did not expect this to be so long. I included some music in other languages because people actually asked me about my interests in chinese musics and others. I still have so many music I want to put in here but its getting absurdly long, so maybe next time!\n\nedit: ok wait fuck I need to add this one, I just found it out after writing it, and its so fucking amazing\n\n### [tn-shi - Synthesis](https://youtu.be/dOP7G5J755s?si=xut-FttlCGh8I-of)\n\nOne of the craziest, creative visuals, baller music, holy fucking shit this is amazing god!!!\n","slug":"Music-I-enjoyed-recently-2","published":1,"updated":"2024-12-26T01:29:58.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblh0000mb0u939gecae4","content":"<p>The workload in school has ramped up quite quickly recently, so listening to music really helped me lessen my stress. I also discovered alot of great songs that I enjoy recently, so I wanted to share them here.</p>\n<h2 id=\"japanese\">Japanese</h2>\n<h3 id=\"初音ミク-gumi-鏡音リン-paⅲ-sensation\"><a href=\"https://youtu.be/OMQNhcGZbX4?si=SRjlQTWukNjbnmN_\">【初音ミク×GUMI×鏡音リン】PaⅢ.SENSATION</a></h3>\n<p>Miku and GUMI and Rin? Sign me up!</p>\n<h3 id=\"まにまに-初音ミク\"><a href=\"https://youtu.be/9O2VyUM5MlQ?si=Emp2M_Ag822nwz9f\">まにまに / 初音ミク</a></h3>\n<p>I really like the part at 3:08, its just so epic and I enjoy it so much!!</p>\n<h3 id=\"バースデイ-可不\"><a href=\"https://youtu.be/mA5cl5tYHaQ?si=v93t_EK8bW9b_GEa\">バースデイ / 可不</a></h3>\n<p>Its so hard to find a bad KAFU song…</p>\n<h3 id=\"ロクデナシ-眼差し\"><a href=\"https://youtu.be/J4hdiW-V5no?si=QOSZ27N2Tu5hMCBi\">ロクデナシ「眼差し</a></h3>\n<p>A really soothing and warm song imo.</p>\n<h3 id=\"ピノキオピー-ノンブレス-オブリージュ-feat-初音ミク\"><a href=\"https://youtu.be/lw7pcm1W5tw?si=Ux95vmdHuCXxstnY\">ピノキオピー - ノンブレス・オブリージュ feat. 初音ミク</a></h3>\n<p>Ok yes, the only reason I know this song is because of that funny osu map.</p>\n<h3 id=\"myuk-愛の唄\"><a href=\"https://youtu.be/go6iydhxbW0?si=JN-NRX5gkV0X61XU\">Myuk - 愛の唄</a></h3>\n<p>I basically listened to this non-stop while I was on the plane back to the US.</p>\n<h3 id=\"夜明けの歌-feat-dazbee\"><a href=\"https://youtu.be/CTdggeWFUHA?si=nb5Qwwm6eqpIK-3c\">夜明けの歌 (feat. DAZBEE)</a></h3>\n<p>I really like M2U, and this made me fell in love with DAZBEE too.</p>\n<h3 id=\"marigold-feat-guriri\"><a href=\"https://youtu.be/hqB9_UgzJ5A?si=xKMzE8tMnu6QY8l8\">Marigold (feat. Guriri)</a></h3>\n<p>I mean well, if you know M2U you should know marigold already, but I still put it in here because its just SO good.</p>\n<h3 id=\"dazbee-ダズビー-イビツナコトバ\"><a href=\"https://youtu.be/f09oTPk4hTY?si=Og00KHUVamJyXq-c\">DAZBEE (ダズビー) | ‘イビツナコトバ’</a></h3>\n<p>DAZBEE rocks im telling you!</p>\n<h3 id=\"kano-スキスキ絶頂症\"><a href=\"https://youtu.be/wJ3qE4PNdbs?si=xAOCr_wQg49Ii-HK\">Kano - スキスキ絶頂症</a></h3>\n<p>This is also a really classic song from OSU, and Kano is such a goat with a awesome voice line. I really like her vocal!</p>\n<h3 id=\"緑黄色社会-mela\"><a href=\"https://youtu.be/wzslO9QbDAQ?si=vgQKsQNli8pxYMI3\">緑黄色社会 - Mela!</a></h3>\n<p>Mela Mela! I probabily repeated this song the most times out off all the songs here…</p>\n<h3 id=\"緑黄色社会-shout-baby\"><a href=\"https://youtu.be/YOnqT1xVTM0?si=6mVKdoO_qSR3nRCq\">緑黄色社会- Shout Baby</a></h3>\n<p>Another super banger music from the same band :D</p>\n<h3 id=\"緑黄色社会-花になって\"><a href=\"https://youtu.be/voAu0YRWUNE?si=tZDLOVlqwxD5h8TB\">緑黄色社会 - 花になって</a></h3>\n<p>I think this is the OP for a recent anime, and was discussed quite often to not match the tone of the anime (along with 勇者 for frieren), but they both are bangers so who cares :D</p>\n<h3 id=\"ユイカ-seventeen-s-song\"><a href=\"https://youtu.be/9C178An_B_I?si=rBPn6HrRt8-yGk3M\">ユイカ - Seventeen’s Song</a></h3>\n<p>Really cute, really like :D</p>\n<h3 id=\"empty-old-city-chronicle-a\"><a href=\"https://youtu.be/cND2-LfD62w?si=EBrFgH0Up7JnJw3h\">Empty old City - Chronicle A</a></h3>\n<p>Idk how I found this, but I do not regret a bit, really catchy!</p>\n<h3 id=\"egoist-絶体絶命\"><a href=\"https://youtu.be/DR5FSueiJxI?si=fa0U9TcXszF_B_7P\">EGOIST『絶体絶命』</a></h3>\n<p>Man, EGOIST really knows how to make bangers, I also replayed this over and over, and I was shocked to find out this was made for a mobile game…</p>\n<h3 id=\"egoist-最後の花弁\"><a href=\"https://youtu.be/zj9OiizX3t8?si=couZESZeGbTtMM5H\">EGOIST - 最後の花弁</a></h3>\n<p>Its EGOIST, go listen to it NOW!</p>\n<h3 id=\"毒々-covered-by-幸祜\"><a href=\"https://youtu.be/Ylq9EvCvB5c?si=k1FmEGuHcmlsI4xK\">毒々 / covered by 幸祜</a></h3>\n<p>Awesome cover from KOKO as always.</p>\n<h3 id=\"elfensjón-星屑の輪廻\"><a href=\"https://youtu.be/65etqlBdI5k?si=4XVt5FJBOn6AWNRe\">ELFENSJóN - 星屑の輪廻</a></h3>\n<p>Awesome male vocal, really enjoyed!</p>\n<h3 id=\"elfensjón-暁を葬れば\"><a href=\"https://youtu.be/cBA9nkoCPs4?si=sMPWl640gS1CBeQg\">ELFENSJóN『暁を葬れば』</a></h3>\n<p>Awesome female vocal, really enjoyed! :D</p>\n<h3 id=\"すいそうぐらし-大人なふりして\"><a href=\"https://youtu.be/Q_nUpKfXepA?si=Ksfm88erJyRTknJs\">すいそうぐらし- 大人なふりして</a></h3>\n<p>I somehow just found out this song yesterday, but lemme tell you, I am ADDICTED, its so good TMT</p>\n<h3 id=\"女王蜂-mephisto\"><a href=\"https://youtu.be/dLlD-dZNACM?si=ud8Of0E7AUIvPawZ\">女王蜂 - Mephisto</a></h3>\n<p>I’m really curious in the sexuality of the vocal in this band, they have an insane vocal and I love it.</p>\n<h3 id=\"椎名もた-siinamota-少女a\"><a href=\"https://youtu.be/AqI97zHMoQw?si=eGvbh_lzqhgNr0Br\">椎名もた(siinamota)/ 少女A</a></h3>\n<p>This song deserves a special place in my heart.</p>\n<h2 id=\"korean\">Korean</h2>\n<h3 id=\"약속지가-feat-sherie\"><a href=\"https://youtu.be/NxFLl23XtY8?si=wp7xAiUfm3a-InnE\">약속지가 (feat. Sherie)</a></h3>\n<p>Its from M2U, ofc its a FUCKING BANGER AAAAA</p>\n<h3 id=\"ive-아이브-i-am\"><a href=\"https://youtu.be/6ZUIwj3FgUY?si=iW4LcnEPFJSetjZS\">IVE 아이브 ‘I AM’</a></h3>\n<p>This song is way too addicting, even as someone who doesn’t particularly enjoy KPOP, im still addicted to it haha.</p>\n<h3 id=\"seventeen-세븐틴-손오공\"><a href=\"https://youtu.be/-GQg25oP0S4?si=DpqVDgHW4gho4ezR\">SEVENTEEN (세븐틴) ‘손오공’</a></h3>\n<p>Does listening to this song make me gay? ngl korean boys really do know how do be sexy asf TMT</p>\n<h2 id=\"chinese\">Chinese</h2>\n<h3 id=\"南西肯恩-neciken-我也曾經想過這樣殺了我自己-once-i-thought-of-leaving\"><a href=\"https://youtu.be/aT6056Eb11I?si=n3McR-FVQyPQJpv9\">南西肯恩 NeciKen〈我也曾經想過這樣殺了我自己 Once I Thought of Leaving〉</a></h3>\n<p>Quite a depressing song, when I’m feeling down I really like listening to this.</p>\n<h3 id=\"南西肯恩-neciken-大海-ocean\"><a href=\"https://youtu.be/exVEN7hlqBg?si=0bapuyGw5ASqT3Uh\">南西肯恩 NeciKen〈大海 Ocean〉</a></h3>\n<p>Also a depressing song, but its so good…</p>\n<h3 id=\"hello-nico-花\"><a href=\"https://youtu.be/BlblBvpVgjE?si=fDEMM3O18n7ih-Jt\">Hello Nico〈花〉</a></h3>\n<p>Guess what? its also depressing hahaha, I guess indie bands love being depressed…</p>\n<h3 id=\"vh-複寫-more\"><a href=\"https://youtu.be/RZOZ8GRJL-Y?si=ax7Mi6cCRFsheQc5\">VH - 複寫 (More)</a></h3>\n<p>This guitar made me had an orgasm…</p>\n<h2 id=\"others\">Others</h2>\n<h3 id=\"eight-novel-輪廻転生\"><a href=\"https://youtu.be/vuEYQsiaNeA?si=Z_Sh5atKUuOZkYlO\">EigHt Novel - 輪廻転生</a></h3>\n<p>Criminally underrated, this should have 100x more views wtf</p>\n<h3 id=\"goreshit-bad-habits\"><a href=\"https://youtu.be/og7S-j4Ls7k?si=GYinV5m8T4gUqt7S\">goreshit - Bad Habits</a></h3>\n<p>I remember seeing a <a href=\"https://youtu.be/OGXJiJbxmWo?si=F-4ugPY6Z8muDaiu\">meme</a> about breakcore, its so fucking funny that its true lmaoooo</p>\n<h3 id=\"goreshit-toromi-hearts-2\"><a href=\"https://youtu.be/pk5F3q5UiWQ?si=aOvxEM4iiOIJNPds\">goreshit - Toromi Hearts 2</a></h3>\n<p>Self explainatory.</p>\n<h3 id=\"sewerslvt-mr-kill-myself\"><a href=\"https://youtu.be/RgFaK6ZQifE?si=qADh61AXoy1rzDdy\">Sewerslvt - Mr. Kill Myself</a></h3>\n<p>Breakcore goes brrrrr</p>\n<h3 id=\"undefeatable-feat-kellin-quinn\"><a href=\"https://youtu.be/u_FRDqHT5y0?si=3JSglr1wmMW7K54r\">Undefeatable (feat. Kellin Quinn)</a></h3>\n<p>So uh, why does music from Sonic slap so hard TMT</p>\n<h3 id=\"radiant\"><a href=\"https://youtu.be/eImNc6AIViQ?si=FAHpisBue5PVdELW\">Radiant</a></h3>\n<p>Another example of mobile game music being way too good.</p>\n<hr>\n<p>I did not expect this to be so long. I included some music in other languages because people actually asked me about my interests in chinese musics and others. I still have so many music I want to put in here but its getting absurdly long, so maybe next time!</p>\n<p>edit: ok wait fuck I need to add this one, I just found it out after writing it, and its so fucking amazing</p>\n<h3 id=\"tn-shi-synthesis\"><a href=\"https://youtu.be/dOP7G5J755s?si=xut-FttlCGh8I-of\">tn-shi - Synthesis</a></h3>\n<p>One of the craziest, creative visuals, baller music, holy fucking shit this is amazing god!!!</p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>The workload in school has ramped up quite quickly recently, so listening to music really helped me lessen my stress. I also discovered alot of great songs that I enjoy recently, so I wanted to share them here.</p>\n<h2 id=\"japanese\">Japanese</h2>\n<h3 id=\"初音ミク-gumi-鏡音リン-paⅲ-sensation\"><a href=\"https://youtu.be/OMQNhcGZbX4?si=SRjlQTWukNjbnmN_\">【初音ミク×GUMI×鏡音リン】PaⅢ.SENSATION</a></h3>\n<p>Miku and GUMI and Rin? Sign me up!</p>\n<h3 id=\"まにまに-初音ミク\"><a href=\"https://youtu.be/9O2VyUM5MlQ?si=Emp2M_Ag822nwz9f\">まにまに / 初音ミク</a></h3>\n<p>I really like the part at 3:08, its just so epic and I enjoy it so much!!</p>\n<h3 id=\"バースデイ-可不\"><a href=\"https://youtu.be/mA5cl5tYHaQ?si=v93t_EK8bW9b_GEa\">バースデイ / 可不</a></h3>\n<p>Its so hard to find a bad KAFU song…</p>\n<h3 id=\"ロクデナシ-眼差し\"><a href=\"https://youtu.be/J4hdiW-V5no?si=QOSZ27N2Tu5hMCBi\">ロクデナシ「眼差し</a></h3>\n<p>A really soothing and warm song imo.</p>\n<h3 id=\"ピノキオピー-ノンブレス-オブリージュ-feat-初音ミク\"><a href=\"https://youtu.be/lw7pcm1W5tw?si=Ux95vmdHuCXxstnY\">ピノキオピー - ノンブレス・オブリージュ feat. 初音ミク</a></h3>\n<p>Ok yes, the only reason I know this song is because of that funny osu map.</p>\n<h3 id=\"myuk-愛の唄\"><a href=\"https://youtu.be/go6iydhxbW0?si=JN-NRX5gkV0X61XU\">Myuk - 愛の唄</a></h3>\n<p>I basically listened to this non-stop while I was on the plane back to the US.</p>\n<h3 id=\"夜明けの歌-feat-dazbee\"><a href=\"https://youtu.be/CTdggeWFUHA?si=nb5Qwwm6eqpIK-3c\">夜明けの歌 (feat. DAZBEE)</a></h3>\n<p>I really like M2U, and this made me fell in love with DAZBEE too.</p>\n<h3 id=\"marigold-feat-guriri\"><a href=\"https://youtu.be/hqB9_UgzJ5A?si=xKMzE8tMnu6QY8l8\">Marigold (feat. Guriri)</a></h3>\n<p>I mean well, if you know M2U you should know marigold already, but I still put it in here because its just SO good.</p>\n<h3 id=\"dazbee-ダズビー-イビツナコトバ\"><a href=\"https://youtu.be/f09oTPk4hTY?si=Og00KHUVamJyXq-c\">DAZBEE (ダズビー) | ‘イビツナコトバ’</a></h3>\n<p>DAZBEE rocks im telling you!</p>\n<h3 id=\"kano-スキスキ絶頂症\"><a href=\"https://youtu.be/wJ3qE4PNdbs?si=xAOCr_wQg49Ii-HK\">Kano - スキスキ絶頂症</a></h3>\n<p>This is also a really classic song from OSU, and Kano is such a goat with a awesome voice line. I really like her vocal!</p>\n<h3 id=\"緑黄色社会-mela\"><a href=\"https://youtu.be/wzslO9QbDAQ?si=vgQKsQNli8pxYMI3\">緑黄色社会 - Mela!</a></h3>\n<p>Mela Mela! I probabily repeated this song the most times out off all the songs here…</p>\n<h3 id=\"緑黄色社会-shout-baby\"><a href=\"https://youtu.be/YOnqT1xVTM0?si=6mVKdoO_qSR3nRCq\">緑黄色社会- Shout Baby</a></h3>\n<p>Another super banger music from the same band :D</p>\n<h3 id=\"緑黄色社会-花になって\"><a href=\"https://youtu.be/voAu0YRWUNE?si=tZDLOVlqwxD5h8TB\">緑黄色社会 - 花になって</a></h3>\n<p>I think this is the OP for a recent anime, and was discussed quite often to not match the tone of the anime (along with 勇者 for frieren), but they both are bangers so who cares :D</p>\n<h3 id=\"ユイカ-seventeen-s-song\"><a href=\"https://youtu.be/9C178An_B_I?si=rBPn6HrRt8-yGk3M\">ユイカ - Seventeen’s Song</a></h3>\n<p>Really cute, really like :D</p>\n<h3 id=\"empty-old-city-chronicle-a\"><a href=\"https://youtu.be/cND2-LfD62w?si=EBrFgH0Up7JnJw3h\">Empty old City - Chronicle A</a></h3>\n<p>Idk how I found this, but I do not regret a bit, really catchy!</p>\n<h3 id=\"egoist-絶体絶命\"><a href=\"https://youtu.be/DR5FSueiJxI?si=fa0U9TcXszF_B_7P\">EGOIST『絶体絶命』</a></h3>\n<p>Man, EGOIST really knows how to make bangers, I also replayed this over and over, and I was shocked to find out this was made for a mobile game…</p>\n<h3 id=\"egoist-最後の花弁\"><a href=\"https://youtu.be/zj9OiizX3t8?si=couZESZeGbTtMM5H\">EGOIST - 最後の花弁</a></h3>\n<p>Its EGOIST, go listen to it NOW!</p>\n<h3 id=\"毒々-covered-by-幸祜\"><a href=\"https://youtu.be/Ylq9EvCvB5c?si=k1FmEGuHcmlsI4xK\">毒々 / covered by 幸祜</a></h3>\n<p>Awesome cover from KOKO as always.</p>\n<h3 id=\"elfensjón-星屑の輪廻\"><a href=\"https://youtu.be/65etqlBdI5k?si=4XVt5FJBOn6AWNRe\">ELFENSJóN - 星屑の輪廻</a></h3>\n<p>Awesome male vocal, really enjoyed!</p>\n<h3 id=\"elfensjón-暁を葬れば\"><a href=\"https://youtu.be/cBA9nkoCPs4?si=sMPWl640gS1CBeQg\">ELFENSJóN『暁を葬れば』</a></h3>\n<p>Awesome female vocal, really enjoyed! :D</p>\n<h3 id=\"すいそうぐらし-大人なふりして\"><a href=\"https://youtu.be/Q_nUpKfXepA?si=Ksfm88erJyRTknJs\">すいそうぐらし- 大人なふりして</a></h3>\n<p>I somehow just found out this song yesterday, but lemme tell you, I am ADDICTED, its so good TMT</p>\n<h3 id=\"女王蜂-mephisto\"><a href=\"https://youtu.be/dLlD-dZNACM?si=ud8Of0E7AUIvPawZ\">女王蜂 - Mephisto</a></h3>\n<p>I’m really curious in the sexuality of the vocal in this band, they have an insane vocal and I love it.</p>\n<h3 id=\"椎名もた-siinamota-少女a\"><a href=\"https://youtu.be/AqI97zHMoQw?si=eGvbh_lzqhgNr0Br\">椎名もた(siinamota)/ 少女A</a></h3>\n<p>This song deserves a special place in my heart.</p>\n<h2 id=\"korean\">Korean</h2>\n<h3 id=\"약속지가-feat-sherie\"><a href=\"https://youtu.be/NxFLl23XtY8?si=wp7xAiUfm3a-InnE\">약속지가 (feat. Sherie)</a></h3>\n<p>Its from M2U, ofc its a FUCKING BANGER AAAAA</p>\n<h3 id=\"ive-아이브-i-am\"><a href=\"https://youtu.be/6ZUIwj3FgUY?si=iW4LcnEPFJSetjZS\">IVE 아이브 ‘I AM’</a></h3>\n<p>This song is way too addicting, even as someone who doesn’t particularly enjoy KPOP, im still addicted to it haha.</p>\n<h3 id=\"seventeen-세븐틴-손오공\"><a href=\"https://youtu.be/-GQg25oP0S4?si=DpqVDgHW4gho4ezR\">SEVENTEEN (세븐틴) ‘손오공’</a></h3>\n<p>Does listening to this song make me gay? ngl korean boys really do know how do be sexy asf TMT</p>\n<h2 id=\"chinese\">Chinese</h2>\n<h3 id=\"南西肯恩-neciken-我也曾經想過這樣殺了我自己-once-i-thought-of-leaving\"><a href=\"https://youtu.be/aT6056Eb11I?si=n3McR-FVQyPQJpv9\">南西肯恩 NeciKen〈我也曾經想過這樣殺了我自己 Once I Thought of Leaving〉</a></h3>\n<p>Quite a depressing song, when I’m feeling down I really like listening to this.</p>\n<h3 id=\"南西肯恩-neciken-大海-ocean\"><a href=\"https://youtu.be/exVEN7hlqBg?si=0bapuyGw5ASqT3Uh\">南西肯恩 NeciKen〈大海 Ocean〉</a></h3>\n<p>Also a depressing song, but its so good…</p>\n<h3 id=\"hello-nico-花\"><a href=\"https://youtu.be/BlblBvpVgjE?si=fDEMM3O18n7ih-Jt\">Hello Nico〈花〉</a></h3>\n<p>Guess what? its also depressing hahaha, I guess indie bands love being depressed…</p>\n<h3 id=\"vh-複寫-more\"><a href=\"https://youtu.be/RZOZ8GRJL-Y?si=ax7Mi6cCRFsheQc5\">VH - 複寫 (More)</a></h3>\n<p>This guitar made me had an orgasm…</p>\n<h2 id=\"others\">Others</h2>\n<h3 id=\"eight-novel-輪廻転生\"><a href=\"https://youtu.be/vuEYQsiaNeA?si=Z_Sh5atKUuOZkYlO\">EigHt Novel - 輪廻転生</a></h3>\n<p>Criminally underrated, this should have 100x more views wtf</p>\n<h3 id=\"goreshit-bad-habits\"><a href=\"https://youtu.be/og7S-j4Ls7k?si=GYinV5m8T4gUqt7S\">goreshit - Bad Habits</a></h3>\n<p>I remember seeing a <a href=\"https://youtu.be/OGXJiJbxmWo?si=F-4ugPY6Z8muDaiu\">meme</a> about breakcore, its so fucking funny that its true lmaoooo</p>\n<h3 id=\"goreshit-toromi-hearts-2\"><a href=\"https://youtu.be/pk5F3q5UiWQ?si=aOvxEM4iiOIJNPds\">goreshit - Toromi Hearts 2</a></h3>\n<p>Self explainatory.</p>\n<h3 id=\"sewerslvt-mr-kill-myself\"><a href=\"https://youtu.be/RgFaK6ZQifE?si=qADh61AXoy1rzDdy\">Sewerslvt - Mr. Kill Myself</a></h3>\n<p>Breakcore goes brrrrr</p>\n<h3 id=\"undefeatable-feat-kellin-quinn\"><a href=\"https://youtu.be/u_FRDqHT5y0?si=3JSglr1wmMW7K54r\">Undefeatable (feat. Kellin Quinn)</a></h3>\n<p>So uh, why does music from Sonic slap so hard TMT</p>\n<h3 id=\"radiant\"><a href=\"https://youtu.be/eImNc6AIViQ?si=FAHpisBue5PVdELW\">Radiant</a></h3>\n<p>Another example of mobile game music being way too good.</p>\n<hr>\n<p>I did not expect this to be so long. I included some music in other languages because people actually asked me about my interests in chinese musics and others. I still have so many music I want to put in here but its getting absurdly long, so maybe next time!</p>\n<p>edit: ok wait fuck I need to add this one, I just found it out after writing it, and its so fucking amazing</p>\n<h3 id=\"tn-shi-synthesis\"><a href=\"https://youtu.be/dOP7G5J755s?si=xut-FttlCGh8I-of\">tn-shi - Synthesis</a></h3>\n<p>One of the craziest, creative visuals, baller music, holy fucking shit this is amazing god!!!</p>\n"},{"title":"Morning Mashup Grind 1","date":"2023-10-20T17:28:27.000Z","_content":"I've decided that every morning, I will make a random mashup of 5 problems in a suitable range, and I will try solving all of them and check how much time I used. (I will introduce the problem in the order I solved)\n\nTodays Mashup (range $1500$ ~ $2000$)\n\n![mashup1](mashup1.png)\n\nTotal Time: 2h 7m 58s\nTotal WA: 10 (bruh)\n\n## [CF 1217B. Zmei Gorynich](https://codeforces.com/problemset/problem/1217/B)\n\nWA count: 1\n\nThis problem is pretty easy, We want to choose the largest $d_i - h_i$, and only use it.\nWe can also use the highest damage one to deal the final blow (which I didn't observe at first).\nbut there was one small observation that I got wrong, I didn't combine two observations, and wrote that if the biggest $d_i - h_i$ is negative, there must be no answer.\nBut for example if $x = 3$, $d_i = 4$, $h_i = 5$, the $d_i - h_i$ will be negative, but we can still kill it with the final blow.\n\n```cpp\nvoid solve() {\n    int n, x;\n    cin >> n >> x;\n    vector<int> v(n);\n    int mx = -1;\n    for(int i = 0; i < n; i++) {\n        int d, h; // d, h \n        cin >> d >> h;\n        v.pb(d - h);\n        mx = max(mx, d);\n    }\n    sort(all(v), greater<int>());\n    int cnt = 1;\n    x -= mx;\n    if(x <= 0) {\n        cout << 1 << endl;\n        return;\n    }\n    if(v[0] <= 0) {\n        cout << -1 << endl;\n    } else {\n        cout << (x - 1) / v[0] + 2 << endl;\n    }\n    return;\n}\n```\n\nTime Complexity: $O(nlogn)$\n\n## [CF 1527B2. Palindrome Game (hard version)](https://codeforces.com/problemset/problem/1527/B2)\n\nWA Count: 9 (lmao)\n\nThis problem cost me around half of my total time, and 90% of the WA.\nI got an idea really quickly, but it turns out that it was entirely wrong, and I didn't notice until much later.\n\nMy thought was it is obvious that the current person would want to rush to making a palindrome as soon as possible, and the other person would just keep reversing, and after making a palindrome they just switch roles, the other person try to make it into a palindrome again, and the current person just reverses.\n\nThis is my first submission:\n\n```cpp\nvoid solve() {\n    int n; string s;\n    cin >> n >> s;\n    int alice = 0, bob = 0;\n    int altpair = 0, zeropair = 0;\n    for(int i = 0; i < (n / 2); i++) {\n        if(s[i] != s[n - i - 1]) {\n            altpair += 1;\n        } else if(s[i] == '0' && s[n - i - 1] == '0') {\n            zeropair += 1;\n        }\n    }\n    //cerr << \"ZERO: \" << zeropair << endl;\n    bob += altpair;\n    alice += (zeropair + 1) / 2;\n    bob += (zeropair / 2);\n    if(alice > bob) {\n        cout << \"BOB\" << endl;\n    } else if(alice < bob) {\n        cout << \"ALICE\" << endl;\n    } else {\n        cout << \"DRAW\" << endl;\n    }\n    return;\n}\n```\n\nThis goes wrong for a case like $0000$, where in my code would cause a draw, but the optimal way would be like:\n$0000$ -> $1000$ -> $1100$ -> $1110$ -> $0111$ -> $1111$ where Alice is guaranteed to lose.\nThere is also problems like if the length is odd and the middle is 0, we can flip that and still makes it a palindrome.\n\nThis is such a case/observation heavy problem, and really shows that I need to practice more.\n\n```cpp\nvoid solve() {\n    int n; string s;\n    cin >> n >> s;\n    int alice = 0, bob = 0;\n    int altpair = 0, zeropair = 0;\n    for(int i = 0; i < (n / 2); i++) {\n        if(s[i] != s[n - i - 1]) {\n            altpair += 1;\n        } else if(s[i] == '0' && s[n - i - 1] == '0') {\n            zeropair += 1;\n        }\n    }\n    bool flg = 0;\n    if(n % 2 == 1 && s[n / 2] == '0') flg = 1;\n    if(altpair) {\n        int zerocnt = flg + altpair + (zeropair * 2);\n        if(zerocnt == 2 && flg == 1) {\n            cout << \"DRAW\" << endl;\n        } else {\n            cout << \"ALICE\" << endl;\n        }\n    } else {\n        int zerocnt = flg + (zeropair * 2);\n        if(zerocnt % 2 == 1 && zerocnt != 1) {\n            cout << \"ALICE\" << endl;\n        } else {\n            cout << \"BOB\" << endl;\n        }\n    }\n    return;\n}\n```\n\nTime complexity: Time Complexity: $O(n)$\n\n## [CF 1462E2. Close Tuples (hard version)](https://codeforces.com/problemset/problem/1462/E2)\n\nWA Count: 0\n\nFor some reason this problem is 1700, but this is the fastest one I did in this mashup, I solved it in like under 15 minutes. It's just a very standard sliding window with combinatorics problem.\nWe go through every number $i$ and just count the number of subsets with $i$ as the last number, we can maintain the possible candidates with sliding window. You also need to know how to do modular inverse but other than that it's trivial.\n\n```cpp\n// mod defined ver\nvector<int> factorial(2e5 + 5);\nconst int mod = 1e9 + 7;\nint mabs(int a) { //轉成 0 <= a < mod的形式\n    return (a % mod + mod) % mod;\n}\nint mmul(int a, int b) {\n    return mabs((a % mod) * (b % mod));\n}\nint madd(int a, int b) { // a + b\n    return mabs(a % mod + b % mod);\n}\nint mmin(int a, int b) { // a - b\n    return mabs(a % mod - b % mod);\n}\nint fastpow(int a, int n) { // calculate a^n % mod\n    if(n == 0) return 1;\n    int half = fastpow(a, n >> 1);\n    if(n & 1) return mmul(mmul(half, half), a);\n    else return mmul(half, half);\n}\nint mdiv(int a, int b) { // (a / b) % mod\n    return mmul(a, fastpow(b, mod - 2));\n}\nint C(int a, int b) {\n    if(b > a) return 0;\n    return mdiv(factorial[a], mmul(factorial[b], factorial[a - b]));\n}\nvoid solve() {\n    int n, m, k;\n    cin >> n >> m >> k;\n    vector<int> v(n);\n    for(auto &i : v) cin >> i;\n    sort(all(v));\n    int l = 0, ans = 0;\n    for(int i = 0; i < n; i++) {\n        while(l < i && v[i] - v[l] > k) l++;\n        ans = madd(ans, C((i - l), m - 1));\n    }\n    cout << ans << endl;\n    return;\n}\n```\n\n## [CF 1283C. Friends and Gifts](https://codeforces.com/contest/1283/problem/C)\n\nWA Count: 0\n\nRandom Implement Problem, just make like three groups, need gifts, need to give gifts, and need both.\nWe can give/get gifts between groups (or inside both). just simulate this process and thats pretty much it.\n\nThere is definitely a better solution for this (In fact, the model solution uses graphs), but I'm lazy.\n\n```cpp\nvoid solve() {\n    int n;\n    cin >> n;\n    vector<int> v(n + 1, 0);\n    for(int i = 1; i <= n; i++) cin >> v[i];\n    vector<pii> status(n + 1, {0, 0}); // gift, get\n    for(int i = 1; i <= n; i++) {\n        if(v[i] != 0) {\n            status[i].first = 1;\n            status[v[i]].second = 1;\n        }\n    }\n    deque<int> needgift, needget, both;\n    for(int i = 1; i <= n; i++) {\n        if(status[i].first == 0 && status[i].second == 0) both.pb(i);\n        if(status[i].first == 1 && status[i].second == 0) needget.pb(i);\n        if(status[i].first == 0 && status[i].second == 1) needgift.pb(i);\n    }\n    deque<int> tmp;\n    while(both.size() >= 2) {\n        int a = both.front(); both.pop_front();\n        int b = both.front(); both.pop_front();\n        v[a] = b;\n        needgift.pb(b);\n        needget.pb(a);\n    }\n    while(both.size()) {\n        while(needgift.size() && both.size()) {\n            int a = needgift.front(); needgift.pop_front();\n            int b = both.front(); both.pop_front();\n            tmp.pb(b);\n            v[a] = b;\n        }\n        while(tmp.size()) {\n            needgift.pb(tmp.front());\n            tmp.pop_front();\n        }\n    }\n    while(needget.size()) {\n        while(needgift.size() && needget.size()) {\n            int a = needgift.front(); needgift.pop_front();\n            int b = needget.front(); needget.pop_front();\n            v[a] = b;\n        }\n    }\n    for(int i = 1; i <= n; i++) {\n        cout << v[i] << \" \";\n    }\n    cout << endl;\n    return;\n}\n```\n\nTime complexity: $O(n)$\n\n## [CF 1108E1. Array and Segments (Easy version)](https://codeforces.com/problemset/problem/1108/E1)\n\nWA Count: 0\n\n$n$ is really small here, so we can just bruteforce it.\n\nWe can fix each number, and apply all segments that doesn't go through this fixed point, then just maintain the maximum answer and used segments.\nI personally think the idea strikes resemblance with [CF 1882B. Sets and Union](https://codeforces.com/contest/1882/problem/B).\n\n```cpp\nvoid solve() {\n    int n, m;\n    cin >> n >> m;\n    vector<int> v(n);\n    vector<int> chosen;\n    for(int i = 0; i < n; i++) {\n        cin >> v[i];\n    }\n    vector<pii> segment(m);\n    for(int i = 0; i < m; i++) {\n        int l, r;\n        cin >> l >> r;\n        l--; r--;\n        segment[i].first = l;\n        segment[i].second = r;\n    }\n    int ans = *max_element(all(v)) - *min_element(all(v));\n    for(int i = 0; i < n; i++) {\n        vector<int> v2 = v;\n        vector<int> tmpchosen;\n        for(int k = 0; k < m; k++) {\n            int l = segment[k].first; int r = segment[k].second;\n            if(l <= i && i <= r) continue;\n            for(int j = l; j <= r; j++) v2[j]--;\n            tmpchosen.pb(k + 1);\n        }\n        if(*max_element(all(v2)) - *min_element(all(v2)) > ans) {\n            ans = *max_element(all(v2)) - *min_element(all(v2));\n            chosen = tmpchosen;\n        }\n    }\n    cout << ans << endl;\n    cout << chosen.size() << endl;\n    for(auto i : chosen) cout << i << \" \";\n    cout << endl;\n    return;\n}\n```\n\nTime Complexity: $O(n^2m)$\n\n## Afterword\n\nI think I can easily get under two hours, or even 1 hour 45 minutes, I was stuck on that 1 problem for too long! I think I will also document each problem's individual time.\n\n## [(Additional) CF 1108E2. Array and Segments (Hard version)](https://codeforces.com/problemset/problem/1108/E2)\n\nCompared to the easy version, $n$ is much bigger this time, so we cannot apply all segments with bruteforce.\nLuckily, segment tree exists, so we can just do the same thing, except we use a lazy tag segment tree to apply the segments.\nYou happily coded the segment tree, thinking \"such an easy 2100\", and you get TLE on TC 13. (Based on experience)\nThe problem here is if we still enumerate through all the segments, even if our operations are $O(mlogn)$, the total complexity is still $O(nm + mlog(n))$, which doesn't pass with the constraints.\nFortunately, there is a beautiful observation here: Let's say we have all the segments that doesn't include the index $i$, we can easily know which segments that doesn't include $i + 1$. The way to do this is to add the segments that end at $i$, and remove the segments that start at $i + 1$. This way, each segment only gets added and removed once, and our complexity is reduced to $O(n + mlog(n))$.\n\n```cpp\n// lazy seg template from kactl code book\nconst int inf = 1e9;\nstruct Node {\n    Node *l = 0, *r = 0;\n    int lo, hi, madd = 0, val = -inf, val2 = inf;\n    Node(int lo,int hi):lo(lo),hi(hi){} // Large interval of -inf\n    Node(vi& v, int lo, int hi) : lo(lo), hi(hi) {\n        if (lo + 1 < hi) {\n            int mid = lo + (hi - lo)/2;\n            l = new Node(v, lo, mid); r = new Node(v, mid, hi);\n            val = max(l->val, r->val);\n            val2 = min(l->val2, r->val2);\n        }\n        else val = val2 = v[lo];\n    }\n    int query(int L, int R) {\n        if (R <= lo || hi <= L) return -inf;\n        if (L <= lo && hi <= R) return val;\n        push();\n        return max(l->query(L, R), r->query(L, R));\n    }\n    int query2(int L, int R) {\n        if (R <= lo || hi <= L) return inf;\n        if (L <= lo && hi <= R) return val2;\n        push();\n        return min(l->query2(L, R), r->query2(L, R));\n    }\n    void add(int L, int R, int x) {\n        if (R <= lo || hi <= L) return;\n        if (L <= lo && hi <= R) {\n            madd += x;\n            val += x;\n            val2 += x;\n        }\n        else {\n            push(), l->add(L, R, x), r->add(L, R, x);\n            val = max(l->val, r->val);\n            val2 = min(l->val2, r->val2);\n        }\n    }\n    void push() {\n        if (!l) {\n            int mid = lo + (hi - lo)/2;\n            l = new Node(lo, mid); r = new Node(mid, hi);\n        }\n        if (madd)\n            l->add(lo,hi,madd), r->add(lo,hi,madd), madd = 0;\n    }\n};\nvector<int> addseg[(int)2e5 + 5];\nvector<int> removeseg[(int)2e5 + 5];\nvoid solve() {\n    int n, m;\n    cin >> n >> m;\n    vector<int> v(n);\n    for(int i = 0; i < n; i++) {\n        cin >> v[i];\n    }\n    vector<pii> segment(m);\n    for(int i = 0; i < m; i++) {\n        cin >> segment[i].first >> segment[i].second;\n        segment[i].first--; segment[i].second--; // [l, r]\n        addseg[segment[i].first].pb(i);\n        removeseg[segment[i].second].pb(i);\n    }\n    Node* tr = new Node(v, 0, v.size());\n    int ans = (tr -> query(0, n)) - (tr -> query2(0, n));\n    int ansidx = -1;\n    for(int k = 0; k < m; k++) {\n        int l = segment[k].first; int r = segment[k].second;\n        if(l <= 0 && 0 <= r) continue;\n        tr -> add(l, r + 1, -1);\n    }\n    if((tr -> query(0, n)) - (tr -> query2(0, n)) > ans) {\n        ans = (tr -> query(0, n)) - (tr -> query2(0, n));\n        ansidx = 0;\n    }\n    for(int i = 1; i < n; i++) {\n        // remove segments with l = i;\n        for(auto idx : addseg[i]) {\n            tr -> add(segment[idx].first, segment[idx].second + 1, 1);\n        }\n        // add segments with r = i - 1;\n        for(auto idx : removeseg[i - 1]) {\n            tr -> add(segment[idx].first, segment[idx].second + 1, -1);\n        }\n        if((tr -> query(0, n)) - (tr -> query2(0, n)) > ans) {\n            ans = (tr -> query(0, n)) - (tr -> query2(0, n));\n            ansidx = i;\n        }   \n    }\n    vi chosen;\n    for(int k = 0; k < m; k++) {\n        if(ansidx == -1) break;\n        int l = segment[k].first; int r = segment[k].second;\n        if(l <= ansidx && ansidx <= r) continue;\n        else chosen.pb(k + 1);\n    }\n    cout << ans << endl;\n    cout << chosen.size() << endl;\n    for(auto i : chosen) cout << i << \" \";\n    cout << endl;\n    return;\n}\n```\n\nTime Complexity: $O(n + mlog(n))$\n","source":"_posts/Mashup-grind-feast-1.md","raw":"---\ntitle: Morning Mashup Grind 1\ndate: 2023-10-20 12:28:27\ntags: [\"CP\"]\n---\nI've decided that every morning, I will make a random mashup of 5 problems in a suitable range, and I will try solving all of them and check how much time I used. (I will introduce the problem in the order I solved)\n\nTodays Mashup (range $1500$ ~ $2000$)\n\n![mashup1](mashup1.png)\n\nTotal Time: 2h 7m 58s\nTotal WA: 10 (bruh)\n\n## [CF 1217B. Zmei Gorynich](https://codeforces.com/problemset/problem/1217/B)\n\nWA count: 1\n\nThis problem is pretty easy, We want to choose the largest $d_i - h_i$, and only use it.\nWe can also use the highest damage one to deal the final blow (which I didn't observe at first).\nbut there was one small observation that I got wrong, I didn't combine two observations, and wrote that if the biggest $d_i - h_i$ is negative, there must be no answer.\nBut for example if $x = 3$, $d_i = 4$, $h_i = 5$, the $d_i - h_i$ will be negative, but we can still kill it with the final blow.\n\n```cpp\nvoid solve() {\n    int n, x;\n    cin >> n >> x;\n    vector<int> v(n);\n    int mx = -1;\n    for(int i = 0; i < n; i++) {\n        int d, h; // d, h \n        cin >> d >> h;\n        v.pb(d - h);\n        mx = max(mx, d);\n    }\n    sort(all(v), greater<int>());\n    int cnt = 1;\n    x -= mx;\n    if(x <= 0) {\n        cout << 1 << endl;\n        return;\n    }\n    if(v[0] <= 0) {\n        cout << -1 << endl;\n    } else {\n        cout << (x - 1) / v[0] + 2 << endl;\n    }\n    return;\n}\n```\n\nTime Complexity: $O(nlogn)$\n\n## [CF 1527B2. Palindrome Game (hard version)](https://codeforces.com/problemset/problem/1527/B2)\n\nWA Count: 9 (lmao)\n\nThis problem cost me around half of my total time, and 90% of the WA.\nI got an idea really quickly, but it turns out that it was entirely wrong, and I didn't notice until much later.\n\nMy thought was it is obvious that the current person would want to rush to making a palindrome as soon as possible, and the other person would just keep reversing, and after making a palindrome they just switch roles, the other person try to make it into a palindrome again, and the current person just reverses.\n\nThis is my first submission:\n\n```cpp\nvoid solve() {\n    int n; string s;\n    cin >> n >> s;\n    int alice = 0, bob = 0;\n    int altpair = 0, zeropair = 0;\n    for(int i = 0; i < (n / 2); i++) {\n        if(s[i] != s[n - i - 1]) {\n            altpair += 1;\n        } else if(s[i] == '0' && s[n - i - 1] == '0') {\n            zeropair += 1;\n        }\n    }\n    //cerr << \"ZERO: \" << zeropair << endl;\n    bob += altpair;\n    alice += (zeropair + 1) / 2;\n    bob += (zeropair / 2);\n    if(alice > bob) {\n        cout << \"BOB\" << endl;\n    } else if(alice < bob) {\n        cout << \"ALICE\" << endl;\n    } else {\n        cout << \"DRAW\" << endl;\n    }\n    return;\n}\n```\n\nThis goes wrong for a case like $0000$, where in my code would cause a draw, but the optimal way would be like:\n$0000$ -> $1000$ -> $1100$ -> $1110$ -> $0111$ -> $1111$ where Alice is guaranteed to lose.\nThere is also problems like if the length is odd and the middle is 0, we can flip that and still makes it a palindrome.\n\nThis is such a case/observation heavy problem, and really shows that I need to practice more.\n\n```cpp\nvoid solve() {\n    int n; string s;\n    cin >> n >> s;\n    int alice = 0, bob = 0;\n    int altpair = 0, zeropair = 0;\n    for(int i = 0; i < (n / 2); i++) {\n        if(s[i] != s[n - i - 1]) {\n            altpair += 1;\n        } else if(s[i] == '0' && s[n - i - 1] == '0') {\n            zeropair += 1;\n        }\n    }\n    bool flg = 0;\n    if(n % 2 == 1 && s[n / 2] == '0') flg = 1;\n    if(altpair) {\n        int zerocnt = flg + altpair + (zeropair * 2);\n        if(zerocnt == 2 && flg == 1) {\n            cout << \"DRAW\" << endl;\n        } else {\n            cout << \"ALICE\" << endl;\n        }\n    } else {\n        int zerocnt = flg + (zeropair * 2);\n        if(zerocnt % 2 == 1 && zerocnt != 1) {\n            cout << \"ALICE\" << endl;\n        } else {\n            cout << \"BOB\" << endl;\n        }\n    }\n    return;\n}\n```\n\nTime complexity: Time Complexity: $O(n)$\n\n## [CF 1462E2. Close Tuples (hard version)](https://codeforces.com/problemset/problem/1462/E2)\n\nWA Count: 0\n\nFor some reason this problem is 1700, but this is the fastest one I did in this mashup, I solved it in like under 15 minutes. It's just a very standard sliding window with combinatorics problem.\nWe go through every number $i$ and just count the number of subsets with $i$ as the last number, we can maintain the possible candidates with sliding window. You also need to know how to do modular inverse but other than that it's trivial.\n\n```cpp\n// mod defined ver\nvector<int> factorial(2e5 + 5);\nconst int mod = 1e9 + 7;\nint mabs(int a) { //轉成 0 <= a < mod的形式\n    return (a % mod + mod) % mod;\n}\nint mmul(int a, int b) {\n    return mabs((a % mod) * (b % mod));\n}\nint madd(int a, int b) { // a + b\n    return mabs(a % mod + b % mod);\n}\nint mmin(int a, int b) { // a - b\n    return mabs(a % mod - b % mod);\n}\nint fastpow(int a, int n) { // calculate a^n % mod\n    if(n == 0) return 1;\n    int half = fastpow(a, n >> 1);\n    if(n & 1) return mmul(mmul(half, half), a);\n    else return mmul(half, half);\n}\nint mdiv(int a, int b) { // (a / b) % mod\n    return mmul(a, fastpow(b, mod - 2));\n}\nint C(int a, int b) {\n    if(b > a) return 0;\n    return mdiv(factorial[a], mmul(factorial[b], factorial[a - b]));\n}\nvoid solve() {\n    int n, m, k;\n    cin >> n >> m >> k;\n    vector<int> v(n);\n    for(auto &i : v) cin >> i;\n    sort(all(v));\n    int l = 0, ans = 0;\n    for(int i = 0; i < n; i++) {\n        while(l < i && v[i] - v[l] > k) l++;\n        ans = madd(ans, C((i - l), m - 1));\n    }\n    cout << ans << endl;\n    return;\n}\n```\n\n## [CF 1283C. Friends and Gifts](https://codeforces.com/contest/1283/problem/C)\n\nWA Count: 0\n\nRandom Implement Problem, just make like three groups, need gifts, need to give gifts, and need both.\nWe can give/get gifts between groups (or inside both). just simulate this process and thats pretty much it.\n\nThere is definitely a better solution for this (In fact, the model solution uses graphs), but I'm lazy.\n\n```cpp\nvoid solve() {\n    int n;\n    cin >> n;\n    vector<int> v(n + 1, 0);\n    for(int i = 1; i <= n; i++) cin >> v[i];\n    vector<pii> status(n + 1, {0, 0}); // gift, get\n    for(int i = 1; i <= n; i++) {\n        if(v[i] != 0) {\n            status[i].first = 1;\n            status[v[i]].second = 1;\n        }\n    }\n    deque<int> needgift, needget, both;\n    for(int i = 1; i <= n; i++) {\n        if(status[i].first == 0 && status[i].second == 0) both.pb(i);\n        if(status[i].first == 1 && status[i].second == 0) needget.pb(i);\n        if(status[i].first == 0 && status[i].second == 1) needgift.pb(i);\n    }\n    deque<int> tmp;\n    while(both.size() >= 2) {\n        int a = both.front(); both.pop_front();\n        int b = both.front(); both.pop_front();\n        v[a] = b;\n        needgift.pb(b);\n        needget.pb(a);\n    }\n    while(both.size()) {\n        while(needgift.size() && both.size()) {\n            int a = needgift.front(); needgift.pop_front();\n            int b = both.front(); both.pop_front();\n            tmp.pb(b);\n            v[a] = b;\n        }\n        while(tmp.size()) {\n            needgift.pb(tmp.front());\n            tmp.pop_front();\n        }\n    }\n    while(needget.size()) {\n        while(needgift.size() && needget.size()) {\n            int a = needgift.front(); needgift.pop_front();\n            int b = needget.front(); needget.pop_front();\n            v[a] = b;\n        }\n    }\n    for(int i = 1; i <= n; i++) {\n        cout << v[i] << \" \";\n    }\n    cout << endl;\n    return;\n}\n```\n\nTime complexity: $O(n)$\n\n## [CF 1108E1. Array and Segments (Easy version)](https://codeforces.com/problemset/problem/1108/E1)\n\nWA Count: 0\n\n$n$ is really small here, so we can just bruteforce it.\n\nWe can fix each number, and apply all segments that doesn't go through this fixed point, then just maintain the maximum answer and used segments.\nI personally think the idea strikes resemblance with [CF 1882B. Sets and Union](https://codeforces.com/contest/1882/problem/B).\n\n```cpp\nvoid solve() {\n    int n, m;\n    cin >> n >> m;\n    vector<int> v(n);\n    vector<int> chosen;\n    for(int i = 0; i < n; i++) {\n        cin >> v[i];\n    }\n    vector<pii> segment(m);\n    for(int i = 0; i < m; i++) {\n        int l, r;\n        cin >> l >> r;\n        l--; r--;\n        segment[i].first = l;\n        segment[i].second = r;\n    }\n    int ans = *max_element(all(v)) - *min_element(all(v));\n    for(int i = 0; i < n; i++) {\n        vector<int> v2 = v;\n        vector<int> tmpchosen;\n        for(int k = 0; k < m; k++) {\n            int l = segment[k].first; int r = segment[k].second;\n            if(l <= i && i <= r) continue;\n            for(int j = l; j <= r; j++) v2[j]--;\n            tmpchosen.pb(k + 1);\n        }\n        if(*max_element(all(v2)) - *min_element(all(v2)) > ans) {\n            ans = *max_element(all(v2)) - *min_element(all(v2));\n            chosen = tmpchosen;\n        }\n    }\n    cout << ans << endl;\n    cout << chosen.size() << endl;\n    for(auto i : chosen) cout << i << \" \";\n    cout << endl;\n    return;\n}\n```\n\nTime Complexity: $O(n^2m)$\n\n## Afterword\n\nI think I can easily get under two hours, or even 1 hour 45 minutes, I was stuck on that 1 problem for too long! I think I will also document each problem's individual time.\n\n## [(Additional) CF 1108E2. Array and Segments (Hard version)](https://codeforces.com/problemset/problem/1108/E2)\n\nCompared to the easy version, $n$ is much bigger this time, so we cannot apply all segments with bruteforce.\nLuckily, segment tree exists, so we can just do the same thing, except we use a lazy tag segment tree to apply the segments.\nYou happily coded the segment tree, thinking \"such an easy 2100\", and you get TLE on TC 13. (Based on experience)\nThe problem here is if we still enumerate through all the segments, even if our operations are $O(mlogn)$, the total complexity is still $O(nm + mlog(n))$, which doesn't pass with the constraints.\nFortunately, there is a beautiful observation here: Let's say we have all the segments that doesn't include the index $i$, we can easily know which segments that doesn't include $i + 1$. The way to do this is to add the segments that end at $i$, and remove the segments that start at $i + 1$. This way, each segment only gets added and removed once, and our complexity is reduced to $O(n + mlog(n))$.\n\n```cpp\n// lazy seg template from kactl code book\nconst int inf = 1e9;\nstruct Node {\n    Node *l = 0, *r = 0;\n    int lo, hi, madd = 0, val = -inf, val2 = inf;\n    Node(int lo,int hi):lo(lo),hi(hi){} // Large interval of -inf\n    Node(vi& v, int lo, int hi) : lo(lo), hi(hi) {\n        if (lo + 1 < hi) {\n            int mid = lo + (hi - lo)/2;\n            l = new Node(v, lo, mid); r = new Node(v, mid, hi);\n            val = max(l->val, r->val);\n            val2 = min(l->val2, r->val2);\n        }\n        else val = val2 = v[lo];\n    }\n    int query(int L, int R) {\n        if (R <= lo || hi <= L) return -inf;\n        if (L <= lo && hi <= R) return val;\n        push();\n        return max(l->query(L, R), r->query(L, R));\n    }\n    int query2(int L, int R) {\n        if (R <= lo || hi <= L) return inf;\n        if (L <= lo && hi <= R) return val2;\n        push();\n        return min(l->query2(L, R), r->query2(L, R));\n    }\n    void add(int L, int R, int x) {\n        if (R <= lo || hi <= L) return;\n        if (L <= lo && hi <= R) {\n            madd += x;\n            val += x;\n            val2 += x;\n        }\n        else {\n            push(), l->add(L, R, x), r->add(L, R, x);\n            val = max(l->val, r->val);\n            val2 = min(l->val2, r->val2);\n        }\n    }\n    void push() {\n        if (!l) {\n            int mid = lo + (hi - lo)/2;\n            l = new Node(lo, mid); r = new Node(mid, hi);\n        }\n        if (madd)\n            l->add(lo,hi,madd), r->add(lo,hi,madd), madd = 0;\n    }\n};\nvector<int> addseg[(int)2e5 + 5];\nvector<int> removeseg[(int)2e5 + 5];\nvoid solve() {\n    int n, m;\n    cin >> n >> m;\n    vector<int> v(n);\n    for(int i = 0; i < n; i++) {\n        cin >> v[i];\n    }\n    vector<pii> segment(m);\n    for(int i = 0; i < m; i++) {\n        cin >> segment[i].first >> segment[i].second;\n        segment[i].first--; segment[i].second--; // [l, r]\n        addseg[segment[i].first].pb(i);\n        removeseg[segment[i].second].pb(i);\n    }\n    Node* tr = new Node(v, 0, v.size());\n    int ans = (tr -> query(0, n)) - (tr -> query2(0, n));\n    int ansidx = -1;\n    for(int k = 0; k < m; k++) {\n        int l = segment[k].first; int r = segment[k].second;\n        if(l <= 0 && 0 <= r) continue;\n        tr -> add(l, r + 1, -1);\n    }\n    if((tr -> query(0, n)) - (tr -> query2(0, n)) > ans) {\n        ans = (tr -> query(0, n)) - (tr -> query2(0, n));\n        ansidx = 0;\n    }\n    for(int i = 1; i < n; i++) {\n        // remove segments with l = i;\n        for(auto idx : addseg[i]) {\n            tr -> add(segment[idx].first, segment[idx].second + 1, 1);\n        }\n        // add segments with r = i - 1;\n        for(auto idx : removeseg[i - 1]) {\n            tr -> add(segment[idx].first, segment[idx].second + 1, -1);\n        }\n        if((tr -> query(0, n)) - (tr -> query2(0, n)) > ans) {\n            ans = (tr -> query(0, n)) - (tr -> query2(0, n));\n            ansidx = i;\n        }   \n    }\n    vi chosen;\n    for(int k = 0; k < m; k++) {\n        if(ansidx == -1) break;\n        int l = segment[k].first; int r = segment[k].second;\n        if(l <= ansidx && ansidx <= r) continue;\n        else chosen.pb(k + 1);\n    }\n    cout << ans << endl;\n    cout << chosen.size() << endl;\n    for(auto i : chosen) cout << i << \" \";\n    cout << endl;\n    return;\n}\n```\n\nTime Complexity: $O(n + mlog(n))$\n","slug":"Mashup-grind-feast-1","published":1,"updated":"2024-12-26T01:29:58.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblh0000ob0u9admh9jzg","content":"<p>I’ve decided that every morning, I will make a random mashup of 5 problems in a suitable range, and I will try solving all of them and check how much time I used. (I will introduce the problem in the order I solved)</p>\n<p>Todays Mashup (range <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1500</mn></mrow><annotation encoding=\"application/x-tex\">1500</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">5</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span> ~ <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2000</mn></mrow><annotation encoding=\"application/x-tex\">2000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>)</p>\n<p><img src=\"mashup1.png\" alt=\"mashup1\"></p>\n<p>Total Time: 2h 7m 58s<br>\nTotal WA: 10 (bruh)</p>\n<h2 id=\"cf-1217b-zmei-gorynich\"><a href=\"https://codeforces.com/problemset/problem/1217/B\">CF 1217B. Zmei Gorynich</a></h2>\n<p>WA count: 1</p>\n<p>This problem is pretty easy, We want to choose the largest <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><mo>−</mo><msub><mi>h</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">d_i - h_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and only use it.<br>\nWe can also use the highest damage one to deal the final blow (which I didn’t observe at first).<br>\nbut there was one small observation that I got wrong, I didn’t combine two observations, and wrote that if the biggest <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><mo>−</mo><msub><mi>h</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">d_i - h_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is negative, there must be no answer.<br>\nBut for example if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">x = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><mo>=</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">d_i = 4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub><mo>=</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">h_i = 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span></span></span></span>, the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><mo>−</mo><msub><mi>h</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">d_i - h_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> will be negative, but we can still kill it with the final blow.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, x;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; x;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mx = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> d, h; <span class=\"comment\">// d, h </span></span><br><span class=\"line\">        cin &gt;&gt; d &gt;&gt; h;</span><br><span class=\"line\">        v.<span class=\"built_in\">pb</span>(d - h);</span><br><span class=\"line\">        mx = <span class=\"built_in\">max</span>(mx, d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(v), <span class=\"built_in\">greater</span>&lt;<span class=\"type\">int</span>&gt;());</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    x -= mx;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"number\">1</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v[<span class=\"number\">0</span>] &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; (x - <span class=\"number\">1</span>) / v[<span class=\"number\">0</span>] + <span class=\"number\">2</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1527b2-palindrome-game-hard-version\"><a href=\"https://codeforces.com/problemset/problem/1527/B2\">CF 1527B2. Palindrome Game (hard version)</a></h2>\n<p>WA Count: 9 (lmao)</p>\n<p>This problem cost me around half of my total time, and 90% of the WA.<br>\nI got an idea really quickly, but it turns out that it was entirely wrong, and I didn’t notice until much later.</p>\n<p>My thought was it is obvious that the current person would want to rush to making a palindrome as soon as possible, and the other person would just keep reversing, and after making a palindrome they just switch roles, the other person try to make it into a palindrome again, and the current person just reverses.</p>\n<p>This is my first submission:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n; string s;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"type\">int</span> alice = <span class=\"number\">0</span>, bob = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> altpair = <span class=\"number\">0</span>, zeropair = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (n / <span class=\"number\">2</span>); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] != s[n - i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            altpair += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; s[n - i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;0&#x27;</span>) &#123;</span><br><span class=\"line\">            zeropair += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//cerr &lt;&lt; &quot;ZERO: &quot; &lt;&lt; zeropair &lt;&lt; endl;</span></span><br><span class=\"line\">    bob += altpair;</span><br><span class=\"line\">    alice += (zeropair + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    bob += (zeropair / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(alice &gt; bob) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;BOB&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(alice &lt; bob) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;ALICE&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;DRAW&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This goes wrong for a case like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0000</mn></mrow><annotation encoding=\"application/x-tex\">0000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>, where in my code would cause a draw, but the optimal way would be like:<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0000</mn></mrow><annotation encoding=\"application/x-tex\">0000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span> -&gt; <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1000</mn></mrow><annotation encoding=\"application/x-tex\">1000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span> -&gt; <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1100</mn></mrow><annotation encoding=\"application/x-tex\">1100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span> -&gt; <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1110</mn></mrow><annotation encoding=\"application/x-tex\">1110</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span> -&gt; <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0111</mn></mrow><annotation encoding=\"application/x-tex\">0111</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">1</span></span></span></span> -&gt; <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1111</mn></mrow><annotation encoding=\"application/x-tex\">1111</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">1</span></span></span></span> where Alice is guaranteed to lose.<br>\nThere is also problems like if the length is odd and the middle is 0, we can flip that and still makes it a palindrome.</p>\n<p>This is such a case/observation heavy problem, and really shows that I need to practice more.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n; string s;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"type\">int</span> alice = <span class=\"number\">0</span>, bob = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> altpair = <span class=\"number\">0</span>, zeropair = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (n / <span class=\"number\">2</span>); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] != s[n - i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            altpair += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; s[n - i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;0&#x27;</span>) &#123;</span><br><span class=\"line\">            zeropair += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">bool</span> flg = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n % <span class=\"number\">2</span> == <span class=\"number\">1</span> &amp;&amp; s[n / <span class=\"number\">2</span>] == <span class=\"string\">&#x27;0&#x27;</span>) flg = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(altpair) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> zerocnt = flg + altpair + (zeropair * <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(zerocnt == <span class=\"number\">2</span> &amp;&amp; flg == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;DRAW&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ALICE&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> zerocnt = flg + (zeropair * <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(zerocnt % <span class=\"number\">2</span> == <span class=\"number\">1</span> &amp;&amp; zerocnt != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ALICE&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;BOB&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1462e2-close-tuples-hard-version\"><a href=\"https://codeforces.com/problemset/problem/1462/E2\">CF 1462E2. Close Tuples (hard version)</a></h2>\n<p>WA Count: 0</p>\n<p>For some reason this problem is 1700, but this is the fastest one I did in this mashup, I solved it in like under 15 minutes. It’s just a very standard sliding window with combinatorics problem.<br>\nWe go through every number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> and just count the number of subsets with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> as the last number, we can maintain the possible candidates with sliding window. You also need to know how to do modular inverse but other than that it’s trivial.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mod defined ver</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"number\">2e5</span> + <span class=\"number\">5</span>)</span></span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mabs</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> </span>&#123; <span class=\"comment\">//轉成 0 &lt;= a &lt; mod的形式</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a % mod + mod) % mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mmul</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mabs</span>((a % mod) * (b % mod));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">madd</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123; <span class=\"comment\">// a + b</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mabs</span>(a % mod + b % mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mmin</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123; <span class=\"comment\">// a - b</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mabs</span>(a % mod - b % mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">fastpow</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> n)</span> </span>&#123; <span class=\"comment\">// calculate a^n % mod</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> half = <span class=\"built_in\">fastpow</span>(a, n &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">mmul</span>(<span class=\"built_in\">mmul</span>(half, half), a);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">mmul</span>(half, half);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mdiv</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123; <span class=\"comment\">// (a / b) % mod</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mmul</span>(a, <span class=\"built_in\">fastpow</span>(b, mod - <span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">C</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b &gt; a) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mdiv</span>(factorial[a], <span class=\"built_in\">mmul</span>(factorial[b], factorial[a - b]));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, k;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;i : v) cin &gt;&gt; i;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(v));</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"number\">0</span>, ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &lt; i &amp;&amp; v[i] - v[l] &gt; k) l++;</span><br><span class=\"line\">        ans = <span class=\"built_in\">madd</span>(ans, <span class=\"built_in\">C</span>((i - l), m - <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"cf-1283c-friends-and-gifts\"><a href=\"https://codeforces.com/contest/1283/problem/C\">CF 1283C. Friends and Gifts</a></h2>\n<p>WA Count: 0</p>\n<p>Random Implement Problem, just make like three groups, need gifts, need to give gifts, and need both.<br>\nWe can give/get gifts between groups (or inside both). just simulate this process and thats pretty much it.</p>\n<p>There is definitely a better solution for this (In fact, the model solution uses graphs), but I’m lazy.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) cin &gt;&gt; v[i];</span><br><span class=\"line\">    <span class=\"function\">vector&lt;pii&gt; <span class=\"title\">status</span><span class=\"params\">(n + <span class=\"number\">1</span>, &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;)</span></span>; <span class=\"comment\">// gift, get</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v[i] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            status[i].first = <span class=\"number\">1</span>;</span><br><span class=\"line\">            status[v[i]].second = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deque&lt;<span class=\"type\">int</span>&gt; needgift, needget, both;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(status[i].first == <span class=\"number\">0</span> &amp;&amp; status[i].second == <span class=\"number\">0</span>) both.<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(status[i].first == <span class=\"number\">1</span> &amp;&amp; status[i].second == <span class=\"number\">0</span>) needget.<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(status[i].first == <span class=\"number\">0</span> &amp;&amp; status[i].second == <span class=\"number\">1</span>) needgift.<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deque&lt;<span class=\"type\">int</span>&gt; tmp;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(both.<span class=\"built_in\">size</span>() &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a = both.<span class=\"built_in\">front</span>(); both.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> b = both.<span class=\"built_in\">front</span>(); both.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">        v[a] = b;</span><br><span class=\"line\">        needgift.<span class=\"built_in\">pb</span>(b);</span><br><span class=\"line\">        needget.<span class=\"built_in\">pb</span>(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(both.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(needgift.<span class=\"built_in\">size</span>() &amp;&amp; both.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> a = needgift.<span class=\"built_in\">front</span>(); needgift.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">            <span class=\"type\">int</span> b = both.<span class=\"built_in\">front</span>(); both.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">            tmp.<span class=\"built_in\">pb</span>(b);</span><br><span class=\"line\">            v[a] = b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(tmp.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">            needgift.<span class=\"built_in\">pb</span>(tmp.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">            tmp.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(needget.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(needgift.<span class=\"built_in\">size</span>() &amp;&amp; needget.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> a = needgift.<span class=\"built_in\">front</span>(); needgift.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">            <span class=\"type\">int</span> b = needget.<span class=\"built_in\">front</span>(); needget.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">            v[a] = b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        cout &lt;&lt; v[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1108e1-array-and-segments-easy-version\"><a href=\"https://codeforces.com/problemset/problem/1108/E1\">CF 1108E1. Array and Segments (Easy version)</a></h2>\n<p>WA Count: 0</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> is really small here, so we can just bruteforce it.</p>\n<p>We can fix each number, and apply all segments that doesn’t go through this fixed point, then just maintain the maximum answer and used segments.<br>\nI personally think the idea strikes resemblance with <a href=\"https://codeforces.com/contest/1882/problem/B\">CF 1882B. Sets and Union</a>.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; chosen;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; v[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;pii&gt; <span class=\"title\">segment</span><span class=\"params\">(m)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">        l--; r--;</span><br><span class=\"line\">        segment[i].first = l;</span><br><span class=\"line\">        segment[i].second = r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = *<span class=\"built_in\">max_element</span>(<span class=\"built_in\">all</span>(v)) - *<span class=\"built_in\">min_element</span>(<span class=\"built_in\">all</span>(v));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; v2 = v;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; tmpchosen;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; m; k++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l = segment[k].first; <span class=\"type\">int</span> r = segment[k].second;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l &lt;= i &amp;&amp; i &lt;= r) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = l; j &lt;= r; j++) v2[j]--;</span><br><span class=\"line\">            tmpchosen.<span class=\"built_in\">pb</span>(k + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(*<span class=\"built_in\">max_element</span>(<span class=\"built_in\">all</span>(v2)) - *<span class=\"built_in\">min_element</span>(<span class=\"built_in\">all</span>(v2)) &gt; ans) &#123;</span><br><span class=\"line\">            ans = *<span class=\"built_in\">max_element</span>(<span class=\"built_in\">all</span>(v2)) - *<span class=\"built_in\">min_element</span>(<span class=\"built_in\">all</span>(v2));</span><br><span class=\"line\">            chosen = tmpchosen;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; chosen.<span class=\"built_in\">size</span>() &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : chosen) cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"afterword\">Afterword</h2>\n<p>I think I can easily get under two hours, or even 1 hour 45 minutes, I was stuck on that 1 problem for too long! I think I will also document each problem’s individual time.</p>\n<h2 id=\"additional-cf-1108e2-array-and-segments-hard-version\"><a href=\"https://codeforces.com/problemset/problem/1108/E2\">(Additional) CF 1108E2. Array and Segments (Hard version)</a></h2>\n<p>Compared to the easy version, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> is much bigger this time, so we cannot apply all segments with bruteforce.<br>\nLuckily, segment tree exists, so we can just do the same thing, except we use a lazy tag segment tree to apply the segments.<br>\nYou happily coded the segment tree, thinking “such an easy 2100”, and you get TLE on TC 13. (Based on experience)<br>\nThe problem here is if we still enumerate through all the segments, even if our operations are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(mlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>, the total complexity is still <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>m</mi><mo>+</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nm + mlog(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>, which doesn’t pass with the constraints.<br>\nFortunately, there is a beautiful observation here: Let’s say we have all the segments that doesn’t include the index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, we can easily know which segments that doesn’t include <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>. The way to do this is to add the segments that end at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, and remove the segments that start at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>. This way, each segment only gets added and removed once, and our complexity is reduced to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n + mlog(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lazy seg template from kactl code book</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf = <span class=\"number\">1e9</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    Node *l = <span class=\"number\">0</span>, *r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> lo, hi, madd = <span class=\"number\">0</span>, val = -inf, val2 = inf;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> lo,<span class=\"type\">int</span> hi):<span class=\"built_in\">lo</span>(lo),<span class=\"built_in\">hi</span>(hi)&#123;&#125; <span class=\"comment\">// Large interval of -inf</span></span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(vi&amp; v, <span class=\"type\">int</span> lo, <span class=\"type\">int</span> hi) : <span class=\"built_in\">lo</span>(lo), <span class=\"built_in\">hi</span>(hi) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lo + <span class=\"number\">1</span> &lt; hi) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid = lo + (hi - lo)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            l = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(v, lo, mid); r = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(v, mid, hi);</span><br><span class=\"line\">            val = <span class=\"built_in\">max</span>(l-&gt;val, r-&gt;val);</span><br><span class=\"line\">            val2 = <span class=\"built_in\">min</span>(l-&gt;val2, r-&gt;val2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> val = val2 = v[lo];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> L, <span class=\"type\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (R &lt;= lo || hi &lt;= L) <span class=\"keyword\">return</span> -inf;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L &lt;= lo &amp;&amp; hi &lt;= R) <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">        <span class=\"built_in\">push</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(l-&gt;<span class=\"built_in\">query</span>(L, R), r-&gt;<span class=\"built_in\">query</span>(L, R));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query2</span><span class=\"params\">(<span class=\"type\">int</span> L, <span class=\"type\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (R &lt;= lo || hi &lt;= L) <span class=\"keyword\">return</span> inf;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L &lt;= lo &amp;&amp; hi &lt;= R) <span class=\"keyword\">return</span> val2;</span><br><span class=\"line\">        <span class=\"built_in\">push</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(l-&gt;<span class=\"built_in\">query2</span>(L, R), r-&gt;<span class=\"built_in\">query2</span>(L, R));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> L, <span class=\"type\">int</span> R, <span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (R &lt;= lo || hi &lt;= L) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L &lt;= lo &amp;&amp; hi &lt;= R) &#123;</span><br><span class=\"line\">            madd += x;</span><br><span class=\"line\">            val += x;</span><br><span class=\"line\">            val2 += x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">push</span>(), l-&gt;<span class=\"built_in\">add</span>(L, R, x), r-&gt;<span class=\"built_in\">add</span>(L, R, x);</span><br><span class=\"line\">            val = <span class=\"built_in\">max</span>(l-&gt;val, r-&gt;val);</span><br><span class=\"line\">            val2 = <span class=\"built_in\">min</span>(l-&gt;val2, r-&gt;val2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!l) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid = lo + (hi - lo)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            l = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(lo, mid); r = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(mid, hi);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (madd)</span><br><span class=\"line\">            l-&gt;<span class=\"built_in\">add</span>(lo,hi,madd), r-&gt;<span class=\"built_in\">add</span>(lo,hi,madd), madd = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; addseg[(<span class=\"type\">int</span>)<span class=\"number\">2e5</span> + <span class=\"number\">5</span>];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; removeseg[(<span class=\"type\">int</span>)<span class=\"number\">2e5</span> + <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; v[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;pii&gt; <span class=\"title\">segment</span><span class=\"params\">(m)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; segment[i].first &gt;&gt; segment[i].second;</span><br><span class=\"line\">        segment[i].first--; segment[i].second--; <span class=\"comment\">// [l, r]</span></span><br><span class=\"line\">        addseg[segment[i].first].<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">        removeseg[segment[i].second].<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node* tr = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(v, <span class=\"number\">0</span>, v.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = (tr -&gt; <span class=\"built_in\">query</span>(<span class=\"number\">0</span>, n)) - (tr -&gt; <span class=\"built_in\">query2</span>(<span class=\"number\">0</span>, n));</span><br><span class=\"line\">    <span class=\"type\">int</span> ansidx = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; m; k++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l = segment[k].first; <span class=\"type\">int</span> r = segment[k].second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l &lt;= <span class=\"number\">0</span> &amp;&amp; <span class=\"number\">0</span> &lt;= r) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        tr -&gt; <span class=\"built_in\">add</span>(l, r + <span class=\"number\">1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((tr -&gt; <span class=\"built_in\">query</span>(<span class=\"number\">0</span>, n)) - (tr -&gt; <span class=\"built_in\">query2</span>(<span class=\"number\">0</span>, n)) &gt; ans) &#123;</span><br><span class=\"line\">        ans = (tr -&gt; <span class=\"built_in\">query</span>(<span class=\"number\">0</span>, n)) - (tr -&gt; <span class=\"built_in\">query2</span>(<span class=\"number\">0</span>, n));</span><br><span class=\"line\">        ansidx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// remove segments with l = i;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> idx : addseg[i]) &#123;</span><br><span class=\"line\">            tr -&gt; <span class=\"built_in\">add</span>(segment[idx].first, segment[idx].second + <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// add segments with r = i - 1;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> idx : removeseg[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            tr -&gt; <span class=\"built_in\">add</span>(segment[idx].first, segment[idx].second + <span class=\"number\">1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((tr -&gt; <span class=\"built_in\">query</span>(<span class=\"number\">0</span>, n)) - (tr -&gt; <span class=\"built_in\">query2</span>(<span class=\"number\">0</span>, n)) &gt; ans) &#123;</span><br><span class=\"line\">            ans = (tr -&gt; <span class=\"built_in\">query</span>(<span class=\"number\">0</span>, n)) - (tr -&gt; <span class=\"built_in\">query2</span>(<span class=\"number\">0</span>, n));</span><br><span class=\"line\">            ansidx = i;</span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vi chosen;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; m; k++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ansidx == <span class=\"number\">-1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> l = segment[k].first; <span class=\"type\">int</span> r = segment[k].second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l &lt;= ansidx &amp;&amp; ansidx &lt;= r) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> chosen.<span class=\"built_in\">pb</span>(k + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; chosen.<span class=\"built_in\">size</span>() &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : chosen) cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n + mlog(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>I’ve decided that every morning, I will make a random mashup of 5 problems in a suitable range, and I will try solving all of them and check how much time I used. (I will introduce the problem in the order I solved)</p>\n<p>Todays Mashup (range <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1500</mn></mrow><annotation encoding=\"application/x-tex\">1500</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">5</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span> ~ <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2000</mn></mrow><annotation encoding=\"application/x-tex\">2000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>)</p>\n<p><img src=\"mashup1.png\" alt=\"mashup1\"></p>\n<p>Total Time: 2h 7m 58s<br>\nTotal WA: 10 (bruh)</p>\n<h2 id=\"cf-1217b-zmei-gorynich\"><a href=\"https://codeforces.com/problemset/problem/1217/B\">CF 1217B. Zmei Gorynich</a></h2>\n<p>WA count: 1</p>\n<p>This problem is pretty easy, We want to choose the largest <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><mo>−</mo><msub><mi>h</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">d_i - h_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and only use it.<br>\nWe can also use the highest damage one to deal the final blow (which I didn’t observe at first).<br>\nbut there was one small observation that I got wrong, I didn’t combine two observations, and wrote that if the biggest <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><mo>−</mo><msub><mi>h</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">d_i - h_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is negative, there must be no answer.<br>\nBut for example if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>=</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">x = 3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><mo>=</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">d_i = 4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>h</mi><mi>i</mi></msub><mo>=</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">h_i = 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span></span></span></span>, the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>d</mi><mi>i</mi></msub><mo>−</mo><msub><mi>h</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">d_i - h_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">h</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> will be negative, but we can still kill it with the final blow.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, x;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; x;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mx = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> d, h; <span class=\"comment\">// d, h </span></span><br><span class=\"line\">        cin &gt;&gt; d &gt;&gt; h;</span><br><span class=\"line\">        v.<span class=\"built_in\">pb</span>(d - h);</span><br><span class=\"line\">        mx = <span class=\"built_in\">max</span>(mx, d);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(v), <span class=\"built_in\">greater</span>&lt;<span class=\"type\">int</span>&gt;());</span><br><span class=\"line\">    <span class=\"type\">int</span> cnt = <span class=\"number\">1</span>;</span><br><span class=\"line\">    x -= mx;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(x &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"number\">1</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(v[<span class=\"number\">0</span>] &lt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"number\">-1</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; (x - <span class=\"number\">1</span>) / v[<span class=\"number\">0</span>] + <span class=\"number\">2</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1527b2-palindrome-game-hard-version\"><a href=\"https://codeforces.com/problemset/problem/1527/B2\">CF 1527B2. Palindrome Game (hard version)</a></h2>\n<p>WA Count: 9 (lmao)</p>\n<p>This problem cost me around half of my total time, and 90% of the WA.<br>\nI got an idea really quickly, but it turns out that it was entirely wrong, and I didn’t notice until much later.</p>\n<p>My thought was it is obvious that the current person would want to rush to making a palindrome as soon as possible, and the other person would just keep reversing, and after making a palindrome they just switch roles, the other person try to make it into a palindrome again, and the current person just reverses.</p>\n<p>This is my first submission:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n; string s;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"type\">int</span> alice = <span class=\"number\">0</span>, bob = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> altpair = <span class=\"number\">0</span>, zeropair = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (n / <span class=\"number\">2</span>); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] != s[n - i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            altpair += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; s[n - i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;0&#x27;</span>) &#123;</span><br><span class=\"line\">            zeropair += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//cerr &lt;&lt; &quot;ZERO: &quot; &lt;&lt; zeropair &lt;&lt; endl;</span></span><br><span class=\"line\">    bob += altpair;</span><br><span class=\"line\">    alice += (zeropair + <span class=\"number\">1</span>) / <span class=\"number\">2</span>;</span><br><span class=\"line\">    bob += (zeropair / <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(alice &gt; bob) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;BOB&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(alice &lt; bob) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;ALICE&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;DRAW&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>This goes wrong for a case like <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0000</mn></mrow><annotation encoding=\"application/x-tex\">0000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>, where in my code would cause a draw, but the optimal way would be like:<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0000</mn></mrow><annotation encoding=\"application/x-tex\">0000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span> -&gt; <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1000</mn></mrow><annotation encoding=\"application/x-tex\">1000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span> -&gt; <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1100</mn></mrow><annotation encoding=\"application/x-tex\">1100</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span> -&gt; <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1110</mn></mrow><annotation encoding=\"application/x-tex\">1110</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">0</span></span></span></span> -&gt; <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0111</mn></mrow><annotation encoding=\"application/x-tex\">0111</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">1</span></span></span></span> -&gt; <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1111</mn></mrow><annotation encoding=\"application/x-tex\">1111</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">1</span><span class=\"mord\">1</span></span></span></span> where Alice is guaranteed to lose.<br>\nThere is also problems like if the length is odd and the middle is 0, we can flip that and still makes it a palindrome.</p>\n<p>This is such a case/observation heavy problem, and really shows that I need to practice more.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n; string s;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; s;</span><br><span class=\"line\">    <span class=\"type\">int</span> alice = <span class=\"number\">0</span>, bob = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> altpair = <span class=\"number\">0</span>, zeropair = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (n / <span class=\"number\">2</span>); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s[i] != s[n - i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            altpair += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(s[i] == <span class=\"string\">&#x27;0&#x27;</span> &amp;&amp; s[n - i - <span class=\"number\">1</span>] == <span class=\"string\">&#x27;0&#x27;</span>) &#123;</span><br><span class=\"line\">            zeropair += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">bool</span> flg = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n % <span class=\"number\">2</span> == <span class=\"number\">1</span> &amp;&amp; s[n / <span class=\"number\">2</span>] == <span class=\"string\">&#x27;0&#x27;</span>) flg = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(altpair) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> zerocnt = flg + altpair + (zeropair * <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(zerocnt == <span class=\"number\">2</span> &amp;&amp; flg == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;DRAW&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ALICE&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> zerocnt = flg + (zeropair * <span class=\"number\">2</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(zerocnt % <span class=\"number\">2</span> == <span class=\"number\">1</span> &amp;&amp; zerocnt != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;ALICE&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;BOB&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1462e2-close-tuples-hard-version\"><a href=\"https://codeforces.com/problemset/problem/1462/E2\">CF 1462E2. Close Tuples (hard version)</a></h2>\n<p>WA Count: 0</p>\n<p>For some reason this problem is 1700, but this is the fastest one I did in this mashup, I solved it in like under 15 minutes. It’s just a very standard sliding window with combinatorics problem.<br>\nWe go through every number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> and just count the number of subsets with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> as the last number, we can maintain the possible candidates with sliding window. You also need to know how to do modular inverse but other than that it’s trivial.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// mod defined ver</span></span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">factorial</span><span class=\"params\">(<span class=\"number\">2e5</span> + <span class=\"number\">5</span>)</span></span>;</span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> mod = <span class=\"number\">1e9</span> + <span class=\"number\">7</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mabs</span><span class=\"params\">(<span class=\"type\">int</span> a)</span> </span>&#123; <span class=\"comment\">//轉成 0 &lt;= a &lt; mod的形式</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a % mod + mod) % mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mmul</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mabs</span>((a % mod) * (b % mod));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">madd</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123; <span class=\"comment\">// a + b</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mabs</span>(a % mod + b % mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mmin</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123; <span class=\"comment\">// a - b</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mabs</span>(a % mod - b % mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">fastpow</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> n)</span> </span>&#123; <span class=\"comment\">// calculate a^n % mod</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> half = <span class=\"built_in\">fastpow</span>(a, n &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">mmul</span>(<span class=\"built_in\">mmul</span>(half, half), a);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">mmul</span>(half, half);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mdiv</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123; <span class=\"comment\">// (a / b) % mod</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mmul</span>(a, <span class=\"built_in\">fastpow</span>(b, mod - <span class=\"number\">2</span>));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">C</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b &gt; a) <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mdiv</span>(factorial[a], <span class=\"built_in\">mmul</span>(factorial[b], factorial[a - b]));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m, k;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;i : v) cin &gt;&gt; i;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(v));</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"number\">0</span>, ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &lt; i &amp;&amp; v[i] - v[l] &gt; k) l++;</span><br><span class=\"line\">        ans = <span class=\"built_in\">madd</span>(ans, <span class=\"built_in\">C</span>((i - l), m - <span class=\"number\">1</span>));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"cf-1283c-friends-and-gifts\"><a href=\"https://codeforces.com/contest/1283/problem/C\">CF 1283C. Friends and Gifts</a></h2>\n<p>WA Count: 0</p>\n<p>Random Implement Problem, just make like three groups, need gifts, need to give gifts, and need both.<br>\nWe can give/get gifts between groups (or inside both). just simulate this process and thats pretty much it.</p>\n<p>There is definitely a better solution for this (In fact, the model solution uses graphs), but I’m lazy.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) cin &gt;&gt; v[i];</span><br><span class=\"line\">    <span class=\"function\">vector&lt;pii&gt; <span class=\"title\">status</span><span class=\"params\">(n + <span class=\"number\">1</span>, &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;)</span></span>; <span class=\"comment\">// gift, get</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v[i] != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            status[i].first = <span class=\"number\">1</span>;</span><br><span class=\"line\">            status[v[i]].second = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deque&lt;<span class=\"type\">int</span>&gt; needgift, needget, both;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(status[i].first == <span class=\"number\">0</span> &amp;&amp; status[i].second == <span class=\"number\">0</span>) both.<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(status[i].first == <span class=\"number\">1</span> &amp;&amp; status[i].second == <span class=\"number\">0</span>) needget.<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(status[i].first == <span class=\"number\">0</span> &amp;&amp; status[i].second == <span class=\"number\">1</span>) needgift.<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    deque&lt;<span class=\"type\">int</span>&gt; tmp;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(both.<span class=\"built_in\">size</span>() &gt;= <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> a = both.<span class=\"built_in\">front</span>(); both.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">        <span class=\"type\">int</span> b = both.<span class=\"built_in\">front</span>(); both.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">        v[a] = b;</span><br><span class=\"line\">        needgift.<span class=\"built_in\">pb</span>(b);</span><br><span class=\"line\">        needget.<span class=\"built_in\">pb</span>(a);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(both.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(needgift.<span class=\"built_in\">size</span>() &amp;&amp; both.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> a = needgift.<span class=\"built_in\">front</span>(); needgift.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">            <span class=\"type\">int</span> b = both.<span class=\"built_in\">front</span>(); both.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">            tmp.<span class=\"built_in\">pb</span>(b);</span><br><span class=\"line\">            v[a] = b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(tmp.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">            needgift.<span class=\"built_in\">pb</span>(tmp.<span class=\"built_in\">front</span>());</span><br><span class=\"line\">            tmp.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(needget.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(needgift.<span class=\"built_in\">size</span>() &amp;&amp; needget.<span class=\"built_in\">size</span>()) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> a = needgift.<span class=\"built_in\">front</span>(); needgift.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">            <span class=\"type\">int</span> b = needget.<span class=\"built_in\">front</span>(); needget.<span class=\"built_in\">pop_front</span>();</span><br><span class=\"line\">            v[a] = b;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        cout &lt;&lt; v[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1108e1-array-and-segments-easy-version\"><a href=\"https://codeforces.com/problemset/problem/1108/E1\">CF 1108E1. Array and Segments (Easy version)</a></h2>\n<p>WA Count: 0</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> is really small here, so we can just bruteforce it.</p>\n<p>We can fix each number, and apply all segments that doesn’t go through this fixed point, then just maintain the maximum answer and used segments.<br>\nI personally think the idea strikes resemblance with <a href=\"https://codeforces.com/contest/1882/problem/B\">CF 1882B. Sets and Union</a>.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; chosen;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; v[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;pii&gt; <span class=\"title\">segment</span><span class=\"params\">(m)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l, r;</span><br><span class=\"line\">        cin &gt;&gt; l &gt;&gt; r;</span><br><span class=\"line\">        l--; r--;</span><br><span class=\"line\">        segment[i].first = l;</span><br><span class=\"line\">        segment[i].second = r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = *<span class=\"built_in\">max_element</span>(<span class=\"built_in\">all</span>(v)) - *<span class=\"built_in\">min_element</span>(<span class=\"built_in\">all</span>(v));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; v2 = v;</span><br><span class=\"line\">        vector&lt;<span class=\"type\">int</span>&gt; tmpchosen;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; m; k++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> l = segment[k].first; <span class=\"type\">int</span> r = segment[k].second;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(l &lt;= i &amp;&amp; i &lt;= r) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = l; j &lt;= r; j++) v2[j]--;</span><br><span class=\"line\">            tmpchosen.<span class=\"built_in\">pb</span>(k + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(*<span class=\"built_in\">max_element</span>(<span class=\"built_in\">all</span>(v2)) - *<span class=\"built_in\">min_element</span>(<span class=\"built_in\">all</span>(v2)) &gt; ans) &#123;</span><br><span class=\"line\">            ans = *<span class=\"built_in\">max_element</span>(<span class=\"built_in\">all</span>(v2)) - *<span class=\"built_in\">min_element</span>(<span class=\"built_in\">all</span>(v2));</span><br><span class=\"line\">            chosen = tmpchosen;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; chosen.<span class=\"built_in\">size</span>() &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : chosen) cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2m)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"afterword\">Afterword</h2>\n<p>I think I can easily get under two hours, or even 1 hour 45 minutes, I was stuck on that 1 problem for too long! I think I will also document each problem’s individual time.</p>\n<h2 id=\"additional-cf-1108e2-array-and-segments-hard-version\"><a href=\"https://codeforces.com/problemset/problem/1108/E2\">(Additional) CF 1108E2. Array and Segments (Hard version)</a></h2>\n<p>Compared to the easy version, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> is much bigger this time, so we cannot apply all segments with bruteforce.<br>\nLuckily, segment tree exists, so we can just do the same thing, except we use a lazy tag segment tree to apply the segments.<br>\nYou happily coded the segment tree, thinking “such an easy 2100”, and you get TLE on TC 13. (Based on experience)<br>\nThe problem here is if we still enumerate through all the segments, even if our operations are <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(mlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>, the total complexity is still <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>m</mi><mo>+</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nm + mlog(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>, which doesn’t pass with the constraints.<br>\nFortunately, there is a beautiful observation here: Let’s say we have all the segments that doesn’t include the index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, we can easily know which segments that doesn’t include <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>. The way to do this is to add the segments that end at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, and remove the segments that start at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">i + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>. This way, each segment only gets added and removed once, and our complexity is reduced to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n + mlog(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// lazy seg template from kactl code book</span></span><br><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> inf = <span class=\"number\">1e9</span>;</span><br><span class=\"line\"><span class=\"keyword\">struct</span> <span class=\"title class_\">Node</span> &#123;</span><br><span class=\"line\">    Node *l = <span class=\"number\">0</span>, *r = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> lo, hi, madd = <span class=\"number\">0</span>, val = -inf, val2 = inf;</span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(<span class=\"type\">int</span> lo,<span class=\"type\">int</span> hi):<span class=\"built_in\">lo</span>(lo),<span class=\"built_in\">hi</span>(hi)&#123;&#125; <span class=\"comment\">// Large interval of -inf</span></span><br><span class=\"line\">    <span class=\"built_in\">Node</span>(vi&amp; v, <span class=\"type\">int</span> lo, <span class=\"type\">int</span> hi) : <span class=\"built_in\">lo</span>(lo), <span class=\"built_in\">hi</span>(hi) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (lo + <span class=\"number\">1</span> &lt; hi) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid = lo + (hi - lo)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            l = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(v, lo, mid); r = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(v, mid, hi);</span><br><span class=\"line\">            val = <span class=\"built_in\">max</span>(l-&gt;val, r-&gt;val);</span><br><span class=\"line\">            val2 = <span class=\"built_in\">min</span>(l-&gt;val2, r-&gt;val2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> val = val2 = v[lo];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> L, <span class=\"type\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (R &lt;= lo || hi &lt;= L) <span class=\"keyword\">return</span> -inf;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L &lt;= lo &amp;&amp; hi &lt;= R) <span class=\"keyword\">return</span> val;</span><br><span class=\"line\">        <span class=\"built_in\">push</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">max</span>(l-&gt;<span class=\"built_in\">query</span>(L, R), r-&gt;<span class=\"built_in\">query</span>(L, R));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query2</span><span class=\"params\">(<span class=\"type\">int</span> L, <span class=\"type\">int</span> R)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (R &lt;= lo || hi &lt;= L) <span class=\"keyword\">return</span> inf;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L &lt;= lo &amp;&amp; hi &lt;= R) <span class=\"keyword\">return</span> val2;</span><br><span class=\"line\">        <span class=\"built_in\">push</span>();</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"built_in\">min</span>(l-&gt;<span class=\"built_in\">query2</span>(L, R), r-&gt;<span class=\"built_in\">query2</span>(L, R));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"type\">int</span> L, <span class=\"type\">int</span> R, <span class=\"type\">int</span> x)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (R &lt;= lo || hi &lt;= L) <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (L &lt;= lo &amp;&amp; hi &lt;= R) &#123;</span><br><span class=\"line\">            madd += x;</span><br><span class=\"line\">            val += x;</span><br><span class=\"line\">            val2 += x;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">push</span>(), l-&gt;<span class=\"built_in\">add</span>(L, R, x), r-&gt;<span class=\"built_in\">add</span>(L, R, x);</span><br><span class=\"line\">            val = <span class=\"built_in\">max</span>(l-&gt;val, r-&gt;val);</span><br><span class=\"line\">            val2 = <span class=\"built_in\">min</span>(l-&gt;val2, r-&gt;val2);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">push</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!l) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> mid = lo + (hi - lo)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            l = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(lo, mid); r = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(mid, hi);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (madd)</span><br><span class=\"line\">            l-&gt;<span class=\"built_in\">add</span>(lo,hi,madd), r-&gt;<span class=\"built_in\">add</span>(lo,hi,madd), madd = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; addseg[(<span class=\"type\">int</span>)<span class=\"number\">2e5</span> + <span class=\"number\">5</span>];</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; removeseg[(<span class=\"type\">int</span>)<span class=\"number\">2e5</span> + <span class=\"number\">5</span>];</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">v</span><span class=\"params\">(n)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; v[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;pii&gt; <span class=\"title\">segment</span><span class=\"params\">(m)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; m; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; segment[i].first &gt;&gt; segment[i].second;</span><br><span class=\"line\">        segment[i].first--; segment[i].second--; <span class=\"comment\">// [l, r]</span></span><br><span class=\"line\">        addseg[segment[i].first].<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">        removeseg[segment[i].second].<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    Node* tr = <span class=\"keyword\">new</span> <span class=\"built_in\">Node</span>(v, <span class=\"number\">0</span>, v.<span class=\"built_in\">size</span>());</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = (tr -&gt; <span class=\"built_in\">query</span>(<span class=\"number\">0</span>, n)) - (tr -&gt; <span class=\"built_in\">query2</span>(<span class=\"number\">0</span>, n));</span><br><span class=\"line\">    <span class=\"type\">int</span> ansidx = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; m; k++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l = segment[k].first; <span class=\"type\">int</span> r = segment[k].second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l &lt;= <span class=\"number\">0</span> &amp;&amp; <span class=\"number\">0</span> &lt;= r) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        tr -&gt; <span class=\"built_in\">add</span>(l, r + <span class=\"number\">1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((tr -&gt; <span class=\"built_in\">query</span>(<span class=\"number\">0</span>, n)) - (tr -&gt; <span class=\"built_in\">query2</span>(<span class=\"number\">0</span>, n)) &gt; ans) &#123;</span><br><span class=\"line\">        ans = (tr -&gt; <span class=\"built_in\">query</span>(<span class=\"number\">0</span>, n)) - (tr -&gt; <span class=\"built_in\">query2</span>(<span class=\"number\">0</span>, n));</span><br><span class=\"line\">        ansidx = <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// remove segments with l = i;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> idx : addseg[i]) &#123;</span><br><span class=\"line\">            tr -&gt; <span class=\"built_in\">add</span>(segment[idx].first, segment[idx].second + <span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// add segments with r = i - 1;</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> idx : removeseg[i - <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            tr -&gt; <span class=\"built_in\">add</span>(segment[idx].first, segment[idx].second + <span class=\"number\">1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>((tr -&gt; <span class=\"built_in\">query</span>(<span class=\"number\">0</span>, n)) - (tr -&gt; <span class=\"built_in\">query2</span>(<span class=\"number\">0</span>, n)) &gt; ans) &#123;</span><br><span class=\"line\">            ans = (tr -&gt; <span class=\"built_in\">query</span>(<span class=\"number\">0</span>, n)) - (tr -&gt; <span class=\"built_in\">query2</span>(<span class=\"number\">0</span>, n));</span><br><span class=\"line\">            ansidx = i;</span><br><span class=\"line\">        &#125;   </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vi chosen;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> k = <span class=\"number\">0</span>; k &lt; m; k++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ansidx == <span class=\"number\">-1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> l = segment[k].first; <span class=\"type\">int</span> r = segment[k].second;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(l &lt;= ansidx &amp;&amp; ansidx &lt;= r) <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> chosen.<span class=\"built_in\">pb</span>(k + <span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    cout &lt;&lt; chosen.<span class=\"built_in\">size</span>() &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : chosen) cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo>+</mo><mi>m</mi><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n + mlog(n))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></p>\n"},{"title":"Music I enjoyed recently","date":"2023-10-13T04:19:04.000Z","_content":"I've discovered alot of great songs that I enjoyed, some I thought to share some here.\n\n### [月詠み『逆転劇』](https://youtu.be/I4hKvP2jS1g?si=cGR2crTBlCnPFp1V)\n\nThis one I replayed over and over these couple of days. It really makes feel feel powerful, and gives me the feel that I shouldn't give up. The lyrics are also awesome and really inspiring.\nApparently it's from an anime, might actually check it out because of this song (I watched steins gate because of the music, and it became one of my favorites)\n\n### [永遠の不在証明 / covered by 幸祜](https://youtu.be/PpoM9C-H0qA?si=hgn6g8nCsPkgNrQ-)\n\nThis song was from a detective conan movie that I actually went and watched. I think the original song was just \"okay\", but this cover really shocked me. The voice is so superb and so I also replayed over and over these days.\n\n### [ギターと孤独と蒼い惑星 (Bocchi the Rock!)](https://youtu.be/SDk1RA4g8CA?si=993kq-74g1XplJQJ)\n\n### [星座になれたら (Bocchi the Rock!)](https://youtu.be/rXRvs_FrwEk?si=el10Y5mwfps_KWcf)\n\nYes, I only watched Bocchi the Rock recently, Although I already listen to them regularly even when I haven't watched it before. Great anime go watch it (I plan to start watching anime again after this haha)!\n\n### [魔女と旋律の街 / 可不・きりたん - Fty](https://youtu.be/xjsYfqDcHnk?si=-Hj9aH5P0Dw3csw3)\n\nI love vocoloid, and the musics with KAFU are always really good for some reason XD.\n\n### [偏食 covered by CIEL](https://youtu.be/Hmcf01DLepk?si=fH65J54BvoA-mv4x)\n\nThe vocal really made this song feel. I don't know how many times I've replayed it.\n\n### [〈GODS〉](https://youtu.be/C3GouGa0noM?si=nWD6mt6u6rKfMyVw)\n\nOk hear me out: League world final musics are always fire. Although I don't play the game anymore, I still get hyped everytime I hear world final music, it's just so good.\n\n### [蓋棺クリサリス / Team Grimoire feat. Sennzai](https://youtu.be/QO15ke236OQ?si=QL-UIqo5vbHU9BHA)\n\nSennzai is someone I just found out recently. I really like her vocals, and combined with Team Grimoire is an automatic YES for me!\n\n### [Swelling / PSYQUI feat. Sennzai](https://youtu.be/Z5F2xJoS85M?si=-AILsGpqBjRNoWgr)\n\nAnother fire song from sennzai, combined with another favorite composer of mine, PSYQUI. Go listen to PSYQUI if you love EDM/Future Bass!\n\n### [VICTIM / Sennzai](https://youtu.be/w2RHt3LZqVY?si=62c7wyWjJQSGbsVP)\n\nYes, I love Sennzai.\n\n### [隨神之側 - feat.ミク&リン&GUMI](https://youtu.be/b2GJcYBoVyg?si=A4qyMkW0OiFqpKkl)\n\nAnother amazing vocoloid song with inspiring lyrics, really cheers me up too.\n\n### [天国と地獄 -言ノ葉リンネ- -れるりり feat 初音ミク&GUMI](https://youtu.be/bfHcIdHsfKU?si=4uoCH7B8Lo8kgboZ)\n\nAwesome song, enough said. I really like the chorus, choosing miku in this song was a right choice.\n\n### [無意識レクイエム (cosmobsp rmx)](https://youtu.be/hCgAiV-MYYw?si=68eZIGfBR_IxjLI6)\n\nDon't you just love touhou remixes with extreme horror lyrics and visuals? I do :D\n\n### [Kotone 「Autonomy」](https://youtu.be/S3gDMAfDfgQ?si=Z_xNjmoW9B8TbDdo)\n\nKotone's covers are always pretty nice, but wow I never knew her original musics can be so good!\n\n### [名前のない怪物 Covered by 花鋏キョウ](https://youtu.be/UYPJGCQU_v0?si=seLD03CA6QgUBAfm)\n\nReally like the chorus, was the earliest song that I set on repeat along with Swelling and 偏食.\n\n### [感傷幽霊 feat.沖石](https://youtu.be/9PuudPiyma4?si=1dX0CV9ekLwPzlfY)\n\nThis was recommended by a good friend of mine in Taiwan, awesome stuff, really enjoyed it.\n\n### [抜錨 / ナナホシ管弦楽団 -Cover- ウォルピスカーター](https://youtu.be/k1d3E1zeVzI?si=U71oWqkFCSglvQf3)\n\nI really like ウォルピスカーター, did you know that he is a male singer? insane high notes, perfection.\n\n### [泥中に咲 / ウォルピスカーター](https://youtu.be/40dJS_LC6S8?si=vZ7unVYl_twsijm5)\n\nAnother one that I really, really like can listen to frequently.\n\nOk, I noticed that I wrote too much, and I still have a ton that I want to introduce. Maybe next time, I guess?","source":"_posts/Music-I-enjoyed-recently.md","raw":"---\ntitle: Music I enjoyed recently\ndate: 2023-10-12 23:19:04\ntags: [\"Life\"]\n---\nI've discovered alot of great songs that I enjoyed, some I thought to share some here.\n\n### [月詠み『逆転劇』](https://youtu.be/I4hKvP2jS1g?si=cGR2crTBlCnPFp1V)\n\nThis one I replayed over and over these couple of days. It really makes feel feel powerful, and gives me the feel that I shouldn't give up. The lyrics are also awesome and really inspiring.\nApparently it's from an anime, might actually check it out because of this song (I watched steins gate because of the music, and it became one of my favorites)\n\n### [永遠の不在証明 / covered by 幸祜](https://youtu.be/PpoM9C-H0qA?si=hgn6g8nCsPkgNrQ-)\n\nThis song was from a detective conan movie that I actually went and watched. I think the original song was just \"okay\", but this cover really shocked me. The voice is so superb and so I also replayed over and over these days.\n\n### [ギターと孤独と蒼い惑星 (Bocchi the Rock!)](https://youtu.be/SDk1RA4g8CA?si=993kq-74g1XplJQJ)\n\n### [星座になれたら (Bocchi the Rock!)](https://youtu.be/rXRvs_FrwEk?si=el10Y5mwfps_KWcf)\n\nYes, I only watched Bocchi the Rock recently, Although I already listen to them regularly even when I haven't watched it before. Great anime go watch it (I plan to start watching anime again after this haha)!\n\n### [魔女と旋律の街 / 可不・きりたん - Fty](https://youtu.be/xjsYfqDcHnk?si=-Hj9aH5P0Dw3csw3)\n\nI love vocoloid, and the musics with KAFU are always really good for some reason XD.\n\n### [偏食 covered by CIEL](https://youtu.be/Hmcf01DLepk?si=fH65J54BvoA-mv4x)\n\nThe vocal really made this song feel. I don't know how many times I've replayed it.\n\n### [〈GODS〉](https://youtu.be/C3GouGa0noM?si=nWD6mt6u6rKfMyVw)\n\nOk hear me out: League world final musics are always fire. Although I don't play the game anymore, I still get hyped everytime I hear world final music, it's just so good.\n\n### [蓋棺クリサリス / Team Grimoire feat. Sennzai](https://youtu.be/QO15ke236OQ?si=QL-UIqo5vbHU9BHA)\n\nSennzai is someone I just found out recently. I really like her vocals, and combined with Team Grimoire is an automatic YES for me!\n\n### [Swelling / PSYQUI feat. Sennzai](https://youtu.be/Z5F2xJoS85M?si=-AILsGpqBjRNoWgr)\n\nAnother fire song from sennzai, combined with another favorite composer of mine, PSYQUI. Go listen to PSYQUI if you love EDM/Future Bass!\n\n### [VICTIM / Sennzai](https://youtu.be/w2RHt3LZqVY?si=62c7wyWjJQSGbsVP)\n\nYes, I love Sennzai.\n\n### [隨神之側 - feat.ミク&リン&GUMI](https://youtu.be/b2GJcYBoVyg?si=A4qyMkW0OiFqpKkl)\n\nAnother amazing vocoloid song with inspiring lyrics, really cheers me up too.\n\n### [天国と地獄 -言ノ葉リンネ- -れるりり feat 初音ミク&GUMI](https://youtu.be/bfHcIdHsfKU?si=4uoCH7B8Lo8kgboZ)\n\nAwesome song, enough said. I really like the chorus, choosing miku in this song was a right choice.\n\n### [無意識レクイエム (cosmobsp rmx)](https://youtu.be/hCgAiV-MYYw?si=68eZIGfBR_IxjLI6)\n\nDon't you just love touhou remixes with extreme horror lyrics and visuals? I do :D\n\n### [Kotone 「Autonomy」](https://youtu.be/S3gDMAfDfgQ?si=Z_xNjmoW9B8TbDdo)\n\nKotone's covers are always pretty nice, but wow I never knew her original musics can be so good!\n\n### [名前のない怪物 Covered by 花鋏キョウ](https://youtu.be/UYPJGCQU_v0?si=seLD03CA6QgUBAfm)\n\nReally like the chorus, was the earliest song that I set on repeat along with Swelling and 偏食.\n\n### [感傷幽霊 feat.沖石](https://youtu.be/9PuudPiyma4?si=1dX0CV9ekLwPzlfY)\n\nThis was recommended by a good friend of mine in Taiwan, awesome stuff, really enjoyed it.\n\n### [抜錨 / ナナホシ管弦楽団 -Cover- ウォルピスカーター](https://youtu.be/k1d3E1zeVzI?si=U71oWqkFCSglvQf3)\n\nI really like ウォルピスカーター, did you know that he is a male singer? insane high notes, perfection.\n\n### [泥中に咲 / ウォルピスカーター](https://youtu.be/40dJS_LC6S8?si=vZ7unVYl_twsijm5)\n\nAnother one that I really, really like can listen to frequently.\n\nOk, I noticed that I wrote too much, and I still have a ton that I want to introduce. Maybe next time, I guess?","slug":"Music-I-enjoyed-recently","published":1,"updated":"2024-12-26T01:29:58.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblh2000rb0u9c2ox94g0","content":"<p>I’ve discovered alot of great songs that I enjoyed, some I thought to share some here.</p>\n<h3 id=\"月詠み-逆転劇\"><a href=\"https://youtu.be/I4hKvP2jS1g?si=cGR2crTBlCnPFp1V\">月詠み『逆転劇』</a></h3>\n<p>This one I replayed over and over these couple of days. It really makes feel feel powerful, and gives me the feel that I shouldn’t give up. The lyrics are also awesome and really inspiring.<br>\nApparently it’s from an anime, might actually check it out because of this song (I watched steins gate because of the music, and it became one of my favorites)</p>\n<h3 id=\"永遠の不在証明-covered-by-幸祜\"><a href=\"https://youtu.be/PpoM9C-H0qA?si=hgn6g8nCsPkgNrQ-\">永遠の不在証明 / covered by 幸祜</a></h3>\n<p>This song was from a detective conan movie that I actually went and watched. I think the original song was just “okay”, but this cover really shocked me. The voice is so superb and so I also replayed over and over these days.</p>\n<h3 id=\"ギターと孤独と蒼い惑星-bocchi-the-rock\"><a href=\"https://youtu.be/SDk1RA4g8CA?si=993kq-74g1XplJQJ\">ギターと孤独と蒼い惑星 (Bocchi the Rock!)</a></h3>\n<h3 id=\"星座になれたら-bocchi-the-rock\"><a href=\"https://youtu.be/rXRvs_FrwEk?si=el10Y5mwfps_KWcf\">星座になれたら (Bocchi the Rock!)</a></h3>\n<p>Yes, I only watched Bocchi the Rock recently, Although I already listen to them regularly even when I haven’t watched it before. Great anime go watch it (I plan to start watching anime again after this haha)!</p>\n<h3 id=\"魔女と旋律の街-可不-きりたん-fty\"><a href=\"https://youtu.be/xjsYfqDcHnk?si=-Hj9aH5P0Dw3csw3\">魔女と旋律の街 / 可不・きりたん - Fty</a></h3>\n<p>I love vocoloid, and the musics with KAFU are always really good for some reason XD.</p>\n<h3 id=\"偏食-covered-by-ciel\"><a href=\"https://youtu.be/Hmcf01DLepk?si=fH65J54BvoA-mv4x\">偏食 covered by CIEL</a></h3>\n<p>The vocal really made this song feel. I don’t know how many times I’ve replayed it.</p>\n<h3 id=\"gods\"><a href=\"https://youtu.be/C3GouGa0noM?si=nWD6mt6u6rKfMyVw\">〈GODS〉</a></h3>\n<p>Ok hear me out: League world final musics are always fire. Although I don’t play the game anymore, I still get hyped everytime I hear world final music, it’s just so good.</p>\n<h3 id=\"蓋棺クリサリス-team-grimoire-feat-sennzai\"><a href=\"https://youtu.be/QO15ke236OQ?si=QL-UIqo5vbHU9BHA\">蓋棺クリサリス / Team Grimoire feat. Sennzai</a></h3>\n<p>Sennzai is someone I just found out recently. I really like her vocals, and combined with Team Grimoire is an automatic YES for me!</p>\n<h3 id=\"swelling-psyqui-feat-sennzai\"><a href=\"https://youtu.be/Z5F2xJoS85M?si=-AILsGpqBjRNoWgr\">Swelling / PSYQUI feat. Sennzai</a></h3>\n<p>Another fire song from sennzai, combined with another favorite composer of mine, PSYQUI. Go listen to PSYQUI if you love EDM/Future Bass!</p>\n<h3 id=\"victim-sennzai\"><a href=\"https://youtu.be/w2RHt3LZqVY?si=62c7wyWjJQSGbsVP\">VICTIM / Sennzai</a></h3>\n<p>Yes, I love Sennzai.</p>\n<h3 id=\"隨神之側-feat-ミク-リン-gumi\"><a href=\"https://youtu.be/b2GJcYBoVyg?si=A4qyMkW0OiFqpKkl\">隨神之側 - feat.ミク&amp;リン&amp;GUMI</a></h3>\n<p>Another amazing vocoloid song with inspiring lyrics, really cheers me up too.</p>\n<h3 id=\"天国と地獄-言ノ葉リンネ-れるりり-feat-初音ミク-gumi\"><a href=\"https://youtu.be/bfHcIdHsfKU?si=4uoCH7B8Lo8kgboZ\">天国と地獄 -言ノ葉リンネ- -れるりり feat 初音ミク&amp;GUMI</a></h3>\n<p>Awesome song, enough said. I really like the chorus, choosing miku in this song was a right choice.</p>\n<h3 id=\"無意識レクイエム-cosmobsp-rmx\"><a href=\"https://youtu.be/hCgAiV-MYYw?si=68eZIGfBR_IxjLI6\">無意識レクイエム (cosmobsp rmx)</a></h3>\n<p>Don’t you just love touhou remixes with extreme horror lyrics and visuals? I do :D</p>\n<h3 id=\"kotone-autonomy\"><a href=\"https://youtu.be/S3gDMAfDfgQ?si=Z_xNjmoW9B8TbDdo\">Kotone 「Autonomy」</a></h3>\n<p>Kotone’s covers are always pretty nice, but wow I never knew her original musics can be so good!</p>\n<h3 id=\"名前のない怪物-covered-by-花鋏キョウ\"><a href=\"https://youtu.be/UYPJGCQU_v0?si=seLD03CA6QgUBAfm\">名前のない怪物 Covered by 花鋏キョウ</a></h3>\n<p>Really like the chorus, was the earliest song that I set on repeat along with Swelling and 偏食.</p>\n<h3 id=\"感傷幽霊-feat-沖石\"><a href=\"https://youtu.be/9PuudPiyma4?si=1dX0CV9ekLwPzlfY\">感傷幽霊 feat.沖石</a></h3>\n<p>This was recommended by a good friend of mine in Taiwan, awesome stuff, really enjoyed it.</p>\n<h3 id=\"抜錨-ナナホシ管弦楽団-cover-ウォルピスカーター\"><a href=\"https://youtu.be/k1d3E1zeVzI?si=U71oWqkFCSglvQf3\">抜錨 / ナナホシ管弦楽団 -Cover- ウォルピスカーター</a></h3>\n<p>I really like ウォルピスカーター, did you know that he is a male singer? insane high notes, perfection.</p>\n<h3 id=\"泥中に咲-ウォルピスカーター\"><a href=\"https://youtu.be/40dJS_LC6S8?si=vZ7unVYl_twsijm5\">泥中に咲 / ウォルピスカーター</a></h3>\n<p>Another one that I really, really like can listen to frequently.</p>\n<p>Ok, I noticed that I wrote too much, and I still have a ton that I want to introduce. Maybe next time, I guess?</p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>I’ve discovered alot of great songs that I enjoyed, some I thought to share some here.</p>\n<h3 id=\"月詠み-逆転劇\"><a href=\"https://youtu.be/I4hKvP2jS1g?si=cGR2crTBlCnPFp1V\">月詠み『逆転劇』</a></h3>\n<p>This one I replayed over and over these couple of days. It really makes feel feel powerful, and gives me the feel that I shouldn’t give up. The lyrics are also awesome and really inspiring.<br>\nApparently it’s from an anime, might actually check it out because of this song (I watched steins gate because of the music, and it became one of my favorites)</p>\n<h3 id=\"永遠の不在証明-covered-by-幸祜\"><a href=\"https://youtu.be/PpoM9C-H0qA?si=hgn6g8nCsPkgNrQ-\">永遠の不在証明 / covered by 幸祜</a></h3>\n<p>This song was from a detective conan movie that I actually went and watched. I think the original song was just “okay”, but this cover really shocked me. The voice is so superb and so I also replayed over and over these days.</p>\n<h3 id=\"ギターと孤独と蒼い惑星-bocchi-the-rock\"><a href=\"https://youtu.be/SDk1RA4g8CA?si=993kq-74g1XplJQJ\">ギターと孤独と蒼い惑星 (Bocchi the Rock!)</a></h3>\n<h3 id=\"星座になれたら-bocchi-the-rock\"><a href=\"https://youtu.be/rXRvs_FrwEk?si=el10Y5mwfps_KWcf\">星座になれたら (Bocchi the Rock!)</a></h3>\n<p>Yes, I only watched Bocchi the Rock recently, Although I already listen to them regularly even when I haven’t watched it before. Great anime go watch it (I plan to start watching anime again after this haha)!</p>\n<h3 id=\"魔女と旋律の街-可不-きりたん-fty\"><a href=\"https://youtu.be/xjsYfqDcHnk?si=-Hj9aH5P0Dw3csw3\">魔女と旋律の街 / 可不・きりたん - Fty</a></h3>\n<p>I love vocoloid, and the musics with KAFU are always really good for some reason XD.</p>\n<h3 id=\"偏食-covered-by-ciel\"><a href=\"https://youtu.be/Hmcf01DLepk?si=fH65J54BvoA-mv4x\">偏食 covered by CIEL</a></h3>\n<p>The vocal really made this song feel. I don’t know how many times I’ve replayed it.</p>\n<h3 id=\"gods\"><a href=\"https://youtu.be/C3GouGa0noM?si=nWD6mt6u6rKfMyVw\">〈GODS〉</a></h3>\n<p>Ok hear me out: League world final musics are always fire. Although I don’t play the game anymore, I still get hyped everytime I hear world final music, it’s just so good.</p>\n<h3 id=\"蓋棺クリサリス-team-grimoire-feat-sennzai\"><a href=\"https://youtu.be/QO15ke236OQ?si=QL-UIqo5vbHU9BHA\">蓋棺クリサリス / Team Grimoire feat. Sennzai</a></h3>\n<p>Sennzai is someone I just found out recently. I really like her vocals, and combined with Team Grimoire is an automatic YES for me!</p>\n<h3 id=\"swelling-psyqui-feat-sennzai\"><a href=\"https://youtu.be/Z5F2xJoS85M?si=-AILsGpqBjRNoWgr\">Swelling / PSYQUI feat. Sennzai</a></h3>\n<p>Another fire song from sennzai, combined with another favorite composer of mine, PSYQUI. Go listen to PSYQUI if you love EDM/Future Bass!</p>\n<h3 id=\"victim-sennzai\"><a href=\"https://youtu.be/w2RHt3LZqVY?si=62c7wyWjJQSGbsVP\">VICTIM / Sennzai</a></h3>\n<p>Yes, I love Sennzai.</p>\n<h3 id=\"隨神之側-feat-ミク-リン-gumi\"><a href=\"https://youtu.be/b2GJcYBoVyg?si=A4qyMkW0OiFqpKkl\">隨神之側 - feat.ミク&amp;リン&amp;GUMI</a></h3>\n<p>Another amazing vocoloid song with inspiring lyrics, really cheers me up too.</p>\n<h3 id=\"天国と地獄-言ノ葉リンネ-れるりり-feat-初音ミク-gumi\"><a href=\"https://youtu.be/bfHcIdHsfKU?si=4uoCH7B8Lo8kgboZ\">天国と地獄 -言ノ葉リンネ- -れるりり feat 初音ミク&amp;GUMI</a></h3>\n<p>Awesome song, enough said. I really like the chorus, choosing miku in this song was a right choice.</p>\n<h3 id=\"無意識レクイエム-cosmobsp-rmx\"><a href=\"https://youtu.be/hCgAiV-MYYw?si=68eZIGfBR_IxjLI6\">無意識レクイエム (cosmobsp rmx)</a></h3>\n<p>Don’t you just love touhou remixes with extreme horror lyrics and visuals? I do :D</p>\n<h3 id=\"kotone-autonomy\"><a href=\"https://youtu.be/S3gDMAfDfgQ?si=Z_xNjmoW9B8TbDdo\">Kotone 「Autonomy」</a></h3>\n<p>Kotone’s covers are always pretty nice, but wow I never knew her original musics can be so good!</p>\n<h3 id=\"名前のない怪物-covered-by-花鋏キョウ\"><a href=\"https://youtu.be/UYPJGCQU_v0?si=seLD03CA6QgUBAfm\">名前のない怪物 Covered by 花鋏キョウ</a></h3>\n<p>Really like the chorus, was the earliest song that I set on repeat along with Swelling and 偏食.</p>\n<h3 id=\"感傷幽霊-feat-沖石\"><a href=\"https://youtu.be/9PuudPiyma4?si=1dX0CV9ekLwPzlfY\">感傷幽霊 feat.沖石</a></h3>\n<p>This was recommended by a good friend of mine in Taiwan, awesome stuff, really enjoyed it.</p>\n<h3 id=\"抜錨-ナナホシ管弦楽団-cover-ウォルピスカーター\"><a href=\"https://youtu.be/k1d3E1zeVzI?si=U71oWqkFCSglvQf3\">抜錨 / ナナホシ管弦楽団 -Cover- ウォルピスカーター</a></h3>\n<p>I really like ウォルピスカーター, did you know that he is a male singer? insane high notes, perfection.</p>\n<h3 id=\"泥中に咲-ウォルピスカーター\"><a href=\"https://youtu.be/40dJS_LC6S8?si=vZ7unVYl_twsijm5\">泥中に咲 / ウォルピスカーター</a></h3>\n<p>Another one that I really, really like can listen to frequently.</p>\n<p>Ok, I noticed that I wrote too much, and I still have a ton that I want to introduce. Maybe next time, I guess?</p>\n"},{"title":"New Goal: Read Papers","date":"2024-02-21T06:02:37.000Z","_content":"This is honestly something I've been wanting to do in a while now. I feel like one of my biggest weaknesses is the lack of knowledge in SOTA methods. In a field where there are ground breaking researches being produced everyday, I need to be equipped with the newest knowledge at every moment.\n\nI will probabily make like a summary each week of the papers I've read (likely 2 ~ 3 papers), and I think I will start from classical computer vision papers (YOLO, ResNet) and extremely influential papers (Transformers, GPT), then I will maybe start going into fields and papers that im interested in (Maybe like domain transfer, adversarial attacks...).\n\nI'll roughly choose the papers in this [repo](https://github.com/aimerou/awesome-ai-papers), or even this [repo](https://github.com/dair-ai/ML-Papers-of-the-Week) for more recent ones.\n\nWe'll see how stuff goes and change accordingly, I really hope I can learn alot more after this weekly goal!\n","source":"_posts/New-Goal-Read-Papers.md","raw":"---\ntitle: 'New Goal: Read Papers'\ndate: 2024-02-21 00:02:37\ntags: [\"AI\"]\n---\nThis is honestly something I've been wanting to do in a while now. I feel like one of my biggest weaknesses is the lack of knowledge in SOTA methods. In a field where there are ground breaking researches being produced everyday, I need to be equipped with the newest knowledge at every moment.\n\nI will probabily make like a summary each week of the papers I've read (likely 2 ~ 3 papers), and I think I will start from classical computer vision papers (YOLO, ResNet) and extremely influential papers (Transformers, GPT), then I will maybe start going into fields and papers that im interested in (Maybe like domain transfer, adversarial attacks...).\n\nI'll roughly choose the papers in this [repo](https://github.com/aimerou/awesome-ai-papers), or even this [repo](https://github.com/dair-ai/ML-Papers-of-the-Week) for more recent ones.\n\nWe'll see how stuff goes and change accordingly, I really hope I can learn alot more after this weekly goal!\n","slug":"New-Goal-Read-Papers","published":1,"updated":"2024-12-26T01:29:58.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblh2000tb0u951yt0r2y","content":"<p>This is honestly something I’ve been wanting to do in a while now. I feel like one of my biggest weaknesses is the lack of knowledge in SOTA methods. In a field where there are ground breaking researches being produced everyday, I need to be equipped with the newest knowledge at every moment.</p>\n<p>I will probabily make like a summary each week of the papers I’ve read (likely 2 ~ 3 papers), and I think I will start from classical computer vision papers (YOLO, ResNet) and extremely influential papers (Transformers, GPT), then I will maybe start going into fields and papers that im interested in (Maybe like domain transfer, adversarial attacks…).</p>\n<p>I’ll roughly choose the papers in this <a href=\"https://github.com/aimerou/awesome-ai-papers\">repo</a>, or even this <a href=\"https://github.com/dair-ai/ML-Papers-of-the-Week\">repo</a> for more recent ones.</p>\n<p>We’ll see how stuff goes and change accordingly, I really hope I can learn alot more after this weekly goal!</p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>This is honestly something I’ve been wanting to do in a while now. I feel like one of my biggest weaknesses is the lack of knowledge in SOTA methods. In a field where there are ground breaking researches being produced everyday, I need to be equipped with the newest knowledge at every moment.</p>\n<p>I will probabily make like a summary each week of the papers I’ve read (likely 2 ~ 3 papers), and I think I will start from classical computer vision papers (YOLO, ResNet) and extremely influential papers (Transformers, GPT), then I will maybe start going into fields and papers that im interested in (Maybe like domain transfer, adversarial attacks…).</p>\n<p>I’ll roughly choose the papers in this <a href=\"https://github.com/aimerou/awesome-ai-papers\">repo</a>, or even this <a href=\"https://github.com/dair-ai/ML-Papers-of-the-Week\">repo</a> for more recent ones.</p>\n<p>We’ll see how stuff goes and change accordingly, I really hope I can learn alot more after this weekly goal!</p>\n"},{"title":"NAQ 2023","date":"2023-10-01T06:25:21.000Z","_content":"Today, we did the ICPC North America Qualifier contest. It served as a in-school contest I would say.\nWe only have two members for this contest, my other teammate was at GHC so she couldn't do the contest.\nIt was quite a stressful contest, especially we only have 2 people, but we still AK'd the contest and got 3rd place.\n\n![scoreboard](scoreboard.png)\n\nWe could've gotten 2nd place honestly, but FlamingLions solved the last problem right before the contest ended, and our penalty was too high so we got 3rd.\n\nAs soon as the contest started, my teammate chose to tackle pK, a graph problem (which is also the hardest problem in the contest), while I started to categorize problems while solving easy ones in the meantime.\nI solved A, F, L, G, H fairly quickly, and my teammate solved pK, getting the first kill on it.\n\nNow we started to get a little bit stuck, as we didn't know which problem should be approached first.\nI went to do I, and got WA 2 times after implementing for a long time (I missed an edge case :/), then I went to try out C, which is a pretty intuitive binary search problem, but also got weird WAs, which really made me triggered.\n\nLuckily, my teammate was hard carrying, and he not only solved C and I after me explaining my ideas to him (apparently my ideas were all correct, but there was small implementation details that I may oversighted not sure), but also solved B and D.\n\nNow we only had E and J left, and I think around here the 1st place AK'd the contest (they solved everything really quickly, but it took them nearly two hours to solve pK where my teammate solved around the first hour)\nWe initially thought E was a flow problem, but it was actually just a joke problem and we solved it quickly.\nIn the meantime, I noticed that J has an interesting constraint: $|P| = |S|$ , which means that I can just compute the prefix and suffix, save it in a map and do queries with that!\n\nWell ofc, the problem wasn't that easy, so I got MLE. We then came up with double hashing the pre/suffix, but we keep geting WA. Suddenly, my third teammate asked me whats the situation now, I explained that we are on the last problem but keep getting WA. She checked it out and suggested we do double hashing with mod to prevent collision, and suprisingly, it worked!\n\nI think there is definitely a good chance we can get first place if the third teammate was here. I was basically useless apart from giving some intuitions after the 3rd hour, because i'm just not strong enough to do the problems quickly and error-free.\n\nI think there definitely is a chance for us to qualify NAC if we get lucky and try hard enough...\nGood luck to future me and grind more to become stronger!\n","source":"_posts/NAQ-2023.md","raw":"---\ntitle: NAQ 2023\ndate: 2023-10-01 01:25:21\ntags: \"CP\"\n---\nToday, we did the ICPC North America Qualifier contest. It served as a in-school contest I would say.\nWe only have two members for this contest, my other teammate was at GHC so she couldn't do the contest.\nIt was quite a stressful contest, especially we only have 2 people, but we still AK'd the contest and got 3rd place.\n\n![scoreboard](scoreboard.png)\n\nWe could've gotten 2nd place honestly, but FlamingLions solved the last problem right before the contest ended, and our penalty was too high so we got 3rd.\n\nAs soon as the contest started, my teammate chose to tackle pK, a graph problem (which is also the hardest problem in the contest), while I started to categorize problems while solving easy ones in the meantime.\nI solved A, F, L, G, H fairly quickly, and my teammate solved pK, getting the first kill on it.\n\nNow we started to get a little bit stuck, as we didn't know which problem should be approached first.\nI went to do I, and got WA 2 times after implementing for a long time (I missed an edge case :/), then I went to try out C, which is a pretty intuitive binary search problem, but also got weird WAs, which really made me triggered.\n\nLuckily, my teammate was hard carrying, and he not only solved C and I after me explaining my ideas to him (apparently my ideas were all correct, but there was small implementation details that I may oversighted not sure), but also solved B and D.\n\nNow we only had E and J left, and I think around here the 1st place AK'd the contest (they solved everything really quickly, but it took them nearly two hours to solve pK where my teammate solved around the first hour)\nWe initially thought E was a flow problem, but it was actually just a joke problem and we solved it quickly.\nIn the meantime, I noticed that J has an interesting constraint: $|P| = |S|$ , which means that I can just compute the prefix and suffix, save it in a map and do queries with that!\n\nWell ofc, the problem wasn't that easy, so I got MLE. We then came up with double hashing the pre/suffix, but we keep geting WA. Suddenly, my third teammate asked me whats the situation now, I explained that we are on the last problem but keep getting WA. She checked it out and suggested we do double hashing with mod to prevent collision, and suprisingly, it worked!\n\nI think there is definitely a good chance we can get first place if the third teammate was here. I was basically useless apart from giving some intuitions after the 3rd hour, because i'm just not strong enough to do the problems quickly and error-free.\n\nI think there definitely is a chance for us to qualify NAC if we get lucky and try hard enough...\nGood luck to future me and grind more to become stronger!\n","slug":"NAQ-2023","published":1,"updated":"2024-12-26T01:29:58.478Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblh3000wb0u97l7z5pxf","content":"<p>Today, we did the ICPC North America Qualifier contest. It served as a in-school contest I would say.<br>\nWe only have two members for this contest, my other teammate was at GHC so she couldn’t do the contest.<br>\nIt was quite a stressful contest, especially we only have 2 people, but we still AK’d the contest and got 3rd place.</p>\n<p><img src=\"scoreboard.png\" alt=\"scoreboard\"></p>\n<p>We could’ve gotten 2nd place honestly, but FlamingLions solved the last problem right before the contest ended, and our penalty was too high so we got 3rd.</p>\n<p>As soon as the contest started, my teammate chose to tackle pK, a graph problem (which is also the hardest problem in the contest), while I started to categorize problems while solving easy ones in the meantime.<br>\nI solved A, F, L, G, H fairly quickly, and my teammate solved pK, getting the first kill on it.</p>\n<p>Now we started to get a little bit stuck, as we didn’t know which problem should be approached first.<br>\nI went to do I, and got WA 2 times after implementing for a long time (I missed an edge case :/), then I went to try out C, which is a pretty intuitive binary search problem, but also got weird WAs, which really made me triggered.</p>\n<p>Luckily, my teammate was hard carrying, and he not only solved C and I after me explaining my ideas to him (apparently my ideas were all correct, but there was small implementation details that I may oversighted not sure), but also solved B and D.</p>\n<p>Now we only had E and J left, and I think around here the 1st place AK’d the contest (they solved everything really quickly, but it took them nearly two hours to solve pK where my teammate solved around the first hour)<br>\nWe initially thought E was a flow problem, but it was actually just a joke problem and we solved it quickly.<br>\nIn the meantime, I noticed that J has an interesting constraint: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>P</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi>S</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">|P| = |S|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">∣</span></span></span></span> , which means that I can just compute the prefix and suffix, save it in a map and do queries with that!</p>\n<p>Well ofc, the problem wasn’t that easy, so I got MLE. We then came up with double hashing the pre/suffix, but we keep geting WA. Suddenly, my third teammate asked me whats the situation now, I explained that we are on the last problem but keep getting WA. She checked it out and suggested we do double hashing with mod to prevent collision, and suprisingly, it worked!</p>\n<p>I think there is definitely a good chance we can get first place if the third teammate was here. I was basically useless apart from giving some intuitions after the 3rd hour, because i’m just not strong enough to do the problems quickly and error-free.</p>\n<p>I think there definitely is a chance for us to qualify NAC if we get lucky and try hard enough…<br>\nGood luck to future me and grind more to become stronger!</p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>Today, we did the ICPC North America Qualifier contest. It served as a in-school contest I would say.<br>\nWe only have two members for this contest, my other teammate was at GHC so she couldn’t do the contest.<br>\nIt was quite a stressful contest, especially we only have 2 people, but we still AK’d the contest and got 3rd place.</p>\n<p><img src=\"scoreboard.png\" alt=\"scoreboard\"></p>\n<p>We could’ve gotten 2nd place honestly, but FlamingLions solved the last problem right before the contest ended, and our penalty was too high so we got 3rd.</p>\n<p>As soon as the contest started, my teammate chose to tackle pK, a graph problem (which is also the hardest problem in the contest), while I started to categorize problems while solving easy ones in the meantime.<br>\nI solved A, F, L, G, H fairly quickly, and my teammate solved pK, getting the first kill on it.</p>\n<p>Now we started to get a little bit stuck, as we didn’t know which problem should be approached first.<br>\nI went to do I, and got WA 2 times after implementing for a long time (I missed an edge case :/), then I went to try out C, which is a pretty intuitive binary search problem, but also got weird WAs, which really made me triggered.</p>\n<p>Luckily, my teammate was hard carrying, and he not only solved C and I after me explaining my ideas to him (apparently my ideas were all correct, but there was small implementation details that I may oversighted not sure), but also solved B and D.</p>\n<p>Now we only had E and J left, and I think around here the 1st place AK’d the contest (they solved everything really quickly, but it took them nearly two hours to solve pK where my teammate solved around the first hour)<br>\nWe initially thought E was a flow problem, but it was actually just a joke problem and we solved it quickly.<br>\nIn the meantime, I noticed that J has an interesting constraint: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">∣</mi><mi>P</mi><mi mathvariant=\"normal\">∣</mi><mo>=</mo><mi mathvariant=\"normal\">∣</mi><mi>S</mi><mi mathvariant=\"normal\">∣</mi></mrow><annotation encoding=\"application/x-tex\">|P| = |S|</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">P</span><span class=\"mord\">∣</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">∣</span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\">∣</span></span></span></span> , which means that I can just compute the prefix and suffix, save it in a map and do queries with that!</p>\n<p>Well ofc, the problem wasn’t that easy, so I got MLE. We then came up with double hashing the pre/suffix, but we keep geting WA. Suddenly, my third teammate asked me whats the situation now, I explained that we are on the last problem but keep getting WA. She checked it out and suggested we do double hashing with mod to prevent collision, and suprisingly, it worked!</p>\n<p>I think there is definitely a good chance we can get first place if the third teammate was here. I was basically useless apart from giving some intuitions after the 3rd hour, because i’m just not strong enough to do the problems quickly and error-free.</p>\n<p>I think there definitely is a chance for us to qualify NAC if we get lucky and try hard enough…<br>\nGood luck to future me and grind more to become stronger!</p>\n"},{"title":"Open source contribution && cool problems","date":"2023-08-10T05:30:11.000Z","_content":"My PR was finally merged!\n\n![merged](merge.png)\n\nThis is my first time contributing to open source, so it's really exciting for me :D\nThe fix was for OpenMMlab's MMsegmentation, which is a framework for AI segmentation tasks. We used it in our research im conducting now at Academia Sinica. I'll write about it some day.\nAnyways, we were met with the problem of not being able to combine dice loss with other losses correctly, and after searching, alot of other people had the same problem as well!\nAfter some discussion, one of the maintainers asked if I want to do a PR to solve this problem.\nInitially, I was very hesitant, as I had no experiences with contributing to open source. But I still tried my best and started my journey of contributing open source for the first time.\nI actually learned alot during this experience! I learned about linting, coding formats, unit testing, pre-commit checks and more, something you wouldn't really encounter if you only do small projects that doesn't need to be maintained. Also, I was met with quite alot of problems! Luckly, people were really helpful and kind for solving all my newbie questions.\nIn conclusion, open source contributing is a new experience for me, and I think i'll keep doing it in the future, as it really feels like you're actually making the world better! :D\n\n======\n\nI also signed up for CF round 891(Div. 3), although registered as out of competition, I still tried my best!\nMy performance was extremely disappointing though. I only solved A ~ E, and got a ranking around 2k...\nI was very defeated by my performance, as nearly 1.5k people solved pF, and as a expert ranked I couldn't solve it.\nThe problems were all pretty solid and it was a decent round though, it was purely my problem.\nThe reason I was stuck for so long was due to me being too reluctant with my initial ideas.\nThe problem was for a query, find the number of pairs in the array such that $a_i + a_j  = x$,  $a_i\\cdot a_j = y$, $i \\neq j$\nI do not understand why I didn't identify that it's Vieta's formula in an instant...\nInstead, I reorganized the equations to $(a_i - a_j)^2 = x^2 - 4y$ and couldn't find how this could be done quickly for an hour.\nI should've chose to drop my idea and think again after maybe like 30 minutes, but I was too stubborn.\nAt least I learned a valueable lesson here and I hope to not make the same mistake from now on :D\n\nAfter failing to solve basic math in contest, I decided to practice some math(related) questions:\n\n## [CF 1804C. Pull Your Luck](https://codeforces.com/contest/1804/problem/C)\n\nI am fully ashamed how I can't solve this 1500 question...\nThe problem is to basically find whether a $f$ $(1 \\leq f \\leq p)$ exists that $\\displaystyle \\frac{f^2 + f}{2} = (n - x) \\space \\text{mod} \\space n$\nI tried alot of ideas like turning it into a polynomial and binary search, try to find a formula for f...\nBut everything didn't work. Sad and defeated, I went and checked the editorial.\nIt turns out the solution was really straightforward:\nThere is actually a bound when the remainder for $\\displaystyle \\frac{f^2 + f}{2} \\space \\text{mod} \\space n$ starts looping!\nThe bound is actually $2n$, where I will give a proof quickly here (Alhtough should be moderately obvious):\n\n$\\displaystyle \\frac{(2n+k)^2 + (2n+k)}{2} \\space \\text{mod} \\space n = \\frac{4n^2+4nk+2n+k^2+k}{2} \\space \\text{mod} \\space n = (2n^2+2nk+2n) + \\frac{k^2+k}{2} \\space \\text{mod} \\space n$\n$\\displaystyle = \\frac{k^2+k}{2} \\space \\text{mod} \\space n$, so $(2n+k) = k$ in this function when $\\text{mod} \\space n$.\n\nSo the solution is to try the first $min(2n, p)$ numbers... how disappointing :/\nTo be honest, I don't know how to make sure I can solve questions like this next time, maybe just practice more...\nCode\n\n```cpp\nvoid solve() {\n    int n, x, p;\n    cin >> n >> x >> p;\n    int want = (n - x) % n;\n    for(int i = 1; i <= min(2 * n, p); i++) {\n        if(((i * i + i) / 2) % n == want) {\n            cout << \"YES\" << endl;\n            return;\n        }\n    }\n    cout << \"NO\" << endl;\n    return;\n}\n```\n\nTime Complexity: $O(n)$\n\n## [CF 1081A. The Very Beautiful Blanket](https://codeforces.com/contest/1801/problem/A)\n\nI already encounter this question a long ago, but this was a really telepathic constructing problem.\nThe solution is just to construct 2x2s by $4i$, $4i+1$, $4i+2$, $4i+3$. It's magic that is actually works in my opinion.\nNot sure how would I come up with this on my own, so uh lets just check out my code lol\nCode\n\n```cpp\nvoid solve() {\n    int arr[256][256] = {0};\n    int cntr = 0;\n    for(int i = 0; i < 256; i += 2) {\n        for(int j = 0; j < 256; j += 2) {\n            arr[i][j] = cntr;\n            arr[i][j + 1] = cntr + 1;\n            arr[i + 1][j] = cntr + 2;\n            arr[i + 1][j + 1] = cntr + 3;\n            cntr += 4;\n        }\n    }\n    int t;\n    cin >> t;\n    while(t--) {\n        int n, m;\n        cin >> n >> m;\n        cout << n * m << endl;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                cout << arr[i][j] << \" \";\n            }\n            cout << endl;\n        }\n    }\n    return;\n}\n```\n\nTime Complexity: $O(nm)$\n\n## [CF 1731D. Valiant's New Map](https://codeforces.com/contest/1731/problem/D)\n\nFinally a question I fully solved myself! (1700 too lol)\n\nThe question is for each test case $(1 \\leq t \\leq 1000)$, you want to find the maximum $l$ such that\nyou can find a $l \\times l$ square in a $n \\cdot m \\space (1 \\leq n, m \\leq 200)$ grid where every element is greater or equal to $l$.\n\nWell, a easy idea is to binary search $l$, enumerate through every square and do 2D range min queries!\nThis is just a basic binary search + 2D range min query right? 2D sparse table lets gooooo!\nFunnily enough, 2D ST is actually a solution that was given in the tutorial (albeit a bit overkill),\nand 2D segtree actually wouldn't pass due to $O(logn+logm)$ each query.\n\nLets try to solve it in an elegant manner instead of overkilling with weird data structures!\nOf course when talking about 2D queries, you would recall that you could do 2D prefix arrays.\nBut thats for 2D range sum queries, how to we transform the question into checking range sums?\nNotice that if we let $arr[i] = (arr[i] >= l)$, we would get a array with only zeros and ones,\nthen if we do prefix sum, a query that equals to $l \\times l$ means that every element inside is greater or equal to $l$!\n\nCode\n\n```cpp\nint n, m;\nbool func(vector<vector<int>> vec, int val){\n    vector<vector<int>> pre(n + 1, vector<int>(m + 1, 0));\n    for(int i = 1; i <= n; i++) {\n        for(int j = 1; j <= m; j++) {\n            pre[i][j] = pre[i - 1][j] + pre[i][j - 1] - pre[i - 1][j - 1] + (vec[i - 1][j - 1] >= val);\n        }\n    }  \n    for(int i = val; i <= n; i++) {\n        for(int j = val; j <= m; j++) {\n            int sum = pre[i][j] - pre[i][j - val] - pre[i - val][j] + pre[i - val][j - val];\n            if(sum == val * val) return true;\n        }\n    }  \n    return false;\n};\nvoid solve() {\n    cin >> n >> m;\n    vector<vector<int>> vec(n, vector<int>(m, 0));\n    int l = 0, r = min(n, m);\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < m; j++) {\n            cin >> vec[i][j];\n        }\n    }\n    while(r - l > 1) {\n        int mid = (r + l) >> 1;\n        if(func(vec, mid)) {\n            l = mid;\n        } else {\n            r = mid - 1;\n        }\n    }\n    if(func(vec, r)) {\n        cout << r << endl;\n    } else {\n        cout << l << endl;\n    }\n    return;\n}\n```\n\nTime Complexity: $O(nm \\cdot log(\\text{min}(n, m)))$\n\nPretty elegant solution right?\n\n## [CF 1114C. Trailing Loves (or L'oeufs?)](https://codeforces.com/contest/1114/problem/C)\n\nThis problem is super hard for me... pure math is just death for me XD\n\nThe problem is to find the number of trailing zero digits when representing $n! \\space (1 \\leq n \\leq 10^{18})$ in base $b \\space (2 \\leq b \\leq 10^{12})$.\nIt is also equivalent to finding the max $r$ such that $n!$ is divisible by $b^r$. (Makes alot of sense if you think about it).\nWell, the observations above are still pretty reasonable, but $n!$ is a super big number! how do we do this?\nApparently, there is an exact formula dealing with this problem: [Legendre's Formula](https://artofproblemsolving.com/wiki/index.php/Legendre%27s_Formula#Olympiad)\nThe formula states that the largest $r$ such that $n!$ is divisible by $p^n$ is $\\displaystyle \\sum_{i-1}^{\\infty} \\lfloor \\frac{n}{p^i} \\rfloor$.\nI was confused by this formula at first, but it made sense after some thinking:\n$n! = 1 \\cdot 2 \\cdot ... n$, how many numbers between $1$ to $n$ are divisible by $p$? $\\lfloor \\frac{n}{p} \\rfloor$ numbers.\nNow we counted the numbers divisible by $p$, but we only counted the numbers divisible by $p^2$ once when they should contribute twice. So what we do is do this for every power of $p$ and sum up the values to get what we want.\nThe formula requires the base $b$ to be prime though, while we have any number in $[2, 10^{12}]$.\nWhat we can do is to prime factorize $b$ as $p_1^{x_1} \\cdot p_2^{x_2} \\cdot ... p_k^{x_k}$ and apply the formula with every prime factor $p_i$ to obtain $e_{p_i}(n!)$.\nFinally, we can get the answer for $b$ by $\\displaystyle \\text{min}(\\frac{y_i}{x_i})$.\n\nCode\n\n```cpp\nvoid solve() {\n    int n, b;\n    cin >> n >> b;\n    vector<int> p;\n    vector<int> times;\n    for(int i = 2; i * i <= b; i++) {\n        // factorize b;\n        if(b == 1) break;\n        while(b % i == 0) {\n            if(!p.size() or (p.size() and p[p.size() - 1] != i)) {\n                p.pb(i);\n                times.pb(0);\n            }\n            b /= i;\n            times[times.size() - 1] += 1;\n        }\n    }\n    if(b != 1) {\n        p.pb(b);\n        times.pb(1);\n    }\n    int ans = 5000000000000000000ll;\n    for(int i = 0; i < p.size(); i++) {\n        int cnt = 0;\n        int p_i = 1;\n        for(int j = 1; p_i <= n / p[i]; j++) {\n            p_i *= p[i];\n            cnt += (n / p_i);\n        }\n        ans = min(ans, (cnt / times[i]));\n    }\n    cout << ans << endl;\n    return;\n}\n```\n\nThe code also had alot of specific parts that needed some attention when writing, I realized that 0x3f3f3f3f only equals to around $2 \\cdot 10^9$, which is not enough for this question.\nAnother thing was deciding the bound for $\\displaystyle \\sum_{i-1}^{\\infty} \\lfloor \\frac{n}{p^i} \\rfloor$. I wrote $p_i \\leq n$, but this actually causes overflow, you need to change to $\\displaystyle p_i \\leq \\frac{n}{p[i]}$ to prevent overflow from happening.\n\nThis was a really interesting question that troubled me alot, really shows that I need to up my math game.\n","source":"_posts/Open-source-contribution-cool-problems.md","raw":"---\ntitle: Open source contribution && cool problems\ndate: 2023-08-10 00:30:11\ntags: [\"Life\", \"CP\", \"AI\"]\n---\nMy PR was finally merged!\n\n![merged](merge.png)\n\nThis is my first time contributing to open source, so it's really exciting for me :D\nThe fix was for OpenMMlab's MMsegmentation, which is a framework for AI segmentation tasks. We used it in our research im conducting now at Academia Sinica. I'll write about it some day.\nAnyways, we were met with the problem of not being able to combine dice loss with other losses correctly, and after searching, alot of other people had the same problem as well!\nAfter some discussion, one of the maintainers asked if I want to do a PR to solve this problem.\nInitially, I was very hesitant, as I had no experiences with contributing to open source. But I still tried my best and started my journey of contributing open source for the first time.\nI actually learned alot during this experience! I learned about linting, coding formats, unit testing, pre-commit checks and more, something you wouldn't really encounter if you only do small projects that doesn't need to be maintained. Also, I was met with quite alot of problems! Luckly, people were really helpful and kind for solving all my newbie questions.\nIn conclusion, open source contributing is a new experience for me, and I think i'll keep doing it in the future, as it really feels like you're actually making the world better! :D\n\n======\n\nI also signed up for CF round 891(Div. 3), although registered as out of competition, I still tried my best!\nMy performance was extremely disappointing though. I only solved A ~ E, and got a ranking around 2k...\nI was very defeated by my performance, as nearly 1.5k people solved pF, and as a expert ranked I couldn't solve it.\nThe problems were all pretty solid and it was a decent round though, it was purely my problem.\nThe reason I was stuck for so long was due to me being too reluctant with my initial ideas.\nThe problem was for a query, find the number of pairs in the array such that $a_i + a_j  = x$,  $a_i\\cdot a_j = y$, $i \\neq j$\nI do not understand why I didn't identify that it's Vieta's formula in an instant...\nInstead, I reorganized the equations to $(a_i - a_j)^2 = x^2 - 4y$ and couldn't find how this could be done quickly for an hour.\nI should've chose to drop my idea and think again after maybe like 30 minutes, but I was too stubborn.\nAt least I learned a valueable lesson here and I hope to not make the same mistake from now on :D\n\nAfter failing to solve basic math in contest, I decided to practice some math(related) questions:\n\n## [CF 1804C. Pull Your Luck](https://codeforces.com/contest/1804/problem/C)\n\nI am fully ashamed how I can't solve this 1500 question...\nThe problem is to basically find whether a $f$ $(1 \\leq f \\leq p)$ exists that $\\displaystyle \\frac{f^2 + f}{2} = (n - x) \\space \\text{mod} \\space n$\nI tried alot of ideas like turning it into a polynomial and binary search, try to find a formula for f...\nBut everything didn't work. Sad and defeated, I went and checked the editorial.\nIt turns out the solution was really straightforward:\nThere is actually a bound when the remainder for $\\displaystyle \\frac{f^2 + f}{2} \\space \\text{mod} \\space n$ starts looping!\nThe bound is actually $2n$, where I will give a proof quickly here (Alhtough should be moderately obvious):\n\n$\\displaystyle \\frac{(2n+k)^2 + (2n+k)}{2} \\space \\text{mod} \\space n = \\frac{4n^2+4nk+2n+k^2+k}{2} \\space \\text{mod} \\space n = (2n^2+2nk+2n) + \\frac{k^2+k}{2} \\space \\text{mod} \\space n$\n$\\displaystyle = \\frac{k^2+k}{2} \\space \\text{mod} \\space n$, so $(2n+k) = k$ in this function when $\\text{mod} \\space n$.\n\nSo the solution is to try the first $min(2n, p)$ numbers... how disappointing :/\nTo be honest, I don't know how to make sure I can solve questions like this next time, maybe just practice more...\nCode\n\n```cpp\nvoid solve() {\n    int n, x, p;\n    cin >> n >> x >> p;\n    int want = (n - x) % n;\n    for(int i = 1; i <= min(2 * n, p); i++) {\n        if(((i * i + i) / 2) % n == want) {\n            cout << \"YES\" << endl;\n            return;\n        }\n    }\n    cout << \"NO\" << endl;\n    return;\n}\n```\n\nTime Complexity: $O(n)$\n\n## [CF 1081A. The Very Beautiful Blanket](https://codeforces.com/contest/1801/problem/A)\n\nI already encounter this question a long ago, but this was a really telepathic constructing problem.\nThe solution is just to construct 2x2s by $4i$, $4i+1$, $4i+2$, $4i+3$. It's magic that is actually works in my opinion.\nNot sure how would I come up with this on my own, so uh lets just check out my code lol\nCode\n\n```cpp\nvoid solve() {\n    int arr[256][256] = {0};\n    int cntr = 0;\n    for(int i = 0; i < 256; i += 2) {\n        for(int j = 0; j < 256; j += 2) {\n            arr[i][j] = cntr;\n            arr[i][j + 1] = cntr + 1;\n            arr[i + 1][j] = cntr + 2;\n            arr[i + 1][j + 1] = cntr + 3;\n            cntr += 4;\n        }\n    }\n    int t;\n    cin >> t;\n    while(t--) {\n        int n, m;\n        cin >> n >> m;\n        cout << n * m << endl;\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                cout << arr[i][j] << \" \";\n            }\n            cout << endl;\n        }\n    }\n    return;\n}\n```\n\nTime Complexity: $O(nm)$\n\n## [CF 1731D. Valiant's New Map](https://codeforces.com/contest/1731/problem/D)\n\nFinally a question I fully solved myself! (1700 too lol)\n\nThe question is for each test case $(1 \\leq t \\leq 1000)$, you want to find the maximum $l$ such that\nyou can find a $l \\times l$ square in a $n \\cdot m \\space (1 \\leq n, m \\leq 200)$ grid where every element is greater or equal to $l$.\n\nWell, a easy idea is to binary search $l$, enumerate through every square and do 2D range min queries!\nThis is just a basic binary search + 2D range min query right? 2D sparse table lets gooooo!\nFunnily enough, 2D ST is actually a solution that was given in the tutorial (albeit a bit overkill),\nand 2D segtree actually wouldn't pass due to $O(logn+logm)$ each query.\n\nLets try to solve it in an elegant manner instead of overkilling with weird data structures!\nOf course when talking about 2D queries, you would recall that you could do 2D prefix arrays.\nBut thats for 2D range sum queries, how to we transform the question into checking range sums?\nNotice that if we let $arr[i] = (arr[i] >= l)$, we would get a array with only zeros and ones,\nthen if we do prefix sum, a query that equals to $l \\times l$ means that every element inside is greater or equal to $l$!\n\nCode\n\n```cpp\nint n, m;\nbool func(vector<vector<int>> vec, int val){\n    vector<vector<int>> pre(n + 1, vector<int>(m + 1, 0));\n    for(int i = 1; i <= n; i++) {\n        for(int j = 1; j <= m; j++) {\n            pre[i][j] = pre[i - 1][j] + pre[i][j - 1] - pre[i - 1][j - 1] + (vec[i - 1][j - 1] >= val);\n        }\n    }  \n    for(int i = val; i <= n; i++) {\n        for(int j = val; j <= m; j++) {\n            int sum = pre[i][j] - pre[i][j - val] - pre[i - val][j] + pre[i - val][j - val];\n            if(sum == val * val) return true;\n        }\n    }  \n    return false;\n};\nvoid solve() {\n    cin >> n >> m;\n    vector<vector<int>> vec(n, vector<int>(m, 0));\n    int l = 0, r = min(n, m);\n    for(int i = 0; i < n; i++) {\n        for(int j = 0; j < m; j++) {\n            cin >> vec[i][j];\n        }\n    }\n    while(r - l > 1) {\n        int mid = (r + l) >> 1;\n        if(func(vec, mid)) {\n            l = mid;\n        } else {\n            r = mid - 1;\n        }\n    }\n    if(func(vec, r)) {\n        cout << r << endl;\n    } else {\n        cout << l << endl;\n    }\n    return;\n}\n```\n\nTime Complexity: $O(nm \\cdot log(\\text{min}(n, m)))$\n\nPretty elegant solution right?\n\n## [CF 1114C. Trailing Loves (or L'oeufs?)](https://codeforces.com/contest/1114/problem/C)\n\nThis problem is super hard for me... pure math is just death for me XD\n\nThe problem is to find the number of trailing zero digits when representing $n! \\space (1 \\leq n \\leq 10^{18})$ in base $b \\space (2 \\leq b \\leq 10^{12})$.\nIt is also equivalent to finding the max $r$ such that $n!$ is divisible by $b^r$. (Makes alot of sense if you think about it).\nWell, the observations above are still pretty reasonable, but $n!$ is a super big number! how do we do this?\nApparently, there is an exact formula dealing with this problem: [Legendre's Formula](https://artofproblemsolving.com/wiki/index.php/Legendre%27s_Formula#Olympiad)\nThe formula states that the largest $r$ such that $n!$ is divisible by $p^n$ is $\\displaystyle \\sum_{i-1}^{\\infty} \\lfloor \\frac{n}{p^i} \\rfloor$.\nI was confused by this formula at first, but it made sense after some thinking:\n$n! = 1 \\cdot 2 \\cdot ... n$, how many numbers between $1$ to $n$ are divisible by $p$? $\\lfloor \\frac{n}{p} \\rfloor$ numbers.\nNow we counted the numbers divisible by $p$, but we only counted the numbers divisible by $p^2$ once when they should contribute twice. So what we do is do this for every power of $p$ and sum up the values to get what we want.\nThe formula requires the base $b$ to be prime though, while we have any number in $[2, 10^{12}]$.\nWhat we can do is to prime factorize $b$ as $p_1^{x_1} \\cdot p_2^{x_2} \\cdot ... p_k^{x_k}$ and apply the formula with every prime factor $p_i$ to obtain $e_{p_i}(n!)$.\nFinally, we can get the answer for $b$ by $\\displaystyle \\text{min}(\\frac{y_i}{x_i})$.\n\nCode\n\n```cpp\nvoid solve() {\n    int n, b;\n    cin >> n >> b;\n    vector<int> p;\n    vector<int> times;\n    for(int i = 2; i * i <= b; i++) {\n        // factorize b;\n        if(b == 1) break;\n        while(b % i == 0) {\n            if(!p.size() or (p.size() and p[p.size() - 1] != i)) {\n                p.pb(i);\n                times.pb(0);\n            }\n            b /= i;\n            times[times.size() - 1] += 1;\n        }\n    }\n    if(b != 1) {\n        p.pb(b);\n        times.pb(1);\n    }\n    int ans = 5000000000000000000ll;\n    for(int i = 0; i < p.size(); i++) {\n        int cnt = 0;\n        int p_i = 1;\n        for(int j = 1; p_i <= n / p[i]; j++) {\n            p_i *= p[i];\n            cnt += (n / p_i);\n        }\n        ans = min(ans, (cnt / times[i]));\n    }\n    cout << ans << endl;\n    return;\n}\n```\n\nThe code also had alot of specific parts that needed some attention when writing, I realized that 0x3f3f3f3f only equals to around $2 \\cdot 10^9$, which is not enough for this question.\nAnother thing was deciding the bound for $\\displaystyle \\sum_{i-1}^{\\infty} \\lfloor \\frac{n}{p^i} \\rfloor$. I wrote $p_i \\leq n$, but this actually causes overflow, you need to change to $\\displaystyle p_i \\leq \\frac{n}{p[i]}$ to prevent overflow from happening.\n\nThis was a really interesting question that troubled me alot, really shows that I need to up my math game.\n","slug":"Open-source-contribution-cool-problems","published":1,"updated":"2024-12-26T01:29:58.481Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblh4000yb0u9c3fjcumw","content":"<p>My PR was finally merged!</p>\n<p><img src=\"merge.png\" alt=\"merged\"></p>\n<p>This is my first time contributing to open source, so it’s really exciting for me :D<br>\nThe fix was for OpenMMlab’s MMsegmentation, which is a framework for AI segmentation tasks. We used it in our research im conducting now at Academia Sinica. I’ll write about it some day.<br>\nAnyways, we were met with the problem of not being able to combine dice loss with other losses correctly, and after searching, alot of other people had the same problem as well!<br>\nAfter some discussion, one of the maintainers asked if I want to do a PR to solve this problem.<br>\nInitially, I was very hesitant, as I had no experiences with contributing to open source. But I still tried my best and started my journey of contributing open source for the first time.<br>\nI actually learned alot during this experience! I learned about linting, coding formats, unit testing, pre-commit checks and more, something you wouldn’t really encounter if you only do small projects that doesn’t need to be maintained. Also, I was met with quite alot of problems! Luckly, people were really helpful and kind for solving all my newbie questions.<br>\nIn conclusion, open source contributing is a new experience for me, and I think i’ll keep doing it in the future, as it really feels like you’re actually making the world better! :D</p>\n<p>======</p>\n<p>I also signed up for CF round 891(Div. 3), although registered as out of competition, I still tried my best!<br>\nMy performance was extremely disappointing though. I only solved A ~ E, and got a ranking around 2k…<br>\nI was very defeated by my performance, as nearly 1.5k people solved pF, and as a expert ranked I couldn’t solve it.<br>\nThe problems were all pretty solid and it was a decent round though, it was purely my problem.<br>\nThe reason I was stuck for so long was due to me being too reluctant with my initial ideas.<br>\nThe problem was for a query, find the number of pairs in the array such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><msub><mi>a</mi><mi>j</mi></msub><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">a_i + a_j  = x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>,  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>⋅</mo><msub><mi>a</mi><mi>j</mi></msub><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">a_i\\cdot a_j = y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.59445em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo mathvariant=\"normal\">≠</mo><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">i \\neq j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span><br>\nI do not understand why I didn’t identify that it’s Vieta’s formula in an instant…<br>\nInstead, I reorganized the equations to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>−</mo><msub><mi>a</mi><mi>j</mi></msub><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>4</mn><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">(a_i - a_j)^2 = x^2 - 4y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1002159999999999em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> and couldn’t find how this could be done quickly for an hour.<br>\nI should’ve chose to drop my idea and think again after maybe like 30 minutes, but I was too stubborn.<br>\nAt least I learned a valueable lesson here and I hope to not make the same mistake from now on :D</p>\n<p>After failing to solve basic math in contest, I decided to practice some math(related) questions:</p>\n<h2 id=\"cf-1804c-pull-your-luck\"><a href=\"https://codeforces.com/contest/1804/problem/C\">CF 1804C. Pull Your Luck</a></h2>\n<p>I am fully ashamed how I can’t solve this 1500 question…<br>\nThe problem is to basically find whether a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>≤</mo><mi>f</mi><mo>≤</mo><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1 \\leq f \\leq p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span> exists that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mfrac><mrow><msup><mi>f</mi><mn>2</mn></msup><mo>+</mo><mi>f</mi></mrow><mn>2</mn></mfrac><mo>=</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext> mod </mtext><mi>n</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle \\frac{f^2 + f}{2} = (n - x) \\space \\text{mod} \\space n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\"> </span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span></span></span></span><br>\nI tried alot of ideas like turning it into a polynomial and binary search, try to find a formula for f…<br>\nBut everything didn’t work. Sad and defeated, I went and checked the editorial.<br>\nIt turns out the solution was really straightforward:<br>\nThere is actually a bound when the remainder for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mfrac><mrow><msup><mi>f</mi><mn>2</mn></msup><mo>+</mo><mi>f</mi></mrow><mn>2</mn></mfrac><mtext> mod </mtext><mi>n</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle \\frac{f^2 + f}{2} \\space \\text{mod} \\space n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\"> </span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span></span></span></span> starts looping!<br>\nThe bound is actually <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">2n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span></span></span></span>, where I will give a proof quickly here (Alhtough should be moderately obvious):</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mfrac><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo>+</mo><mi>k</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac><mtext> mod </mtext><mi>n</mi><mo>=</mo><mfrac><mrow><mn>4</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mi>n</mi><mi>k</mi><mo>+</mo><mn>2</mn><mi>n</mi><mo>+</mo><msup><mi>k</mi><mn>2</mn></msup><mo>+</mo><mi>k</mi></mrow><mn>2</mn></mfrac><mtext> mod </mtext><mi>n</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mn>2</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>n</mi><mi>k</mi><mo>+</mo><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mfrac><mrow><msup><mi>k</mi><mn>2</mn></msup><mo>+</mo><mi>k</mi></mrow><mn>2</mn></mfrac><mtext> mod </mtext><mi>n</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle \\frac{(2n+k)^2 + (2n+k)}{2} \\space \\text{mod} \\space n = \\frac{4n^2+4nk+2n+k^2+k}{2} \\space \\text{mod} \\space n = (2n^2+2nk+2n) + \\frac{k^2+k}{2} \\space \\text{mod} \\space n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\"> </span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\"> </span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\"> </span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span></span></span></span><br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mo>=</mo><mfrac><mrow><msup><mi>k</mi><mn>2</mn></msup><mo>+</mo><mi>k</mi></mrow><mn>2</mn></mfrac><mtext> mod </mtext><mi>n</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle = \\frac{k^2+k}{2} \\space \\text{mod} \\space n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\"> </span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span></span></span></span>, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">(2n+k) = k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> in this function when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>mod </mtext><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\text{mod} \\space n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span></span></span></span>.</p>\n<p>So the solution is to try the first <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo separator=\"true\">,</mo><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">min(2n, p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span> numbers… how disappointing :/<br>\nTo be honest, I don’t know how to make sure I can solve questions like this next time, maybe just practice more…<br>\nCode</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, x, p;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; x &gt;&gt; p;</span><br><span class=\"line\">    <span class=\"type\">int</span> want = (n - x) % n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"built_in\">min</span>(<span class=\"number\">2</span> * n, p); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(((i * i + i) / <span class=\"number\">2</span>) % n == want) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1081a-the-very-beautiful-blanket\"><a href=\"https://codeforces.com/contest/1801/problem/A\">CF 1081A. The Very Beautiful Blanket</a></h2>\n<p>I already encounter this question a long ago, but this was a really telepathic constructing problem.<br>\nThe solution is just to construct 2x2s by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">4i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\">i</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">4i+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mi>i</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">4i+2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mi>i</mi><mo>+</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">4i+3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>. It’s magic that is actually works in my opinion.<br>\nNot sure how would I come up with this on my own, so uh lets just check out my code lol<br>\nCode</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[<span class=\"number\">256</span>][<span class=\"number\">256</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> cntr = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i += <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">256</span>; j += <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            arr[i][j] = cntr;</span><br><span class=\"line\">            arr[i][j + <span class=\"number\">1</span>] = cntr + <span class=\"number\">1</span>;</span><br><span class=\"line\">            arr[i + <span class=\"number\">1</span>][j] = cntr + <span class=\"number\">2</span>;</span><br><span class=\"line\">            arr[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>] = cntr + <span class=\"number\">3</span>;</span><br><span class=\"line\">            cntr += <span class=\"number\">4</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">        cout &lt;&lt; n * m &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</span><br><span class=\"line\">                cout &lt;&lt; arr[i][j] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cout &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nm)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1731d-valiant-s-new-map\"><a href=\"https://codeforces.com/contest/1731/problem/D\">CF 1731D. Valiant’s New Map</a></h2>\n<p>Finally a question I fully solved myself! (1700 too lol)</p>\n<p>The question is for each test case <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>≤</mo><mi>t</mi><mo>≤</mo><mn>1000</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1 \\leq t \\leq 1000)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>, you want to find the maximum <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> such that<br>\nyou can find a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mo>×</mo><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l \\times l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> square in a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>⋅</mo><mi>m</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo>≤</mo><mn>200</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">n \\cdot m \\space (1 \\leq n, m \\leq 200)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304100000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> grid where every element is greater or equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span>.</p>\n<p>Well, a easy idea is to binary search <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span>, enumerate through every square and do 2D range min queries!<br>\nThis is just a basic binary search + 2D range min query right? 2D sparse table lets gooooo!<br>\nFunnily enough, 2D ST is actually a solution that was given in the tutorial (albeit a bit overkill),<br>\nand 2D segtree actually wouldn’t pass due to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>+</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn+logm)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span> each query.</p>\n<p>Lets try to solve it in an elegant manner instead of overkilling with weird data structures!<br>\nOf course when talking about 2D queries, you would recall that you could do 2D prefix arrays.<br>\nBut thats for 2D range sum queries, how to we transform the question into checking range sums?<br>\nNotice that if we let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mo>=</mo><mi>l</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">arr[i] = (arr[i] &gt;= l)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mclose\">)</span></span></span></span>, we would get a array with only zeros and ones,<br>\nthen if we do prefix sum, a query that equals to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mo>×</mo><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l \\times l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> means that every element inside is greater or equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span>!</p>\n<p>Code</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">func</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; vec, <span class=\"type\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">pre</span>(n + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(m + <span class=\"number\">1</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++) &#123;</span><br><span class=\"line\">            pre[i][j] = pre[i - <span class=\"number\">1</span>][j] + pre[i][j - <span class=\"number\">1</span>] - pre[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + (vec[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] &gt;= val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = val; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = val; j &lt;= m; j++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> sum = pre[i][j] - pre[i][j - val] - pre[i - val][j] + pre[i - val][j - val];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sum == val * val) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">vec</span>(n, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(m, <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"number\">0</span>, r = <span class=\"built_in\">min</span>(n, m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</span><br><span class=\"line\">            cin &gt;&gt; vec[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r - l &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = (r + l) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">func</span>(vec, mid)) &#123;</span><br><span class=\"line\">            l = mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">func</span>(vec, r)) &#123;</span><br><span class=\"line\">        cout &lt;&lt; r &lt;&lt; endl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; l &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>m</mi><mo>⋅</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mtext>min</mtext><mo stretchy=\"false\">(</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nm \\cdot log(\\text{min}(n, m)))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">min</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>Pretty elegant solution right?</p>\n<h2 id=\"cf-1114c-trailing-loves-or-l-oeufs\"><a href=\"https://codeforces.com/contest/1114/problem/C\">CF 1114C. Trailing Loves (or L’oeufs?)</a></h2>\n<p>This problem is super hard for me… pure math is just death for me XD</p>\n<p>The problem is to find the number of trailing zero digits when representing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo stretchy=\"false\">!</mo><mtext> </mtext><mo stretchy=\"false\">(</mo><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>18</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">n! \\space (1 \\leq n \\leq 10^{18})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> in base <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mn>2</mn><mo>≤</mo><mi>b</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>12</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">b \\space (2 \\leq b \\leq 10^{12})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.<br>\nIt is also equivalent to finding the max <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo stretchy=\"false\">!</mo></mrow><annotation encoding=\"application/x-tex\">n!</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span></span></span></span> is divisible by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>b</mi><mi>r</mi></msup></mrow><annotation encoding=\"application/x-tex\">b^r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span></span></span></span></span></span></span>. (Makes alot of sense if you think about it).<br>\nWell, the observations above are still pretty reasonable, but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo stretchy=\"false\">!</mo></mrow><annotation encoding=\"application/x-tex\">n!</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span></span></span></span> is a super big number! how do we do this?<br>\nApparently, there is an exact formula dealing with this problem: <a href=\"https://artofproblemsolving.com/wiki/index.php/Legendre%27s_Formula#Olympiad\">Legendre’s Formula</a><br>\nThe formula states that the largest <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo stretchy=\"false\">!</mo></mrow><annotation encoding=\"application/x-tex\">n!</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span></span></span></span> is divisible by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>p</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">p^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.858832em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munderover><mo>∑</mo><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mo stretchy=\"false\">⌊</mo><mfrac><mi>n</mi><msup><mi>p</mi><mi>i</mi></msup></mfrac><mo stretchy=\"false\">⌋</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle \\sum_{i-1}^{\\infty} \\lfloor \\frac{n}{p^i} \\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9873970000000005em;vertical-align:-1.336em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.8723309999999997em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.336em;\"><span></span></span></span></span></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.750664em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804400000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span></span></span></span>.<br>\nI was confused by this formula at first, but it made sense after some thinking:<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo stretchy=\"false\">!</mo><mo>=</mo><mn>1</mn><mo>⋅</mo><mn>2</mn><mo>⋅</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n! = 1 \\cdot 2 \\cdot ... n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">n</span></span></span></span>, how many numbers between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> are divisible by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>? <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mfrac><mi>n</mi><mi>p</mi></mfrac><mo stretchy=\"false\">⌋</mo></mrow><annotation encoding=\"application/x-tex\">\\lfloor \\frac{n}{p} \\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2311079999999999em;vertical-align:-0.481108em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.695392em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.481108em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span></span></span></span> numbers.<br>\nNow we counted the numbers divisible by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>, but we only counted the numbers divisible by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>p</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">p^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> once when they should contribute twice. So what we do is do this for every power of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> and sum up the values to get what we want.<br>\nThe formula requires the base <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> to be prime though, while we have any number in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>1</mn><msup><mn>0</mn><mn>12</mn></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[2, 10^{12}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>.<br>\nWhat we can do is to prime factorize <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>p</mi><mn>1</mn><msub><mi>x</mi><mn>1</mn></msub></msubsup><mo>⋅</mo><msubsup><mi>p</mi><mn>2</mn><msub><mi>x</mi><mn>2</mn></msub></msubsup><mo>⋅</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><msubsup><mi>p</mi><mi>k</mi><msub><mi>x</mi><mi>k</mi></msub></msubsup></mrow><annotation encoding=\"application/x-tex\">p_1^{x_1} \\cdot p_2^{x_2} \\cdot ... p_k^{x_k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0126em;vertical-align:-0.266308em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.746292em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.1449000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.266308em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0126em;vertical-align:-0.266308em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.746292em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.1449000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.266308em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0533599999999999em;vertical-align:-0.3013079999999999em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7520519999999999em;\"><span style=\"top:-2.3986920000000005em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.1506600000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15122857142857138em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3013079999999999em;\"><span></span></span></span></span></span></span></span></span></span> and apply the formula with every prime factor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">p_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to obtain <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><msub><mi>p</mi><mi>i</mi></msub></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">e_{p_i}(n!)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span><span class=\"mclose\">)</span></span></span></span>.<br>\nFinally, we can get the answer for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mtext>min</mtext><mo stretchy=\"false\">(</mo><mfrac><msub><mi>y</mi><mi>i</mi></msub><msub><mi>x</mi><mi>i</mi></msub></mfrac><mo stretchy=\"false\">)</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle \\text{min}(\\frac{y_i}{x_i})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.94356em;vertical-align:-0.8360000000000001em;\"></span><span class=\"mord text\"><span class=\"mord\">min</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1075599999999999em;\"><span style=\"top:-2.3139999999999996em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8360000000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>Code</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, b;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; b;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; p;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; times;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i * i &lt;= b; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// factorize b;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b == <span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(b % i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!p.<span class=\"built_in\">size</span>() <span class=\"built_in\">or</span> (p.<span class=\"built_in\">size</span>() <span class=\"keyword\">and</span> p[p.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>] != i)) &#123;</span><br><span class=\"line\">                p.<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">                times.<span class=\"built_in\">pb</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            b /= i;</span><br><span class=\"line\">            times[times.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        p.<span class=\"built_in\">pb</span>(b);</span><br><span class=\"line\">        times.<span class=\"built_in\">pb</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">5000000000000000000ll</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; p.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> p_i = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; p_i &lt;= n / p[i]; j++) &#123;</span><br><span class=\"line\">            p_i *= p[i];</span><br><span class=\"line\">            cnt += (n / p_i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans = <span class=\"built_in\">min</span>(ans, (cnt / times[i]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The code also had alot of specific parts that needed some attention when writing, I realized that 0x3f3f3f3f only equals to around <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>⋅</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding=\"application/x-tex\">2 \\cdot 10^9</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span></span></span></span>, which is not enough for this question.<br>\nAnother thing was deciding the bound for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munderover><mo>∑</mo><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mo stretchy=\"false\">⌊</mo><mfrac><mi>n</mi><msup><mi>p</mi><mi>i</mi></msup></mfrac><mo stretchy=\"false\">⌋</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle \\sum_{i-1}^{\\infty} \\lfloor \\frac{n}{p^i} \\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9873970000000005em;vertical-align:-1.336em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.8723309999999997em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.336em;\"><span></span></span></span></span></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.750664em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804400000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span></span></span></span>. I wrote <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub><mo>≤</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">p_i \\leq n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8304100000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, but this actually causes overflow, you need to change to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msub><mi>p</mi><mi>i</mi></msub><mo>≤</mo><mfrac><mi>n</mi><mrow><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow></mfrac></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle p_i \\leq \\frac{n}{p[i]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8304100000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0435600000000003em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> to prevent overflow from happening.</p>\n<p>This was a really interesting question that troubled me alot, really shows that I need to up my math game.</p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>My PR was finally merged!</p>\n<p><img src=\"merge.png\" alt=\"merged\"></p>\n<p>This is my first time contributing to open source, so it’s really exciting for me :D<br>\nThe fix was for OpenMMlab’s MMsegmentation, which is a framework for AI segmentation tasks. We used it in our research im conducting now at Academia Sinica. I’ll write about it some day.<br>\nAnyways, we were met with the problem of not being able to combine dice loss with other losses correctly, and after searching, alot of other people had the same problem as well!<br>\nAfter some discussion, one of the maintainers asked if I want to do a PR to solve this problem.<br>\nInitially, I was very hesitant, as I had no experiences with contributing to open source. But I still tried my best and started my journey of contributing open source for the first time.<br>\nI actually learned alot during this experience! I learned about linting, coding formats, unit testing, pre-commit checks and more, something you wouldn’t really encounter if you only do small projects that doesn’t need to be maintained. Also, I was met with quite alot of problems! Luckly, people were really helpful and kind for solving all my newbie questions.<br>\nIn conclusion, open source contributing is a new experience for me, and I think i’ll keep doing it in the future, as it really feels like you’re actually making the world better! :D</p>\n<p>======</p>\n<p>I also signed up for CF round 891(Div. 3), although registered as out of competition, I still tried my best!<br>\nMy performance was extremely disappointing though. I only solved A ~ E, and got a ranking around 2k…<br>\nI was very defeated by my performance, as nearly 1.5k people solved pF, and as a expert ranked I couldn’t solve it.<br>\nThe problems were all pretty solid and it was a decent round though, it was purely my problem.<br>\nThe reason I was stuck for so long was due to me being too reluctant with my initial ideas.<br>\nThe problem was for a query, find the number of pairs in the array such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><msub><mi>a</mi><mi>j</mi></msub><mo>=</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">a_i + a_j  = x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span>,  <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>⋅</mo><msub><mi>a</mi><mi>j</mi></msub><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">a_i\\cdot a_j = y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.59445em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.716668em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mo mathvariant=\"normal\">≠</mo><mi>j</mi></mrow><annotation encoding=\"application/x-tex\">i \\neq j</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.85396em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span></span></span></span><br>\nI do not understand why I didn’t identify that it’s Vieta’s formula in an instant…<br>\nInstead, I reorganized the equations to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo>−</mo><msub><mi>a</mi><mi>j</mi></msub><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>=</mo><msup><mi>x</mi><mn>2</mn></msup><mo>−</mo><mn>4</mn><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">(a_i - a_j)^2 = x^2 - 4y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1002159999999999em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.897438em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> and couldn’t find how this could be done quickly for an hour.<br>\nI should’ve chose to drop my idea and think again after maybe like 30 minutes, but I was too stubborn.<br>\nAt least I learned a valueable lesson here and I hope to not make the same mistake from now on :D</p>\n<p>After failing to solve basic math in contest, I decided to practice some math(related) questions:</p>\n<h2 id=\"cf-1804c-pull-your-luck\"><a href=\"https://codeforces.com/contest/1804/problem/C\">CF 1804C. Pull Your Luck</a></h2>\n<p>I am fully ashamed how I can’t solve this 1500 question…<br>\nThe problem is to basically find whether a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>f</mi></mrow><annotation encoding=\"application/x-tex\">f</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>≤</mo><mi>f</mi><mo>≤</mo><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1 \\leq f \\leq p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span> exists that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mfrac><mrow><msup><mi>f</mi><mn>2</mn></msup><mo>+</mo><mi>f</mi></mrow><mn>2</mn></mfrac><mo>=</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>x</mi><mo stretchy=\"false\">)</mo><mtext> mod </mtext><mi>n</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle \\frac{f^2 + f}{2} = (n - x) \\space \\text{mod} \\space n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span><span class=\"mspace\"> </span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span></span></span></span><br>\nI tried alot of ideas like turning it into a polynomial and binary search, try to find a formula for f…<br>\nBut everything didn’t work. Sad and defeated, I went and checked the editorial.<br>\nIt turns out the solution was really straightforward:<br>\nThere is actually a bound when the remainder for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mfrac><mrow><msup><mi>f</mi><mn>2</mn></msup><mo>+</mo><mi>f</mi></mrow><mn>2</mn></mfrac><mtext> mod </mtext><mi>n</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle \\frac{f^2 + f}{2} \\space \\text{mod} \\space n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\"> </span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span></span></span></span> starts looping!<br>\nThe bound is actually <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">2n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span></span></span></span>, where I will give a proof quickly here (Alhtough should be moderately obvious):</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mfrac><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo>+</mo><mi>k</mi><msup><mo stretchy=\"false\">)</mo><mn>2</mn></msup><mo>+</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><mn>2</mn></mfrac><mtext> mod </mtext><mi>n</mi><mo>=</mo><mfrac><mrow><mn>4</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>4</mn><mi>n</mi><mi>k</mi><mo>+</mo><mn>2</mn><mi>n</mi><mo>+</mo><msup><mi>k</mi><mn>2</mn></msup><mo>+</mo><mi>k</mi></mrow><mn>2</mn></mfrac><mtext> mod </mtext><mi>n</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mn>2</mn><msup><mi>n</mi><mn>2</mn></msup><mo>+</mo><mn>2</mn><mi>n</mi><mi>k</mi><mo>+</mo><mn>2</mn><mi>n</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mfrac><mrow><msup><mi>k</mi><mn>2</mn></msup><mo>+</mo><mi>k</mi></mrow><mn>2</mn></mfrac><mtext> mod </mtext><mi>n</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle \\frac{(2n+k)^2 + (2n+k)}{2} \\space \\text{mod} \\space n = \\frac{4n^2+4nk+2n+k^2+k}{2} \\space \\text{mod} \\space n = (2n^2+2nk+2n) + \\frac{k^2+k}{2} \\space \\text{mod} \\space n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\"><span class=\"mclose\">)</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\"> </span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">4</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\"> </span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1141079999999999em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\"> </span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span></span></span></span><br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mo>=</mo><mfrac><mrow><msup><mi>k</mi><mn>2</mn></msup><mo>+</mo><mi>k</mi></mrow><mn>2</mn></mfrac><mtext> mod </mtext><mi>n</mi></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle = \\frac{k^2+k}{2} \\space \\text{mod} \\space n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.177108em;vertical-align:-0.686em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.491108em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">2</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\"> </span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span></span></span></span>, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">(2n+k) = k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> in this function when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>mod </mtext><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">\\text{mod} \\space n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord mathnormal\">n</span></span></span></span>.</p>\n<p>So the solution is to try the first <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>i</mi><mi>n</mi><mo stretchy=\"false\">(</mo><mn>2</mn><mi>n</mi><mo separator=\"true\">,</mo><mi>p</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">min(2n, p)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">n</span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mclose\">)</span></span></span></span> numbers… how disappointing :/<br>\nTo be honest, I don’t know how to make sure I can solve questions like this next time, maybe just practice more…<br>\nCode</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, x, p;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; x &gt;&gt; p;</span><br><span class=\"line\">    <span class=\"type\">int</span> want = (n - x) % n;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"built_in\">min</span>(<span class=\"number\">2</span> * n, p); i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(((i * i + i) / <span class=\"number\">2</span>) % n == want) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1081a-the-very-beautiful-blanket\"><a href=\"https://codeforces.com/contest/1801/problem/A\">CF 1081A. The Very Beautiful Blanket</a></h2>\n<p>I already encounter this question a long ago, but this was a really telepathic constructing problem.<br>\nThe solution is just to construct 2x2s by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">4i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\">i</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">4i+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mi>i</mi><mo>+</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">4i+2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mi>i</mi><mo>+</mo><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">4i+3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.74285em;vertical-align:-0.08333em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>. It’s magic that is actually works in my opinion.<br>\nNot sure how would I come up with this on my own, so uh lets just check out my code lol<br>\nCode</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[<span class=\"number\">256</span>][<span class=\"number\">256</span>] = &#123;<span class=\"number\">0</span>&#125;;</span><br><span class=\"line\">    <span class=\"type\">int</span> cntr = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">256</span>; i += <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">256</span>; j += <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">            arr[i][j] = cntr;</span><br><span class=\"line\">            arr[i][j + <span class=\"number\">1</span>] = cntr + <span class=\"number\">1</span>;</span><br><span class=\"line\">            arr[i + <span class=\"number\">1</span>][j] = cntr + <span class=\"number\">2</span>;</span><br><span class=\"line\">            arr[i + <span class=\"number\">1</span>][j + <span class=\"number\">1</span>] = cntr + <span class=\"number\">3</span>;</span><br><span class=\"line\">            cntr += <span class=\"number\">4</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">        cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">        cout &lt;&lt; n * m &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</span><br><span class=\"line\">                cout &lt;&lt; arr[i][j] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cout &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nm)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1731d-valiant-s-new-map\"><a href=\"https://codeforces.com/contest/1731/problem/D\">CF 1731D. Valiant’s New Map</a></h2>\n<p>Finally a question I fully solved myself! (1700 too lol)</p>\n<p>The question is for each test case <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>≤</mo><mi>t</mi><mo>≤</mo><mn>1000</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(1 \\leq t \\leq 1000)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span>, you want to find the maximum <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> such that<br>\nyou can find a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mo>×</mo><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l \\times l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> square in a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>⋅</mo><mi>m</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mn>1</mn><mo>≤</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo>≤</mo><mn>200</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">n \\cdot m \\space (1 \\leq n, m \\leq 200)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.44445em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8304100000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> grid where every element is greater or equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span>.</p>\n<p>Well, a easy idea is to binary search <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span>, enumerate through every square and do 2D range min queries!<br>\nThis is just a basic binary search + 2D range min query right? 2D sparse table lets gooooo!<br>\nFunnily enough, 2D ST is actually a solution that was given in the tutorial (albeit a bit overkill),<br>\nand 2D segtree actually wouldn’t pass due to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>+</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>m</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn+logm)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span></span></span></span> each query.</p>\n<p>Lets try to solve it in an elegant manner instead of overkilling with weird data structures!<br>\nOf course when talking about 2D queries, you would recall that you could do 2D prefix arrays.<br>\nBut thats for 2D range sum queries, how to we transform the question into checking range sums?<br>\nNotice that if we let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mo>=</mo><mi>l</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">arr[i] = (arr[i] &gt;= l)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mclose\">)</span></span></span></span>, we would get a array with only zeros and ones,<br>\nthen if we do prefix sum, a query that equals to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mo>×</mo><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l \\times l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> means that every element inside is greater or equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span>!</p>\n<p>Code</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n, m;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">func</span><span class=\"params\">(vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; vec, <span class=\"type\">int</span> val)</span></span>&#123;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">pre</span>(n + <span class=\"number\">1</span>, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(m + <span class=\"number\">1</span>, <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; j &lt;= m; j++) &#123;</span><br><span class=\"line\">            pre[i][j] = pre[i - <span class=\"number\">1</span>][j] + pre[i][j - <span class=\"number\">1</span>] - pre[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] + (vec[i - <span class=\"number\">1</span>][j - <span class=\"number\">1</span>] &gt;= val);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = val; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = val; j &lt;= m; j++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> sum = pre[i][j] - pre[i][j - val] - pre[i - val][j] + pre[i - val][j - val];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(sum == val * val) <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt; <span class=\"built_in\">vec</span>(n, <span class=\"built_in\">vector</span>&lt;<span class=\"type\">int</span>&gt;(m, <span class=\"number\">0</span>));</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"number\">0</span>, r = <span class=\"built_in\">min</span>(n, m);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; m; j++) &#123;</span><br><span class=\"line\">            cin &gt;&gt; vec[i][j];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r - l &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> mid = (r + l) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"built_in\">func</span>(vec, mid)) &#123;</span><br><span class=\"line\">            l = mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            r = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(<span class=\"built_in\">func</span>(vec, r)) &#123;</span><br><span class=\"line\">        cout &lt;&lt; r &lt;&lt; endl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; l &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>m</mi><mo>⋅</mo><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mtext>min</mtext><mo stretchy=\"false\">(</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nm \\cdot log(\\text{min}(n, m)))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen\">(</span><span class=\"mord text\"><span class=\"mord\">min</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>Pretty elegant solution right?</p>\n<h2 id=\"cf-1114c-trailing-loves-or-l-oeufs\"><a href=\"https://codeforces.com/contest/1114/problem/C\">CF 1114C. Trailing Loves (or L’oeufs?)</a></h2>\n<p>This problem is super hard for me… pure math is just death for me XD</p>\n<p>The problem is to find the number of trailing zero digits when representing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo stretchy=\"false\">!</mo><mtext> </mtext><mo stretchy=\"false\">(</mo><mn>1</mn><mo>≤</mo><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>18</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">n! \\space (1 \\leq n \\leq 10^{18})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> in base <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi><mtext> </mtext><mo stretchy=\"false\">(</mo><mn>2</mn><mo>≤</mo><mi>b</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>12</mn></msup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">b \\space (2 \\leq b \\leq 10^{12})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\"> </span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>.<br>\nIt is also equivalent to finding the max <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo stretchy=\"false\">!</mo></mrow><annotation encoding=\"application/x-tex\">n!</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span></span></span></span> is divisible by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>b</mi><mi>r</mi></msup></mrow><annotation encoding=\"application/x-tex\">b^r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span></span></span></span></span></span></span>. (Makes alot of sense if you think about it).<br>\nWell, the observations above are still pretty reasonable, but <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo stretchy=\"false\">!</mo></mrow><annotation encoding=\"application/x-tex\">n!</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span></span></span></span> is a super big number! how do we do this?<br>\nApparently, there is an exact formula dealing with this problem: <a href=\"https://artofproblemsolving.com/wiki/index.php/Legendre%27s_Formula#Olympiad\">Legendre’s Formula</a><br>\nThe formula states that the largest <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> such that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo stretchy=\"false\">!</mo></mrow><annotation encoding=\"application/x-tex\">n!</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span></span></span></span> is divisible by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>p</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">p^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.858832em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span> is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munderover><mo>∑</mo><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mo stretchy=\"false\">⌊</mo><mfrac><mi>n</mi><msup><mi>p</mi><mi>i</mi></msup></mfrac><mo stretchy=\"false\">⌋</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle \\sum_{i-1}^{\\infty} \\lfloor \\frac{n}{p^i} \\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9873970000000005em;vertical-align:-1.336em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.8723309999999997em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.336em;\"><span></span></span></span></span></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.750664em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804400000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span></span></span></span>.<br>\nI was confused by this formula at first, but it made sense after some thinking:<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo stretchy=\"false\">!</mo><mo>=</mo><mn>1</mn><mo>⋅</mo><mn>2</mn><mo>⋅</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n! = 1 \\cdot 2 \\cdot ... n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord mathnormal\">n</span></span></span></span>, how many numbers between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> are divisible by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>? <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">⌊</mo><mfrac><mi>n</mi><mi>p</mi></mfrac><mo stretchy=\"false\">⌋</mo></mrow><annotation encoding=\"application/x-tex\">\\lfloor \\frac{n}{p} \\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.2311079999999999em;vertical-align:-0.481108em;\"></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.695392em;\"><span style=\"top:-2.6550000000000002em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.481108em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span></span></span></span> numbers.<br>\nNow we counted the numbers divisible by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span>, but we only counted the numbers divisible by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>p</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">p^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.008548em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> once when they should contribute twice. So what we do is do this for every power of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">p</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span></span></span></span> and sum up the values to get what we want.<br>\nThe formula requires the base <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> to be prime though, while we have any number in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>2</mn><mo separator=\"true\">,</mo><mn>1</mn><msup><mn>0</mn><mn>12</mn></msup><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[2, 10^{12}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span>.<br>\nWhat we can do is to prime factorize <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msubsup><mi>p</mi><mn>1</mn><msub><mi>x</mi><mn>1</mn></msub></msubsup><mo>⋅</mo><msubsup><mi>p</mi><mn>2</mn><msub><mi>x</mi><mn>2</mn></msub></msubsup><mo>⋅</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><msubsup><mi>p</mi><mi>k</mi><msub><mi>x</mi><mi>k</mi></msub></msubsup></mrow><annotation encoding=\"application/x-tex\">p_1^{x_1} \\cdot p_2^{x_2} \\cdot ... p_k^{x_k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0126em;vertical-align:-0.266308em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.746292em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span><span style=\"top:-3.1449000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.266308em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0126em;vertical-align:-0.266308em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.746292em;\"><span style=\"top:-2.433692em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span><span style=\"top:-3.1449000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31731428571428577em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.266308em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0533599999999999em;vertical-align:-0.3013079999999999em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.7520519999999999em;\"><span style=\"top:-2.3986920000000005em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span><span style=\"top:-3.1506600000000002em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3448em;\"><span style=\"top:-2.3487714285714287em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15122857142857138em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3013079999999999em;\"><span></span></span></span></span></span></span></span></span></span> and apply the formula with every prime factor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">p_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> to obtain <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>e</mi><msub><mi>p</mi><mi>i</mi></msub></msub><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">!</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">e_{p_i}(n!)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.036108em;vertical-align:-0.286108em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15139200000000003em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3280857142857143em;\"><span style=\"top:-2.357em;margin-left:0em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.143em;\"><span></span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.286108em;\"><span></span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">!</span><span class=\"mclose\">)</span></span></span></span>.<br>\nFinally, we can get the answer for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span> by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mtext>min</mtext><mo stretchy=\"false\">(</mo><mfrac><msub><mi>y</mi><mi>i</mi></msub><msub><mi>x</mi><mi>i</mi></msub></mfrac><mo stretchy=\"false\">)</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle \\text{min}(\\frac{y_i}{x_i})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.94356em;vertical-align:-0.8360000000000001em;\"></span><span class=\"mord text\"><span class=\"mord\">min</span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.1075599999999999em;\"><span style=\"top:-2.3139999999999996em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8360000000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span></span></span></span>.</p>\n<p>Code</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, b;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; b;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; p;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; times;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">2</span>; i * i &lt;= b; i++) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// factorize b;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(b == <span class=\"number\">1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(b % i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(!p.<span class=\"built_in\">size</span>() <span class=\"built_in\">or</span> (p.<span class=\"built_in\">size</span>() <span class=\"keyword\">and</span> p[p.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>] != i)) &#123;</span><br><span class=\"line\">                p.<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">                times.<span class=\"built_in\">pb</span>(<span class=\"number\">0</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            b /= i;</span><br><span class=\"line\">            times[times.<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(b != <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        p.<span class=\"built_in\">pb</span>(b);</span><br><span class=\"line\">        times.<span class=\"built_in\">pb</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">5000000000000000000ll</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; p.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> p_i = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">1</span>; p_i &lt;= n / p[i]; j++) &#123;</span><br><span class=\"line\">            p_i *= p[i];</span><br><span class=\"line\">            cnt += (n / p_i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ans = <span class=\"built_in\">min</span>(ans, (cnt / times[i]));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>The code also had alot of specific parts that needed some attention when writing, I realized that 0x3f3f3f3f only equals to around <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo>⋅</mo><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup></mrow><annotation encoding=\"application/x-tex\">2 \\cdot 10^9</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span></span></span></span>, which is not enough for this question.<br>\nAnother thing was deciding the bound for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munderover><mo>∑</mo><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow><mi mathvariant=\"normal\">∞</mi></munderover><mo stretchy=\"false\">⌊</mo><mfrac><mi>n</mi><msup><mi>p</mi><mi>i</mi></msup></mfrac><mo stretchy=\"false\">⌋</mo></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle \\sum_{i-1}^{\\infty} \\lfloor \\frac{n}{p^i} \\rfloor</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:2.9873970000000005em;vertical-align:-1.336em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6513970000000002em;\"><span style=\"top:-1.8723309999999997em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.300005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">∞</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.336em;\"><span></span></span></span></span></span><span class=\"mopen\">⌊</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.750664em;\"><span style=\"top:-2.9890000000000003em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804400000000001em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">⌋</span></span></span></span>. I wrote <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>p</mi><mi>i</mi></msub><mo>≤</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">p_i \\leq n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8304100000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, but this actually causes overflow, you need to change to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><msub><mi>p</mi><mi>i</mi></msub><mo>≤</mo><mfrac><mi>n</mi><mrow><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow></mfrac></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle p_i \\leq \\frac{n}{p[i]}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8304100000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.0435600000000003em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.10756em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span> to prevent overflow from happening.</p>\n<p>This was a really interesting question that troubled me alot, really shows that I need to up my math game.</p>\n"},{"title":"One month... what now?","date":"2023-09-28T16:56:53.000Z","_content":"Time flies! It's already been one month since I came to the US. Things are going pretty smooth except that im too introverted to make friends in my dorm floor. But no worries! I still have a couple of friends and I plan to make more!\nNow lets give an update to various aspects of my life:\n\n### Research\n\nThis is one of the more unfortunate things. Skunkworks forgot to put me in the list in summer, and all researches were already full. I was pretty disappointed not gonna lie, but this also gave me a chance to focus 100% on CP, so maybe not the worst thing that could happen!\n\n### Academics\n\nI currently have 6 classes: MUSIC 113, CS 300, CS 252, LIS 202, PHYSICS 107, ART 100.\nMUSIC 113 is pretty free with basically no workload so it's fine.\nCS 300 is pretty doable apart from multiple choices (I don't know java), but A is still managable.\nCS 252 is the one I am more worried about, 4 exams in total and getting A is kinda tight, but 44% got A before so I think I could get A with a bit studying.\nLIS 202 is pretty free too apart from a few writings and readings.\nPHYSICS 107 is also free. No homework no tests only a few writings.\nART 100 has a heavy workload, but if you do them all you can get an easy A.\n\nI'm actually starting to feel the pressure now, because I have alot of things that have a pretty close due date, but I also want to train CP!\n\n### CP\n\nMy teammates for ICPC are quite promising, including one IOI guy (although he didn't do cp in college afterwards till now), and one that got into NAC last year.\nOur main enemys are Sepled's team and mewnian's vietnam team. I'm not sure if we are capable of defeating them as they are really strong but I will certainly try my best.\n\nI've done 2 contests during September (till now), and I got +134 rating in total. I did really well in round 897, solving A,B,C,E1,E2 and got ranked in sub-400, very cool! In contrast, I only solved A,B,C in 899 unfortunately, though I was fast enough to still get +10 rating. It seems that im not really good with rerooting dp (or dp in general haha), so I might need to work on that...\n\nI have made some goals for my freshman year, we will see if I success or not!\n\n1. CF Master rank in freshman year\n2. ICPC Regional Gold\n3. 4.0 GPA freshman year\n\nAlso, congrats for my friend lemonilemon for getting rank 108 and reaching CM, hope I can get to CM soon!\n","source":"_posts/One-month-what-now.md","raw":"---\ntitle: One month... what now?\ndate: 2023-09-28 11:56:53\ntags: \"Life\"\n---\nTime flies! It's already been one month since I came to the US. Things are going pretty smooth except that im too introverted to make friends in my dorm floor. But no worries! I still have a couple of friends and I plan to make more!\nNow lets give an update to various aspects of my life:\n\n### Research\n\nThis is one of the more unfortunate things. Skunkworks forgot to put me in the list in summer, and all researches were already full. I was pretty disappointed not gonna lie, but this also gave me a chance to focus 100% on CP, so maybe not the worst thing that could happen!\n\n### Academics\n\nI currently have 6 classes: MUSIC 113, CS 300, CS 252, LIS 202, PHYSICS 107, ART 100.\nMUSIC 113 is pretty free with basically no workload so it's fine.\nCS 300 is pretty doable apart from multiple choices (I don't know java), but A is still managable.\nCS 252 is the one I am more worried about, 4 exams in total and getting A is kinda tight, but 44% got A before so I think I could get A with a bit studying.\nLIS 202 is pretty free too apart from a few writings and readings.\nPHYSICS 107 is also free. No homework no tests only a few writings.\nART 100 has a heavy workload, but if you do them all you can get an easy A.\n\nI'm actually starting to feel the pressure now, because I have alot of things that have a pretty close due date, but I also want to train CP!\n\n### CP\n\nMy teammates for ICPC are quite promising, including one IOI guy (although he didn't do cp in college afterwards till now), and one that got into NAC last year.\nOur main enemys are Sepled's team and mewnian's vietnam team. I'm not sure if we are capable of defeating them as they are really strong but I will certainly try my best.\n\nI've done 2 contests during September (till now), and I got +134 rating in total. I did really well in round 897, solving A,B,C,E1,E2 and got ranked in sub-400, very cool! In contrast, I only solved A,B,C in 899 unfortunately, though I was fast enough to still get +10 rating. It seems that im not really good with rerooting dp (or dp in general haha), so I might need to work on that...\n\nI have made some goals for my freshman year, we will see if I success or not!\n\n1. CF Master rank in freshman year\n2. ICPC Regional Gold\n3. 4.0 GPA freshman year\n\nAlso, congrats for my friend lemonilemon for getting rank 108 and reaching CM, hope I can get to CM soon!\n","slug":"One-month-what-now","published":1,"updated":"2024-12-26T01:29:58.480Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblh40010b0u9a7o1atyl","content":"<p>Time flies! It’s already been one month since I came to the US. Things are going pretty smooth except that im too introverted to make friends in my dorm floor. But no worries! I still have a couple of friends and I plan to make more!<br>\nNow lets give an update to various aspects of my life:</p>\n<h3 id=\"research\">Research</h3>\n<p>This is one of the more unfortunate things. Skunkworks forgot to put me in the list in summer, and all researches were already full. I was pretty disappointed not gonna lie, but this also gave me a chance to focus 100% on CP, so maybe not the worst thing that could happen!</p>\n<h3 id=\"academics\">Academics</h3>\n<p>I currently have 6 classes: MUSIC 113, CS 300, CS 252, LIS 202, PHYSICS 107, ART 100.<br>\nMUSIC 113 is pretty free with basically no workload so it’s fine.<br>\nCS 300 is pretty doable apart from multiple choices (I don’t know java), but A is still managable.<br>\nCS 252 is the one I am more worried about, 4 exams in total and getting A is kinda tight, but 44% got A before so I think I could get A with a bit studying.<br>\nLIS 202 is pretty free too apart from a few writings and readings.<br>\nPHYSICS 107 is also free. No homework no tests only a few writings.<br>\nART 100 has a heavy workload, but if you do them all you can get an easy A.</p>\n<p>I’m actually starting to feel the pressure now, because I have alot of things that have a pretty close due date, but I also want to train CP!</p>\n<h3 id=\"cp\">CP</h3>\n<p>My teammates for ICPC are quite promising, including one IOI guy (although he didn’t do cp in college afterwards till now), and one that got into NAC last year.<br>\nOur main enemys are Sepled’s team and mewnian’s vietnam team. I’m not sure if we are capable of defeating them as they are really strong but I will certainly try my best.</p>\n<p>I’ve done 2 contests during September (till now), and I got +134 rating in total. I did really well in round 897, solving A,B,C,E1,E2 and got ranked in sub-400, very cool! In contrast, I only solved A,B,C in 899 unfortunately, though I was fast enough to still get +10 rating. It seems that im not really good with rerooting dp (or dp in general haha), so I might need to work on that…</p>\n<p>I have made some goals for my freshman year, we will see if I success or not!</p>\n<ol>\n<li>CF Master rank in freshman year</li>\n<li>ICPC Regional Gold</li>\n<li>4.0 GPA freshman year</li>\n</ol>\n<p>Also, congrats for my friend lemonilemon for getting rank 108 and reaching CM, hope I can get to CM soon!</p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>Time flies! It’s already been one month since I came to the US. Things are going pretty smooth except that im too introverted to make friends in my dorm floor. But no worries! I still have a couple of friends and I plan to make more!<br>\nNow lets give an update to various aspects of my life:</p>\n<h3 id=\"research\">Research</h3>\n<p>This is one of the more unfortunate things. Skunkworks forgot to put me in the list in summer, and all researches were already full. I was pretty disappointed not gonna lie, but this also gave me a chance to focus 100% on CP, so maybe not the worst thing that could happen!</p>\n<h3 id=\"academics\">Academics</h3>\n<p>I currently have 6 classes: MUSIC 113, CS 300, CS 252, LIS 202, PHYSICS 107, ART 100.<br>\nMUSIC 113 is pretty free with basically no workload so it’s fine.<br>\nCS 300 is pretty doable apart from multiple choices (I don’t know java), but A is still managable.<br>\nCS 252 is the one I am more worried about, 4 exams in total and getting A is kinda tight, but 44% got A before so I think I could get A with a bit studying.<br>\nLIS 202 is pretty free too apart from a few writings and readings.<br>\nPHYSICS 107 is also free. No homework no tests only a few writings.<br>\nART 100 has a heavy workload, but if you do them all you can get an easy A.</p>\n<p>I’m actually starting to feel the pressure now, because I have alot of things that have a pretty close due date, but I also want to train CP!</p>\n<h3 id=\"cp\">CP</h3>\n<p>My teammates for ICPC are quite promising, including one IOI guy (although he didn’t do cp in college afterwards till now), and one that got into NAC last year.<br>\nOur main enemys are Sepled’s team and mewnian’s vietnam team. I’m not sure if we are capable of defeating them as they are really strong but I will certainly try my best.</p>\n<p>I’ve done 2 contests during September (till now), and I got +134 rating in total. I did really well in round 897, solving A,B,C,E1,E2 and got ranked in sub-400, very cool! In contrast, I only solved A,B,C in 899 unfortunately, though I was fast enough to still get +10 rating. It seems that im not really good with rerooting dp (or dp in general haha), so I might need to work on that…</p>\n<p>I have made some goals for my freshman year, we will see if I success or not!</p>\n<ol>\n<li>CF Master rank in freshman year</li>\n<li>ICPC Regional Gold</li>\n<li>4.0 GPA freshman year</li>\n</ol>\n<p>Also, congrats for my friend lemonilemon for getting rank 108 and reaching CM, hope I can get to CM soon!</p>\n"},{"title":"Paper Reading 1: AlexNet, VGG and U-Net","date":"2024-02-24T22:28:26.000Z","_content":"For the first week of my goal of reading AI paper, I chose three very classic CV papers to read from. Lets see what we can learn from reading these very old yet groundbreaking papers!\n\nI'll roughly talk about the main important parts of the papers and add my own thoughts and opinions. Details can be found in the original paper that I've linked in the title.\n\n## [ImageNet Classification with Deep Convolutional Neural Networks (2012)](https://papers.nips.cc/paper_files/paper/2012/file/c399862d3b9d6b76c8436e924a68c45b-Paper.pdf)\n\nThis is the paper about the well-known model \"AlexNet\". I would say this is one of the most influential CV papers of all time. This is the first paper that really showed the world what large scale Convolution Neural Networks can do, and also mentioned several techniques that are used even today.\n\n### Dataset for AlexNet\n\nAn important background to note about this paper is the existence of ImageNet, a large scale image database with over 15 milion labeled high-res images in over 22000 categories.\n\nPrior to these big datasets, there were only small dataset that were not enough data to train a \"large\" CNN model like AlexNet.\n\n### ReLU Nonlinearity\n\nOne big contribution about AlexNet is choosing ReLU instead of the more common non-linear functions like tanh or sigmoid as its output function (which we like to call activation functions today). According to the paper, this change enabled around 25% faster convergence speed compared to tanh.\n\n### Multi GPU Training\n\nSince AlexNet was so big, they used multiple GPUs to train their models, which is also something common with todays huge models.\n\n### Local Responce Normalization (LRN)\n\nThis was a normalization technique introduced in this paper. The idea is similar to lateral inhibition in biological systems, where it amplifies the strong responces by damping the neighbors.\n\nDo note that this method of normalization isn't being used alot in recent years, with it being overshadowed by more popular techniques like Batch Normalization, but its still an interesting idea to learn from.\n\n### Overlapping Pooling\n\nIn this paper they used max pooling in certain layers. Pooling before this paper usually used non-overlapping pooling, but according to this paper, making the pooling overlap can reduce the error rates and that they observed the model is harder to overfit with overlapping pooling.\n\nOverlapping pooling is also quite the norm in recent years, at least I was really suprised to know that they didn't do overlapping pooling before.\n\n### Reducing Overfitting\n\nIn the paper, they mentioned two tricks they employed that reduced overfitting. These two methods are also used alot even today.\n\n#### Data Augmentation\n\nThe main augmentation used is image translation and horizontal reflection. They extracted random patches from the images and also flipped them, which in total increases the size of the dataset by 2048. During testing, they do the same thing to the testing image, and average the predictions made on each patches, which is something I don't think we do now.\n\nSecondly, they also alter the intensities of the RGB channels in the images, which is also quite common now.\n\n#### Drop Out\n\nThey also employed a famous technique called drop out, which randomly drops out neurons during training, and this forces the model to be more robust and not rely on certain neurons.\n\nSomething interesting is that they chose a 50% chance to drop out a neuron. During testing, they would multiply the output with 0.5 to make an approximation of the loss from the drop out. I think what we usually do now is scale the remaining neurons up to make the expectaion the same as before.\n\n### Other Details and Discussion\n\nIn the paper, they concluded the depth of the model is extremely important, and even just removing one layer made the performance drop drastically.\n\nThey chose to use stochastic gradient descent with batch size 128, momentum 0.9, weight decay of 0.0005. They concluded that the weight decay was important for the model to learn. (Note: Adam was published at 2014)\nThey also used a fixed learning rate, only scaling it by 1/10 when the validation learning rate stopped improving. The whole model took 6 days on a GTX 580 3GB.\n\n## [Very Deep Convolutional Networks for Large-Scale Image Recognition (2014)](https://arxiv.org/pdf/1409.1556.pdf)\n\nThis paper is the paper for famous VGG model, where it kinda developed a systematic way to build CNNs, and shown the world how important depth is for a model.\n\n### 3 x 3 Convolutions\n\nAccording to the paper, a 3x3 convolution is the smallest size to cature the notion of left/right, up/down and center. They discovered that not only you can stack 3x3 convolutions to have the same effective receptive field as larger convolutions (two 3x3 is the same as a 5x5), you can even achieve a higher accuracy due to incoporating more non-linearity in between the convolutions (deep with small filters > shallow but large fillers). Futhermore, stacking small filters decreases the model's parameters (three 3x3 with $c$ channels has $3 \\cdot (3^2c^2) = 27c^2$ params, while one 7x7 with $c$ channels has $7^2c = 49c^2$ params), which makes training cheaper.\n\nHowever, they also tested models that incorporated 1x1 convolutions (Used in Network in Network (NiN)), but performs worse than the 3x3 counterpart, which suggests that non-linearity is important, but so is capturing spatial context.\n\n### Scale Jittering\n\nThey also mentioned an interesting augmentation idea, which is randomly scaling the images and cropping them.They did two tests, one is scaling the images to a fixed size, the second one is scaling the images to [256, 512], and then cropping the image. They found out that doing scale jittering at training time did lead to significantly better results than fixing the size, even when the fixed scale is used in test time.\n\nThey also tested scale jittering during test time, and while it was better than fixed, they suspected was due to a different treatment of boundary conditions, and their combination outperforms both of them.\n\n### Other Details and Discussion\n\nThey also tested AlexNet's LRN, but found that it didn't have much improvement compared to the models that didn't employ this technique.\n\nThey also didn't sample multiple crops at the same time like AlexNet did, but I didn't really understand why they said they didn't while I felt like they did :/.\n\nThe rest of the tricks, the batch size, the learning rate and details are all the same as AlexNet, so I won't go over them again.\n\nThe training was done on 4 Titan Black GPUs, and each net took around 2~3 weeks.\n\n## [U-Net: Convolutional Networks for Biomedical Image Segmentation (2015)](https://arxiv.org/pdf/1505.04597.pdf)\n\nThis is the paper for the famous semantic segmentation model U-Net, which has precise localization, and is even used in my research for historical map segmentation.\n\n### Challenges\n\nIt's important to note the challenges behind biomedical image segmentation, and the problems with previous works.\n\nOne of the most difficult problem is the precision required in biomedical images, having precise localization is a must when dealing with medical images that might become a life or death situation. There has been previous attempts to localize and assign each pixel to a class by using a small sliding window and predicting each patch. This method however is too computational heavy, and also loses the whole context of the picture since you are only using a small part of the image.\n\nSecondly, the separation of touching objects of the same classes is also a tricky situation to handle, and their boundaries are really similar and its easy for the model to think that they all belong to one object.\n\n### Architecture\n\nSince the most important part of U-Net is the architecture, I will give a brief explaination of how it works.\n\n![unet](unet.png)\n\nAs you can see in the picture, there are two main paths: The left part is the contraction path (Or encoder in recent terms), where it downsamples the original images, capturing the pictures high-level features.\n\nThe right part is the Expansion path (decoder), where is starts to upsample the feature maps, and also connecting with previous maps from the contraction path (This is actually really similar to skip-connection in ResNet, which I will cover in later readings). This way, the model can localize better while retaining the information of high-level features.\n\nAlso notice that the model did not utilize any fully connected layers (or dense layers), which makes this model a fully convolutional network, that is said to be able to enable seemless segmentation of arbitrarily large images.\n\n### Loss\n\nIn order to combat the boundary problem, they used a weighted soft-max + cross entropy loss to penalize wrong border assigning.\n\nRecent days we will tend to use Dice Loss or focal loss, which usually has better effects accoring to my own experience.\n\n### Data Augmentation\n\nData augmentation was also an important part of medical image segmentation, as often only few training images are availiable. The augmentation they chose is shift and rotation, as well as elastic deformation and gray scale variations. According to the paper, these augmentations contributed massively to their success.\n\n## Final Words\n\nThis week I read the three aforementioned papers, and its honestly really fascinating to see some of the techniques that we are still using to this day, while some ideas and questions have better solutions now. Also, reading papers isn't as difficult as I thought, although I think maybe this is because im quite familiar with these models and methods. All in all, I really enjoyed reading these papers, and we'll see whats coming up next!\n","source":"_posts/Paper-Reading-1-AlexNet-VGG-and-U-Net.md","raw":"---\ntitle: 'Paper Reading 1: AlexNet, VGG and U-Net'\ndate: 2024-02-24 16:28:26\ntags: [\"AI\"]\n---\nFor the first week of my goal of reading AI paper, I chose three very classic CV papers to read from. Lets see what we can learn from reading these very old yet groundbreaking papers!\n\nI'll roughly talk about the main important parts of the papers and add my own thoughts and opinions. Details can be found in the original paper that I've linked in the title.\n\n## [ImageNet Classification with Deep Convolutional Neural Networks (2012)](https://papers.nips.cc/paper_files/paper/2012/file/c399862d3b9d6b76c8436e924a68c45b-Paper.pdf)\n\nThis is the paper about the well-known model \"AlexNet\". I would say this is one of the most influential CV papers of all time. This is the first paper that really showed the world what large scale Convolution Neural Networks can do, and also mentioned several techniques that are used even today.\n\n### Dataset for AlexNet\n\nAn important background to note about this paper is the existence of ImageNet, a large scale image database with over 15 milion labeled high-res images in over 22000 categories.\n\nPrior to these big datasets, there were only small dataset that were not enough data to train a \"large\" CNN model like AlexNet.\n\n### ReLU Nonlinearity\n\nOne big contribution about AlexNet is choosing ReLU instead of the more common non-linear functions like tanh or sigmoid as its output function (which we like to call activation functions today). According to the paper, this change enabled around 25% faster convergence speed compared to tanh.\n\n### Multi GPU Training\n\nSince AlexNet was so big, they used multiple GPUs to train their models, which is also something common with todays huge models.\n\n### Local Responce Normalization (LRN)\n\nThis was a normalization technique introduced in this paper. The idea is similar to lateral inhibition in biological systems, where it amplifies the strong responces by damping the neighbors.\n\nDo note that this method of normalization isn't being used alot in recent years, with it being overshadowed by more popular techniques like Batch Normalization, but its still an interesting idea to learn from.\n\n### Overlapping Pooling\n\nIn this paper they used max pooling in certain layers. Pooling before this paper usually used non-overlapping pooling, but according to this paper, making the pooling overlap can reduce the error rates and that they observed the model is harder to overfit with overlapping pooling.\n\nOverlapping pooling is also quite the norm in recent years, at least I was really suprised to know that they didn't do overlapping pooling before.\n\n### Reducing Overfitting\n\nIn the paper, they mentioned two tricks they employed that reduced overfitting. These two methods are also used alot even today.\n\n#### Data Augmentation\n\nThe main augmentation used is image translation and horizontal reflection. They extracted random patches from the images and also flipped them, which in total increases the size of the dataset by 2048. During testing, they do the same thing to the testing image, and average the predictions made on each patches, which is something I don't think we do now.\n\nSecondly, they also alter the intensities of the RGB channels in the images, which is also quite common now.\n\n#### Drop Out\n\nThey also employed a famous technique called drop out, which randomly drops out neurons during training, and this forces the model to be more robust and not rely on certain neurons.\n\nSomething interesting is that they chose a 50% chance to drop out a neuron. During testing, they would multiply the output with 0.5 to make an approximation of the loss from the drop out. I think what we usually do now is scale the remaining neurons up to make the expectaion the same as before.\n\n### Other Details and Discussion\n\nIn the paper, they concluded the depth of the model is extremely important, and even just removing one layer made the performance drop drastically.\n\nThey chose to use stochastic gradient descent with batch size 128, momentum 0.9, weight decay of 0.0005. They concluded that the weight decay was important for the model to learn. (Note: Adam was published at 2014)\nThey also used a fixed learning rate, only scaling it by 1/10 when the validation learning rate stopped improving. The whole model took 6 days on a GTX 580 3GB.\n\n## [Very Deep Convolutional Networks for Large-Scale Image Recognition (2014)](https://arxiv.org/pdf/1409.1556.pdf)\n\nThis paper is the paper for famous VGG model, where it kinda developed a systematic way to build CNNs, and shown the world how important depth is for a model.\n\n### 3 x 3 Convolutions\n\nAccording to the paper, a 3x3 convolution is the smallest size to cature the notion of left/right, up/down and center. They discovered that not only you can stack 3x3 convolutions to have the same effective receptive field as larger convolutions (two 3x3 is the same as a 5x5), you can even achieve a higher accuracy due to incoporating more non-linearity in between the convolutions (deep with small filters > shallow but large fillers). Futhermore, stacking small filters decreases the model's parameters (three 3x3 with $c$ channels has $3 \\cdot (3^2c^2) = 27c^2$ params, while one 7x7 with $c$ channels has $7^2c = 49c^2$ params), which makes training cheaper.\n\nHowever, they also tested models that incorporated 1x1 convolutions (Used in Network in Network (NiN)), but performs worse than the 3x3 counterpart, which suggests that non-linearity is important, but so is capturing spatial context.\n\n### Scale Jittering\n\nThey also mentioned an interesting augmentation idea, which is randomly scaling the images and cropping them.They did two tests, one is scaling the images to a fixed size, the second one is scaling the images to [256, 512], and then cropping the image. They found out that doing scale jittering at training time did lead to significantly better results than fixing the size, even when the fixed scale is used in test time.\n\nThey also tested scale jittering during test time, and while it was better than fixed, they suspected was due to a different treatment of boundary conditions, and their combination outperforms both of them.\n\n### Other Details and Discussion\n\nThey also tested AlexNet's LRN, but found that it didn't have much improvement compared to the models that didn't employ this technique.\n\nThey also didn't sample multiple crops at the same time like AlexNet did, but I didn't really understand why they said they didn't while I felt like they did :/.\n\nThe rest of the tricks, the batch size, the learning rate and details are all the same as AlexNet, so I won't go over them again.\n\nThe training was done on 4 Titan Black GPUs, and each net took around 2~3 weeks.\n\n## [U-Net: Convolutional Networks for Biomedical Image Segmentation (2015)](https://arxiv.org/pdf/1505.04597.pdf)\n\nThis is the paper for the famous semantic segmentation model U-Net, which has precise localization, and is even used in my research for historical map segmentation.\n\n### Challenges\n\nIt's important to note the challenges behind biomedical image segmentation, and the problems with previous works.\n\nOne of the most difficult problem is the precision required in biomedical images, having precise localization is a must when dealing with medical images that might become a life or death situation. There has been previous attempts to localize and assign each pixel to a class by using a small sliding window and predicting each patch. This method however is too computational heavy, and also loses the whole context of the picture since you are only using a small part of the image.\n\nSecondly, the separation of touching objects of the same classes is also a tricky situation to handle, and their boundaries are really similar and its easy for the model to think that they all belong to one object.\n\n### Architecture\n\nSince the most important part of U-Net is the architecture, I will give a brief explaination of how it works.\n\n![unet](unet.png)\n\nAs you can see in the picture, there are two main paths: The left part is the contraction path (Or encoder in recent terms), where it downsamples the original images, capturing the pictures high-level features.\n\nThe right part is the Expansion path (decoder), where is starts to upsample the feature maps, and also connecting with previous maps from the contraction path (This is actually really similar to skip-connection in ResNet, which I will cover in later readings). This way, the model can localize better while retaining the information of high-level features.\n\nAlso notice that the model did not utilize any fully connected layers (or dense layers), which makes this model a fully convolutional network, that is said to be able to enable seemless segmentation of arbitrarily large images.\n\n### Loss\n\nIn order to combat the boundary problem, they used a weighted soft-max + cross entropy loss to penalize wrong border assigning.\n\nRecent days we will tend to use Dice Loss or focal loss, which usually has better effects accoring to my own experience.\n\n### Data Augmentation\n\nData augmentation was also an important part of medical image segmentation, as often only few training images are availiable. The augmentation they chose is shift and rotation, as well as elastic deformation and gray scale variations. According to the paper, these augmentations contributed massively to their success.\n\n## Final Words\n\nThis week I read the three aforementioned papers, and its honestly really fascinating to see some of the techniques that we are still using to this day, while some ideas and questions have better solutions now. Also, reading papers isn't as difficult as I thought, although I think maybe this is because im quite familiar with these models and methods. All in all, I really enjoyed reading these papers, and we'll see whats coming up next!\n","slug":"Paper-Reading-1-AlexNet-VGG-and-U-Net","published":1,"updated":"2024-12-26T01:29:58.482Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblh50012b0u9ezm96gfa","content":"<p>For the first week of my goal of reading AI paper, I chose three very classic CV papers to read from. Lets see what we can learn from reading these very old yet groundbreaking papers!</p>\n<p>I’ll roughly talk about the main important parts of the papers and add my own thoughts and opinions. Details can be found in the original paper that I’ve linked in the title.</p>\n<h2 id=\"imagenet-classification-with-deep-convolutional-neural-networks-2012\"><a href=\"https://papers.nips.cc/paper_files/paper/2012/file/c399862d3b9d6b76c8436e924a68c45b-Paper.pdf\">ImageNet Classification with Deep Convolutional Neural Networks (2012)</a></h2>\n<p>This is the paper about the well-known model “AlexNet”. I would say this is one of the most influential CV papers of all time. This is the first paper that really showed the world what large scale Convolution Neural Networks can do, and also mentioned several techniques that are used even today.</p>\n<h3 id=\"dataset-for-alexnet\">Dataset for AlexNet</h3>\n<p>An important background to note about this paper is the existence of ImageNet, a large scale image database with over 15 milion labeled high-res images in over 22000 categories.</p>\n<p>Prior to these big datasets, there were only small dataset that were not enough data to train a “large” CNN model like AlexNet.</p>\n<h3 id=\"relu-nonlinearity\">ReLU Nonlinearity</h3>\n<p>One big contribution about AlexNet is choosing ReLU instead of the more common non-linear functions like tanh or sigmoid as its output function (which we like to call activation functions today). According to the paper, this change enabled around 25% faster convergence speed compared to tanh.</p>\n<h3 id=\"multi-gpu-training\">Multi GPU Training</h3>\n<p>Since AlexNet was so big, they used multiple GPUs to train their models, which is also something common with todays huge models.</p>\n<h3 id=\"local-responce-normalization-lrn\">Local Responce Normalization (LRN)</h3>\n<p>This was a normalization technique introduced in this paper. The idea is similar to lateral inhibition in biological systems, where it amplifies the strong responces by damping the neighbors.</p>\n<p>Do note that this method of normalization isn’t being used alot in recent years, with it being overshadowed by more popular techniques like Batch Normalization, but its still an interesting idea to learn from.</p>\n<h3 id=\"overlapping-pooling\">Overlapping Pooling</h3>\n<p>In this paper they used max pooling in certain layers. Pooling before this paper usually used non-overlapping pooling, but according to this paper, making the pooling overlap can reduce the error rates and that they observed the model is harder to overfit with overlapping pooling.</p>\n<p>Overlapping pooling is also quite the norm in recent years, at least I was really suprised to know that they didn’t do overlapping pooling before.</p>\n<h3 id=\"reducing-overfitting\">Reducing Overfitting</h3>\n<p>In the paper, they mentioned two tricks they employed that reduced overfitting. These two methods are also used alot even today.</p>\n<h4 id=\"data-augmentation\">Data Augmentation</h4>\n<p>The main augmentation used is image translation and horizontal reflection. They extracted random patches from the images and also flipped them, which in total increases the size of the dataset by 2048. During testing, they do the same thing to the testing image, and average the predictions made on each patches, which is something I don’t think we do now.</p>\n<p>Secondly, they also alter the intensities of the RGB channels in the images, which is also quite common now.</p>\n<h4 id=\"drop-out\">Drop Out</h4>\n<p>They also employed a famous technique called drop out, which randomly drops out neurons during training, and this forces the model to be more robust and not rely on certain neurons.</p>\n<p>Something interesting is that they chose a 50% chance to drop out a neuron. During testing, they would multiply the output with 0.5 to make an approximation of the loss from the drop out. I think what we usually do now is scale the remaining neurons up to make the expectaion the same as before.</p>\n<h3 id=\"other-details-and-discussion\">Other Details and Discussion</h3>\n<p>In the paper, they concluded the depth of the model is extremely important, and even just removing one layer made the performance drop drastically.</p>\n<p>They chose to use stochastic gradient descent with batch size 128, momentum 0.9, weight decay of 0.0005. They concluded that the weight decay was important for the model to learn. (Note: Adam was published at 2014)<br>\nThey also used a fixed learning rate, only scaling it by 1/10 when the validation learning rate stopped improving. The whole model took 6 days on a GTX 580 3GB.</p>\n<h2 id=\"very-deep-convolutional-networks-for-large-scale-image-recognition-2014\"><a href=\"https://arxiv.org/pdf/1409.1556.pdf\">Very Deep Convolutional Networks for Large-Scale Image Recognition (2014)</a></h2>\n<p>This paper is the paper for famous VGG model, where it kinda developed a systematic way to build CNNs, and shown the world how important depth is for a model.</p>\n<h3 id=\"3-x-3-convolutions\">3 x 3 Convolutions</h3>\n<p>According to the paper, a 3x3 convolution is the smallest size to cature the notion of left/right, up/down and center. They discovered that not only you can stack 3x3 convolutions to have the same effective receptive field as larger convolutions (two 3x3 is the same as a 5x5), you can even achieve a higher accuracy due to incoporating more non-linearity in between the convolutions (deep with small filters &gt; shallow but large fillers). Futhermore, stacking small filters decreases the model’s parameters (three 3x3 with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> channels has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mo>⋅</mo><mo stretchy=\"false\">(</mo><msup><mn>3</mn><mn>2</mn></msup><msup><mi>c</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mn>27</mn><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">3 \\cdot (3^2c^2) = 27c^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> params, while one 7x7 with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> channels has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>7</mn><mn>2</mn></msup><mi>c</mi><mo>=</mo><mn>49</mn><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">7^2c = 49c^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">7</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\">9</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> params), which makes training cheaper.</p>\n<p>However, they also tested models that incorporated 1x1 convolutions (Used in Network in Network (NiN)), but performs worse than the 3x3 counterpart, which suggests that non-linearity is important, but so is capturing spatial context.</p>\n<h3 id=\"scale-jittering\">Scale Jittering</h3>\n<p>They also mentioned an interesting augmentation idea, which is randomly scaling the images and cropping them.They did two tests, one is scaling the images to a fixed size, the second one is scaling the images to [256, 512], and then cropping the image. They found out that doing scale jittering at training time did lead to significantly better results than fixing the size, even when the fixed scale is used in test time.</p>\n<p>They also tested scale jittering during test time, and while it was better than fixed, they suspected was due to a different treatment of boundary conditions, and their combination outperforms both of them.</p>\n<h3 id=\"other-details-and-discussion\">Other Details and Discussion</h3>\n<p>They also tested AlexNet’s LRN, but found that it didn’t have much improvement compared to the models that didn’t employ this technique.</p>\n<p>They also didn’t sample multiple crops at the same time like AlexNet did, but I didn’t really understand why they said they didn’t while I felt like they did :/.</p>\n<p>The rest of the tricks, the batch size, the learning rate and details are all the same as AlexNet, so I won’t go over them again.</p>\n<p>The training was done on 4 Titan Black GPUs, and each net took around 2~3 weeks.</p>\n<h2 id=\"u-net-convolutional-networks-for-biomedical-image-segmentation-2015\"><a href=\"https://arxiv.org/pdf/1505.04597.pdf\">U-Net: Convolutional Networks for Biomedical Image Segmentation (2015)</a></h2>\n<p>This is the paper for the famous semantic segmentation model U-Net, which has precise localization, and is even used in my research for historical map segmentation.</p>\n<h3 id=\"challenges\">Challenges</h3>\n<p>It’s important to note the challenges behind biomedical image segmentation, and the problems with previous works.</p>\n<p>One of the most difficult problem is the precision required in biomedical images, having precise localization is a must when dealing with medical images that might become a life or death situation. There has been previous attempts to localize and assign each pixel to a class by using a small sliding window and predicting each patch. This method however is too computational heavy, and also loses the whole context of the picture since you are only using a small part of the image.</p>\n<p>Secondly, the separation of touching objects of the same classes is also a tricky situation to handle, and their boundaries are really similar and its easy for the model to think that they all belong to one object.</p>\n<h3 id=\"architecture\">Architecture</h3>\n<p>Since the most important part of U-Net is the architecture, I will give a brief explaination of how it works.</p>\n<p><img src=\"unet.png\" alt=\"unet\"></p>\n<p>As you can see in the picture, there are two main paths: The left part is the contraction path (Or encoder in recent terms), where it downsamples the original images, capturing the pictures high-level features.</p>\n<p>The right part is the Expansion path (decoder), where is starts to upsample the feature maps, and also connecting with previous maps from the contraction path (This is actually really similar to skip-connection in ResNet, which I will cover in later readings). This way, the model can localize better while retaining the information of high-level features.</p>\n<p>Also notice that the model did not utilize any fully connected layers (or dense layers), which makes this model a fully convolutional network, that is said to be able to enable seemless segmentation of arbitrarily large images.</p>\n<h3 id=\"loss\">Loss</h3>\n<p>In order to combat the boundary problem, they used a weighted soft-max + cross entropy loss to penalize wrong border assigning.</p>\n<p>Recent days we will tend to use Dice Loss or focal loss, which usually has better effects accoring to my own experience.</p>\n<h3 id=\"data-augmentation\">Data Augmentation</h3>\n<p>Data augmentation was also an important part of medical image segmentation, as often only few training images are availiable. The augmentation they chose is shift and rotation, as well as elastic deformation and gray scale variations. According to the paper, these augmentations contributed massively to their success.</p>\n<h2 id=\"final-words\">Final Words</h2>\n<p>This week I read the three aforementioned papers, and its honestly really fascinating to see some of the techniques that we are still using to this day, while some ideas and questions have better solutions now. Also, reading papers isn’t as difficult as I thought, although I think maybe this is because im quite familiar with these models and methods. All in all, I really enjoyed reading these papers, and we’ll see whats coming up next!</p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>For the first week of my goal of reading AI paper, I chose three very classic CV papers to read from. Lets see what we can learn from reading these very old yet groundbreaking papers!</p>\n<p>I’ll roughly talk about the main important parts of the papers and add my own thoughts and opinions. Details can be found in the original paper that I’ve linked in the title.</p>\n<h2 id=\"imagenet-classification-with-deep-convolutional-neural-networks-2012\"><a href=\"https://papers.nips.cc/paper_files/paper/2012/file/c399862d3b9d6b76c8436e924a68c45b-Paper.pdf\">ImageNet Classification with Deep Convolutional Neural Networks (2012)</a></h2>\n<p>This is the paper about the well-known model “AlexNet”. I would say this is one of the most influential CV papers of all time. This is the first paper that really showed the world what large scale Convolution Neural Networks can do, and also mentioned several techniques that are used even today.</p>\n<h3 id=\"dataset-for-alexnet\">Dataset for AlexNet</h3>\n<p>An important background to note about this paper is the existence of ImageNet, a large scale image database with over 15 milion labeled high-res images in over 22000 categories.</p>\n<p>Prior to these big datasets, there were only small dataset that were not enough data to train a “large” CNN model like AlexNet.</p>\n<h3 id=\"relu-nonlinearity\">ReLU Nonlinearity</h3>\n<p>One big contribution about AlexNet is choosing ReLU instead of the more common non-linear functions like tanh or sigmoid as its output function (which we like to call activation functions today). According to the paper, this change enabled around 25% faster convergence speed compared to tanh.</p>\n<h3 id=\"multi-gpu-training\">Multi GPU Training</h3>\n<p>Since AlexNet was so big, they used multiple GPUs to train their models, which is also something common with todays huge models.</p>\n<h3 id=\"local-responce-normalization-lrn\">Local Responce Normalization (LRN)</h3>\n<p>This was a normalization technique introduced in this paper. The idea is similar to lateral inhibition in biological systems, where it amplifies the strong responces by damping the neighbors.</p>\n<p>Do note that this method of normalization isn’t being used alot in recent years, with it being overshadowed by more popular techniques like Batch Normalization, but its still an interesting idea to learn from.</p>\n<h3 id=\"overlapping-pooling\">Overlapping Pooling</h3>\n<p>In this paper they used max pooling in certain layers. Pooling before this paper usually used non-overlapping pooling, but according to this paper, making the pooling overlap can reduce the error rates and that they observed the model is harder to overfit with overlapping pooling.</p>\n<p>Overlapping pooling is also quite the norm in recent years, at least I was really suprised to know that they didn’t do overlapping pooling before.</p>\n<h3 id=\"reducing-overfitting\">Reducing Overfitting</h3>\n<p>In the paper, they mentioned two tricks they employed that reduced overfitting. These two methods are also used alot even today.</p>\n<h4 id=\"data-augmentation\">Data Augmentation</h4>\n<p>The main augmentation used is image translation and horizontal reflection. They extracted random patches from the images and also flipped them, which in total increases the size of the dataset by 2048. During testing, they do the same thing to the testing image, and average the predictions made on each patches, which is something I don’t think we do now.</p>\n<p>Secondly, they also alter the intensities of the RGB channels in the images, which is also quite common now.</p>\n<h4 id=\"drop-out\">Drop Out</h4>\n<p>They also employed a famous technique called drop out, which randomly drops out neurons during training, and this forces the model to be more robust and not rely on certain neurons.</p>\n<p>Something interesting is that they chose a 50% chance to drop out a neuron. During testing, they would multiply the output with 0.5 to make an approximation of the loss from the drop out. I think what we usually do now is scale the remaining neurons up to make the expectaion the same as before.</p>\n<h3 id=\"other-details-and-discussion\">Other Details and Discussion</h3>\n<p>In the paper, they concluded the depth of the model is extremely important, and even just removing one layer made the performance drop drastically.</p>\n<p>They chose to use stochastic gradient descent with batch size 128, momentum 0.9, weight decay of 0.0005. They concluded that the weight decay was important for the model to learn. (Note: Adam was published at 2014)<br>\nThey also used a fixed learning rate, only scaling it by 1/10 when the validation learning rate stopped improving. The whole model took 6 days on a GTX 580 3GB.</p>\n<h2 id=\"very-deep-convolutional-networks-for-large-scale-image-recognition-2014\"><a href=\"https://arxiv.org/pdf/1409.1556.pdf\">Very Deep Convolutional Networks for Large-Scale Image Recognition (2014)</a></h2>\n<p>This paper is the paper for famous VGG model, where it kinda developed a systematic way to build CNNs, and shown the world how important depth is for a model.</p>\n<h3 id=\"3-x-3-convolutions\">3 x 3 Convolutions</h3>\n<p>According to the paper, a 3x3 convolution is the smallest size to cature the notion of left/right, up/down and center. They discovered that not only you can stack 3x3 convolutions to have the same effective receptive field as larger convolutions (two 3x3 is the same as a 5x5), you can even achieve a higher accuracy due to incoporating more non-linearity in between the convolutions (deep with small filters &gt; shallow but large fillers). Futhermore, stacking small filters decreases the model’s parameters (three 3x3 with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> channels has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn><mo>⋅</mo><mo stretchy=\"false\">(</mo><msup><mn>3</mn><mn>2</mn></msup><msup><mi>c</mi><mn>2</mn></msup><mo stretchy=\"false\">)</mo><mo>=</mo><mn>27</mn><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">3 \\cdot (3^2c^2) = 27c^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">7</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> params, while one 7x7 with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> channels has <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>7</mn><mn>2</mn></msup><mi>c</mi><mo>=</mo><mn>49</mn><msup><mi>c</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">7^2c = 49c^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">7</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">c</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mord\">9</span><span class=\"mord\"><span class=\"mord mathnormal\">c</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span> params), which makes training cheaper.</p>\n<p>However, they also tested models that incorporated 1x1 convolutions (Used in Network in Network (NiN)), but performs worse than the 3x3 counterpart, which suggests that non-linearity is important, but so is capturing spatial context.</p>\n<h3 id=\"scale-jittering\">Scale Jittering</h3>\n<p>They also mentioned an interesting augmentation idea, which is randomly scaling the images and cropping them.They did two tests, one is scaling the images to a fixed size, the second one is scaling the images to [256, 512], and then cropping the image. They found out that doing scale jittering at training time did lead to significantly better results than fixing the size, even when the fixed scale is used in test time.</p>\n<p>They also tested scale jittering during test time, and while it was better than fixed, they suspected was due to a different treatment of boundary conditions, and their combination outperforms both of them.</p>\n<h3 id=\"other-details-and-discussion\">Other Details and Discussion</h3>\n<p>They also tested AlexNet’s LRN, but found that it didn’t have much improvement compared to the models that didn’t employ this technique.</p>\n<p>They also didn’t sample multiple crops at the same time like AlexNet did, but I didn’t really understand why they said they didn’t while I felt like they did :/.</p>\n<p>The rest of the tricks, the batch size, the learning rate and details are all the same as AlexNet, so I won’t go over them again.</p>\n<p>The training was done on 4 Titan Black GPUs, and each net took around 2~3 weeks.</p>\n<h2 id=\"u-net-convolutional-networks-for-biomedical-image-segmentation-2015\"><a href=\"https://arxiv.org/pdf/1505.04597.pdf\">U-Net: Convolutional Networks for Biomedical Image Segmentation (2015)</a></h2>\n<p>This is the paper for the famous semantic segmentation model U-Net, which has precise localization, and is even used in my research for historical map segmentation.</p>\n<h3 id=\"challenges\">Challenges</h3>\n<p>It’s important to note the challenges behind biomedical image segmentation, and the problems with previous works.</p>\n<p>One of the most difficult problem is the precision required in biomedical images, having precise localization is a must when dealing with medical images that might become a life or death situation. There has been previous attempts to localize and assign each pixel to a class by using a small sliding window and predicting each patch. This method however is too computational heavy, and also loses the whole context of the picture since you are only using a small part of the image.</p>\n<p>Secondly, the separation of touching objects of the same classes is also a tricky situation to handle, and their boundaries are really similar and its easy for the model to think that they all belong to one object.</p>\n<h3 id=\"architecture\">Architecture</h3>\n<p>Since the most important part of U-Net is the architecture, I will give a brief explaination of how it works.</p>\n<p><img src=\"unet.png\" alt=\"unet\"></p>\n<p>As you can see in the picture, there are two main paths: The left part is the contraction path (Or encoder in recent terms), where it downsamples the original images, capturing the pictures high-level features.</p>\n<p>The right part is the Expansion path (decoder), where is starts to upsample the feature maps, and also connecting with previous maps from the contraction path (This is actually really similar to skip-connection in ResNet, which I will cover in later readings). This way, the model can localize better while retaining the information of high-level features.</p>\n<p>Also notice that the model did not utilize any fully connected layers (or dense layers), which makes this model a fully convolutional network, that is said to be able to enable seemless segmentation of arbitrarily large images.</p>\n<h3 id=\"loss\">Loss</h3>\n<p>In order to combat the boundary problem, they used a weighted soft-max + cross entropy loss to penalize wrong border assigning.</p>\n<p>Recent days we will tend to use Dice Loss or focal loss, which usually has better effects accoring to my own experience.</p>\n<h3 id=\"data-augmentation\">Data Augmentation</h3>\n<p>Data augmentation was also an important part of medical image segmentation, as often only few training images are availiable. The augmentation they chose is shift and rotation, as well as elastic deformation and gray scale variations. According to the paper, these augmentations contributed massively to their success.</p>\n<h2 id=\"final-words\">Final Words</h2>\n<p>This week I read the three aforementioned papers, and its honestly really fascinating to see some of the techniques that we are still using to this day, while some ideas and questions have better solutions now. Also, reading papers isn’t as difficult as I thought, although I think maybe this is because im quite familiar with these models and methods. All in all, I really enjoyed reading these papers, and we’ll see whats coming up next!</p>\n"},{"title":"Paper Reading 2: R-CNN, Fast R-CNN, Faster R-CNN","date":"2024-03-03T05:54:46.000Z","_content":"For this week, I decided to read a trio, the trio of regional based CNNs. R-CNNs are usually used in object detection tasks. Theres also Mask R-CNN that can do segmentation but I won't talk about that (or maybe I will).\n\n## [Rich feature hierarchies for accurate object detection and semantic segmentation (2013)](https://arxiv.org/pdf/1311.2524.pdf)\n\nThis is the first paper that proposed the idea of using regional proposals with CNNs to do object detection.\n\nThe whole framework is quite interesting, and I will introduce them one by one.\n\n![R-CNN-Flow](R-CNN-Flow.png)\n\n### Region Proposal\n\nThe first step of R-CNN is generating a bunch of region proposals for the CNN to work with. You can think of these regional proposals as rough bounding boxes made from grouping color, brightness and more. In R-CNN, they generated 2000 class-independent regional proposals, and they used a technique called selective search to generate these proposals.\n\n![Selective](selective.png)\n\n### CNN\n\nNext, they feed the region proposals into a CNN, that will extract the features and send it to a SVM classifier. The CNN architecture they used is the AlexNet we've read last week. A problem here is at that time, there are scarce labeled object detection images to use, so they couldn't directly train the CNN on those. The solution they found was to first train the CNN with a big dataset only with image-level annotations (so bounding box labels are not available in the dataset), then they would replace the classification layer with a random layer and fine-tune the model with a small set of labeled actual data.\n\nSince the region proposals have various shapes, they will first also include some pixels around the region (16 in the paper), and then naively warps them into the designated shape.\n\nThey treat all region proposals with >= 0.5 IoU overlap with a ground truth box as positives for that box's class and rest as negatives.\n\n### SVM Classifier\n\nAfter producing a feature vector from the CNN, they send the vector into a SVM to classify the result of each region proposal. In this part, they treat all region proposals with full ground truth mask as positives and the rest as negatives.\n\nAfter reading this, I had two big questions.\n\n1) Why do we have different definitions for positive examples?\n\n2) Why do we not directly use the output from the CNN, instead we chose to separately train another SVM?\n\nThey actually answered both questions in appendix B in the paper.\n\n1) They believe the difference in how positives and negatives are defined is not fundamentally important, and rather is caused by how the fine-tuning data is limited, and they had to introduce data that prevents overfitting but also might be suboptimal.\n\n2) They actually did try directly applying soft-max on the final layer, and the performance dropped from 54.2% to 50.9% mAP. They conjectured this as an affect of the definition of the examples, and hinted that it may be possible to not include the SVM and achieve similar results, while speeding up the whole model. (Basically they do not know why it's worse but had to come up with an explanation for the paper XD)\n\nAlso, in the appendix they also did another bounding box regression after the SVM to further refine the bounding box.\n\n## [Fast R-CNN (2015)](https://arxiv.org/pdf/1504.08083.pdf)\n\nAfter reading about R-CNN, now we will look at Fast R-CNN, which aims to solve a few big problems with R-CNN.\n\nR-CNN has three main big problems:\n\n1) Training is a multi-stage pipeline.\n\n2) Training is very expensive and time consuming.\n\n3) Detection is slow, since every picture needed to be sliced with several region proposals, and run a CNN on every single one of them.\n\nAn attempt to fix this problem is SPPNet, which basically generates a huge feature map with CNN from the original image first, then do region proposals on top of it.\n\n[image comparing SPPNet and R-CNN](https://analyticsindiamag.com/r-cnn-vs-fast-r-cnn-vs-faster-r-cnn-a-comparative-guide/)\n![compare](compare.png)\n\nNow, a big problem caused by SPPNet is the inability to back propagate and update weights below the spatial pyramid pooling layer. The reasoning given in the paper is due to each RoI can have a big receptive field and making the whole process inefficient (Im not gonna lie I didn't understand this fully).\n\n### RoI Pooling Layer\n\nThey replaced the SPP layer with a more efficient RoI pooling layer, which you can think of is a single layer version of the SPP layer.\n\n(Note: I think RoI pooling should be worse than SPP, due to not captureing spatial relationships like SPP does, but I'm guessing they use it because of the efficiency, and it enables end-to-end back propagation training, I will need to read the SPPNet paper some day to understand more, and I will update this blog later on).\n\n### Softmax Regressor/Bounding Box Regressor\n\nIn SPPNet and Fast R-CNN, they both chose to use a softmax regressor in the end instead of the individual SVMs in the original R-CNN, which can make the speed faster. They also included the Bounding box regressor that was in the appendix of the original R-CNN.\n\nAfter this I questioned: Why does the original R-CNN paper not use softmax regression for the classification step, and chose to use SVMs?\n\nThis question of comparing performance is acutally in the paper. They did test using SVM and softmax, and SVM did do a better job, but the performance increase is small, and the computation is not worth it.\n\n## [Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks (2015)](https://papers.nips.cc/paper_files/paper/2015/file/14bfa6bb14875e45bba028a21ed38046-Paper.pdf)\n\nAgain, Fast R-CNN is much faster compared to R-CNN, but still slow due to the need to do selective search to generate region proposals, which is quite slow in the long run.\n\nTo solve this, Faster R-CNN introduced Regional Proposal Networks (RPN), which is a fully convolutional network that predicts several proposals, and also giving them a probability of having an object and the label for it.\n\nFirst, a sliding window will go through the last layer for the feature extractor, generating several n x n regions of the feature map.\n\nIn the window, they will also use several \"Anchor boxes\", which are various fix-sized regions that gives a rough outline of where the object might be. One important thing to note is these anchor boxes are translation invariant, which means if you translate an object, the same function should be able to predit the same proposal in either location. This makes it really efficient as other similar methods do not have the invariance.\n\nThe regions will then be reduced dimensions, and sent to two sibling layers: one for box regression (which will also encode the coordinates of the anchor boxes), other for classification. This part is shared through every region, so it is quite efficient.\n\n## Final Words\n\nHonestly, I was quite busy this week, and there are quite a few points I felt like I wasn't completely sure, so I will likely go back to this and understand it further in the future.\n","source":"_posts/Paper-Reading-2-R-CNN-Fast-R-CNN-Faster-R-CNN.md","raw":"---\ntitle: 'Paper Reading 2: R-CNN, Fast R-CNN, Faster R-CNN'\ndate: 2024-03-02 23:54:46\ntags: [\"AI\"]\n---\nFor this week, I decided to read a trio, the trio of regional based CNNs. R-CNNs are usually used in object detection tasks. Theres also Mask R-CNN that can do segmentation but I won't talk about that (or maybe I will).\n\n## [Rich feature hierarchies for accurate object detection and semantic segmentation (2013)](https://arxiv.org/pdf/1311.2524.pdf)\n\nThis is the first paper that proposed the idea of using regional proposals with CNNs to do object detection.\n\nThe whole framework is quite interesting, and I will introduce them one by one.\n\n![R-CNN-Flow](R-CNN-Flow.png)\n\n### Region Proposal\n\nThe first step of R-CNN is generating a bunch of region proposals for the CNN to work with. You can think of these regional proposals as rough bounding boxes made from grouping color, brightness and more. In R-CNN, they generated 2000 class-independent regional proposals, and they used a technique called selective search to generate these proposals.\n\n![Selective](selective.png)\n\n### CNN\n\nNext, they feed the region proposals into a CNN, that will extract the features and send it to a SVM classifier. The CNN architecture they used is the AlexNet we've read last week. A problem here is at that time, there are scarce labeled object detection images to use, so they couldn't directly train the CNN on those. The solution they found was to first train the CNN with a big dataset only with image-level annotations (so bounding box labels are not available in the dataset), then they would replace the classification layer with a random layer and fine-tune the model with a small set of labeled actual data.\n\nSince the region proposals have various shapes, they will first also include some pixels around the region (16 in the paper), and then naively warps them into the designated shape.\n\nThey treat all region proposals with >= 0.5 IoU overlap with a ground truth box as positives for that box's class and rest as negatives.\n\n### SVM Classifier\n\nAfter producing a feature vector from the CNN, they send the vector into a SVM to classify the result of each region proposal. In this part, they treat all region proposals with full ground truth mask as positives and the rest as negatives.\n\nAfter reading this, I had two big questions.\n\n1) Why do we have different definitions for positive examples?\n\n2) Why do we not directly use the output from the CNN, instead we chose to separately train another SVM?\n\nThey actually answered both questions in appendix B in the paper.\n\n1) They believe the difference in how positives and negatives are defined is not fundamentally important, and rather is caused by how the fine-tuning data is limited, and they had to introduce data that prevents overfitting but also might be suboptimal.\n\n2) They actually did try directly applying soft-max on the final layer, and the performance dropped from 54.2% to 50.9% mAP. They conjectured this as an affect of the definition of the examples, and hinted that it may be possible to not include the SVM and achieve similar results, while speeding up the whole model. (Basically they do not know why it's worse but had to come up with an explanation for the paper XD)\n\nAlso, in the appendix they also did another bounding box regression after the SVM to further refine the bounding box.\n\n## [Fast R-CNN (2015)](https://arxiv.org/pdf/1504.08083.pdf)\n\nAfter reading about R-CNN, now we will look at Fast R-CNN, which aims to solve a few big problems with R-CNN.\n\nR-CNN has three main big problems:\n\n1) Training is a multi-stage pipeline.\n\n2) Training is very expensive and time consuming.\n\n3) Detection is slow, since every picture needed to be sliced with several region proposals, and run a CNN on every single one of them.\n\nAn attempt to fix this problem is SPPNet, which basically generates a huge feature map with CNN from the original image first, then do region proposals on top of it.\n\n[image comparing SPPNet and R-CNN](https://analyticsindiamag.com/r-cnn-vs-fast-r-cnn-vs-faster-r-cnn-a-comparative-guide/)\n![compare](compare.png)\n\nNow, a big problem caused by SPPNet is the inability to back propagate and update weights below the spatial pyramid pooling layer. The reasoning given in the paper is due to each RoI can have a big receptive field and making the whole process inefficient (Im not gonna lie I didn't understand this fully).\n\n### RoI Pooling Layer\n\nThey replaced the SPP layer with a more efficient RoI pooling layer, which you can think of is a single layer version of the SPP layer.\n\n(Note: I think RoI pooling should be worse than SPP, due to not captureing spatial relationships like SPP does, but I'm guessing they use it because of the efficiency, and it enables end-to-end back propagation training, I will need to read the SPPNet paper some day to understand more, and I will update this blog later on).\n\n### Softmax Regressor/Bounding Box Regressor\n\nIn SPPNet and Fast R-CNN, they both chose to use a softmax regressor in the end instead of the individual SVMs in the original R-CNN, which can make the speed faster. They also included the Bounding box regressor that was in the appendix of the original R-CNN.\n\nAfter this I questioned: Why does the original R-CNN paper not use softmax regression for the classification step, and chose to use SVMs?\n\nThis question of comparing performance is acutally in the paper. They did test using SVM and softmax, and SVM did do a better job, but the performance increase is small, and the computation is not worth it.\n\n## [Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks (2015)](https://papers.nips.cc/paper_files/paper/2015/file/14bfa6bb14875e45bba028a21ed38046-Paper.pdf)\n\nAgain, Fast R-CNN is much faster compared to R-CNN, but still slow due to the need to do selective search to generate region proposals, which is quite slow in the long run.\n\nTo solve this, Faster R-CNN introduced Regional Proposal Networks (RPN), which is a fully convolutional network that predicts several proposals, and also giving them a probability of having an object and the label for it.\n\nFirst, a sliding window will go through the last layer for the feature extractor, generating several n x n regions of the feature map.\n\nIn the window, they will also use several \"Anchor boxes\", which are various fix-sized regions that gives a rough outline of where the object might be. One important thing to note is these anchor boxes are translation invariant, which means if you translate an object, the same function should be able to predit the same proposal in either location. This makes it really efficient as other similar methods do not have the invariance.\n\nThe regions will then be reduced dimensions, and sent to two sibling layers: one for box regression (which will also encode the coordinates of the anchor boxes), other for classification. This part is shared through every region, so it is quite efficient.\n\n## Final Words\n\nHonestly, I was quite busy this week, and there are quite a few points I felt like I wasn't completely sure, so I will likely go back to this and understand it further in the future.\n","slug":"Paper-Reading-2-R-CNN-Fast-R-CNN-Faster-R-CNN","published":1,"updated":"2024-12-26T01:29:58.485Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblh60014b0u94s16eto8","content":"<p>For this week, I decided to read a trio, the trio of regional based CNNs. R-CNNs are usually used in object detection tasks. Theres also Mask R-CNN that can do segmentation but I won’t talk about that (or maybe I will).</p>\n<h2 id=\"rich-feature-hierarchies-for-accurate-object-detection-and-semantic-segmentation-2013\"><a href=\"https://arxiv.org/pdf/1311.2524.pdf\">Rich feature hierarchies for accurate object detection and semantic segmentation (2013)</a></h2>\n<p>This is the first paper that proposed the idea of using regional proposals with CNNs to do object detection.</p>\n<p>The whole framework is quite interesting, and I will introduce them one by one.</p>\n<p><img src=\"R-CNN-Flow.png\" alt=\"R-CNN-Flow\"></p>\n<h3 id=\"region-proposal\">Region Proposal</h3>\n<p>The first step of R-CNN is generating a bunch of region proposals for the CNN to work with. You can think of these regional proposals as rough bounding boxes made from grouping color, brightness and more. In R-CNN, they generated 2000 class-independent regional proposals, and they used a technique called selective search to generate these proposals.</p>\n<p><img src=\"selective.png\" alt=\"Selective\"></p>\n<h3 id=\"cnn\">CNN</h3>\n<p>Next, they feed the region proposals into a CNN, that will extract the features and send it to a SVM classifier. The CNN architecture they used is the AlexNet we’ve read last week. A problem here is at that time, there are scarce labeled object detection images to use, so they couldn’t directly train the CNN on those. The solution they found was to first train the CNN with a big dataset only with image-level annotations (so bounding box labels are not available in the dataset), then they would replace the classification layer with a random layer and fine-tune the model with a small set of labeled actual data.</p>\n<p>Since the region proposals have various shapes, they will first also include some pixels around the region (16 in the paper), and then naively warps them into the designated shape.</p>\n<p>They treat all region proposals with &gt;= 0.5 IoU overlap with a ground truth box as positives for that box’s class and rest as negatives.</p>\n<h3 id=\"svm-classifier\">SVM Classifier</h3>\n<p>After producing a feature vector from the CNN, they send the vector into a SVM to classify the result of each region proposal. In this part, they treat all region proposals with full ground truth mask as positives and the rest as negatives.</p>\n<p>After reading this, I had two big questions.</p>\n<ol>\n<li>\n<p>Why do we have different definitions for positive examples?</p>\n</li>\n<li>\n<p>Why do we not directly use the output from the CNN, instead we chose to separately train another SVM?</p>\n</li>\n</ol>\n<p>They actually answered both questions in appendix B in the paper.</p>\n<ol>\n<li>\n<p>They believe the difference in how positives and negatives are defined is not fundamentally important, and rather is caused by how the fine-tuning data is limited, and they had to introduce data that prevents overfitting but also might be suboptimal.</p>\n</li>\n<li>\n<p>They actually did try directly applying soft-max on the final layer, and the performance dropped from 54.2% to 50.9% mAP. They conjectured this as an affect of the definition of the examples, and hinted that it may be possible to not include the SVM and achieve similar results, while speeding up the whole model. (Basically they do not know why it’s worse but had to come up with an explanation for the paper XD)</p>\n</li>\n</ol>\n<p>Also, in the appendix they also did another bounding box regression after the SVM to further refine the bounding box.</p>\n<h2 id=\"fast-r-cnn-2015\"><a href=\"https://arxiv.org/pdf/1504.08083.pdf\">Fast R-CNN (2015)</a></h2>\n<p>After reading about R-CNN, now we will look at Fast R-CNN, which aims to solve a few big problems with R-CNN.</p>\n<p>R-CNN has three main big problems:</p>\n<ol>\n<li>\n<p>Training is a multi-stage pipeline.</p>\n</li>\n<li>\n<p>Training is very expensive and time consuming.</p>\n</li>\n<li>\n<p>Detection is slow, since every picture needed to be sliced with several region proposals, and run a CNN on every single one of them.</p>\n</li>\n</ol>\n<p>An attempt to fix this problem is SPPNet, which basically generates a huge feature map with CNN from the original image first, then do region proposals on top of it.</p>\n<p><a href=\"https://analyticsindiamag.com/r-cnn-vs-fast-r-cnn-vs-faster-r-cnn-a-comparative-guide/\">image comparing SPPNet and R-CNN</a><br>\n<img src=\"compare.png\" alt=\"compare\"></p>\n<p>Now, a big problem caused by SPPNet is the inability to back propagate and update weights below the spatial pyramid pooling layer. The reasoning given in the paper is due to each RoI can have a big receptive field and making the whole process inefficient (Im not gonna lie I didn’t understand this fully).</p>\n<h3 id=\"roi-pooling-layer\">RoI Pooling Layer</h3>\n<p>They replaced the SPP layer with a more efficient RoI pooling layer, which you can think of is a single layer version of the SPP layer.</p>\n<p>(Note: I think RoI pooling should be worse than SPP, due to not captureing spatial relationships like SPP does, but I’m guessing they use it because of the efficiency, and it enables end-to-end back propagation training, I will need to read the SPPNet paper some day to understand more, and I will update this blog later on).</p>\n<h3 id=\"softmax-regressor-bounding-box-regressor\">Softmax Regressor/Bounding Box Regressor</h3>\n<p>In SPPNet and Fast R-CNN, they both chose to use a softmax regressor in the end instead of the individual SVMs in the original R-CNN, which can make the speed faster. They also included the Bounding box regressor that was in the appendix of the original R-CNN.</p>\n<p>After this I questioned: Why does the original R-CNN paper not use softmax regression for the classification step, and chose to use SVMs?</p>\n<p>This question of comparing performance is acutally in the paper. They did test using SVM and softmax, and SVM did do a better job, but the performance increase is small, and the computation is not worth it.</p>\n<h2 id=\"faster-r-cnn-towards-real-time-object-detection-with-region-proposal-networks-2015\"><a href=\"https://papers.nips.cc/paper_files/paper/2015/file/14bfa6bb14875e45bba028a21ed38046-Paper.pdf\">Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks (2015)</a></h2>\n<p>Again, Fast R-CNN is much faster compared to R-CNN, but still slow due to the need to do selective search to generate region proposals, which is quite slow in the long run.</p>\n<p>To solve this, Faster R-CNN introduced Regional Proposal Networks (RPN), which is a fully convolutional network that predicts several proposals, and also giving them a probability of having an object and the label for it.</p>\n<p>First, a sliding window will go through the last layer for the feature extractor, generating several n x n regions of the feature map.</p>\n<p>In the window, they will also use several “Anchor boxes”, which are various fix-sized regions that gives a rough outline of where the object might be. One important thing to note is these anchor boxes are translation invariant, which means if you translate an object, the same function should be able to predit the same proposal in either location. This makes it really efficient as other similar methods do not have the invariance.</p>\n<p>The regions will then be reduced dimensions, and sent to two sibling layers: one for box regression (which will also encode the coordinates of the anchor boxes), other for classification. This part is shared through every region, so it is quite efficient.</p>\n<h2 id=\"final-words\">Final Words</h2>\n<p>Honestly, I was quite busy this week, and there are quite a few points I felt like I wasn’t completely sure, so I will likely go back to this and understand it further in the future.</p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>For this week, I decided to read a trio, the trio of regional based CNNs. R-CNNs are usually used in object detection tasks. Theres also Mask R-CNN that can do segmentation but I won’t talk about that (or maybe I will).</p>\n<h2 id=\"rich-feature-hierarchies-for-accurate-object-detection-and-semantic-segmentation-2013\"><a href=\"https://arxiv.org/pdf/1311.2524.pdf\">Rich feature hierarchies for accurate object detection and semantic segmentation (2013)</a></h2>\n<p>This is the first paper that proposed the idea of using regional proposals with CNNs to do object detection.</p>\n<p>The whole framework is quite interesting, and I will introduce them one by one.</p>\n<p><img src=\"R-CNN-Flow.png\" alt=\"R-CNN-Flow\"></p>\n<h3 id=\"region-proposal\">Region Proposal</h3>\n<p>The first step of R-CNN is generating a bunch of region proposals for the CNN to work with. You can think of these regional proposals as rough bounding boxes made from grouping color, brightness and more. In R-CNN, they generated 2000 class-independent regional proposals, and they used a technique called selective search to generate these proposals.</p>\n<p><img src=\"selective.png\" alt=\"Selective\"></p>\n<h3 id=\"cnn\">CNN</h3>\n<p>Next, they feed the region proposals into a CNN, that will extract the features and send it to a SVM classifier. The CNN architecture they used is the AlexNet we’ve read last week. A problem here is at that time, there are scarce labeled object detection images to use, so they couldn’t directly train the CNN on those. The solution they found was to first train the CNN with a big dataset only with image-level annotations (so bounding box labels are not available in the dataset), then they would replace the classification layer with a random layer and fine-tune the model with a small set of labeled actual data.</p>\n<p>Since the region proposals have various shapes, they will first also include some pixels around the region (16 in the paper), and then naively warps them into the designated shape.</p>\n<p>They treat all region proposals with &gt;= 0.5 IoU overlap with a ground truth box as positives for that box’s class and rest as negatives.</p>\n<h3 id=\"svm-classifier\">SVM Classifier</h3>\n<p>After producing a feature vector from the CNN, they send the vector into a SVM to classify the result of each region proposal. In this part, they treat all region proposals with full ground truth mask as positives and the rest as negatives.</p>\n<p>After reading this, I had two big questions.</p>\n<ol>\n<li>\n<p>Why do we have different definitions for positive examples?</p>\n</li>\n<li>\n<p>Why do we not directly use the output from the CNN, instead we chose to separately train another SVM?</p>\n</li>\n</ol>\n<p>They actually answered both questions in appendix B in the paper.</p>\n<ol>\n<li>\n<p>They believe the difference in how positives and negatives are defined is not fundamentally important, and rather is caused by how the fine-tuning data is limited, and they had to introduce data that prevents overfitting but also might be suboptimal.</p>\n</li>\n<li>\n<p>They actually did try directly applying soft-max on the final layer, and the performance dropped from 54.2% to 50.9% mAP. They conjectured this as an affect of the definition of the examples, and hinted that it may be possible to not include the SVM and achieve similar results, while speeding up the whole model. (Basically they do not know why it’s worse but had to come up with an explanation for the paper XD)</p>\n</li>\n</ol>\n<p>Also, in the appendix they also did another bounding box regression after the SVM to further refine the bounding box.</p>\n<h2 id=\"fast-r-cnn-2015\"><a href=\"https://arxiv.org/pdf/1504.08083.pdf\">Fast R-CNN (2015)</a></h2>\n<p>After reading about R-CNN, now we will look at Fast R-CNN, which aims to solve a few big problems with R-CNN.</p>\n<p>R-CNN has three main big problems:</p>\n<ol>\n<li>\n<p>Training is a multi-stage pipeline.</p>\n</li>\n<li>\n<p>Training is very expensive and time consuming.</p>\n</li>\n<li>\n<p>Detection is slow, since every picture needed to be sliced with several region proposals, and run a CNN on every single one of them.</p>\n</li>\n</ol>\n<p>An attempt to fix this problem is SPPNet, which basically generates a huge feature map with CNN from the original image first, then do region proposals on top of it.</p>\n<p><a href=\"https://analyticsindiamag.com/r-cnn-vs-fast-r-cnn-vs-faster-r-cnn-a-comparative-guide/\">image comparing SPPNet and R-CNN</a><br>\n<img src=\"compare.png\" alt=\"compare\"></p>\n<p>Now, a big problem caused by SPPNet is the inability to back propagate and update weights below the spatial pyramid pooling layer. The reasoning given in the paper is due to each RoI can have a big receptive field and making the whole process inefficient (Im not gonna lie I didn’t understand this fully).</p>\n<h3 id=\"roi-pooling-layer\">RoI Pooling Layer</h3>\n<p>They replaced the SPP layer with a more efficient RoI pooling layer, which you can think of is a single layer version of the SPP layer.</p>\n<p>(Note: I think RoI pooling should be worse than SPP, due to not captureing spatial relationships like SPP does, but I’m guessing they use it because of the efficiency, and it enables end-to-end back propagation training, I will need to read the SPPNet paper some day to understand more, and I will update this blog later on).</p>\n<h3 id=\"softmax-regressor-bounding-box-regressor\">Softmax Regressor/Bounding Box Regressor</h3>\n<p>In SPPNet and Fast R-CNN, they both chose to use a softmax regressor in the end instead of the individual SVMs in the original R-CNN, which can make the speed faster. They also included the Bounding box regressor that was in the appendix of the original R-CNN.</p>\n<p>After this I questioned: Why does the original R-CNN paper not use softmax regression for the classification step, and chose to use SVMs?</p>\n<p>This question of comparing performance is acutally in the paper. They did test using SVM and softmax, and SVM did do a better job, but the performance increase is small, and the computation is not worth it.</p>\n<h2 id=\"faster-r-cnn-towards-real-time-object-detection-with-region-proposal-networks-2015\"><a href=\"https://papers.nips.cc/paper_files/paper/2015/file/14bfa6bb14875e45bba028a21ed38046-Paper.pdf\">Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks (2015)</a></h2>\n<p>Again, Fast R-CNN is much faster compared to R-CNN, but still slow due to the need to do selective search to generate region proposals, which is quite slow in the long run.</p>\n<p>To solve this, Faster R-CNN introduced Regional Proposal Networks (RPN), which is a fully convolutional network that predicts several proposals, and also giving them a probability of having an object and the label for it.</p>\n<p>First, a sliding window will go through the last layer for the feature extractor, generating several n x n regions of the feature map.</p>\n<p>In the window, they will also use several “Anchor boxes”, which are various fix-sized regions that gives a rough outline of where the object might be. One important thing to note is these anchor boxes are translation invariant, which means if you translate an object, the same function should be able to predit the same proposal in either location. This makes it really efficient as other similar methods do not have the invariance.</p>\n<p>The regions will then be reduced dimensions, and sent to two sibling layers: one for box regression (which will also encode the coordinates of the anchor boxes), other for classification. This part is shared through every region, so it is quite efficient.</p>\n<h2 id=\"final-words\">Final Words</h2>\n<p>Honestly, I was quite busy this week, and there are quite a few points I felt like I wasn’t completely sure, so I will likely go back to this and understand it further in the future.</p>\n"},{"title":"Paper Reading 3: BERT/RoBERTa/LoRA","date":"2024-12-25T21:40:20.000Z","_content":"\nHey Yall!\n\nIt's been quite a while (again), I finished the first semester of my sophomore year! I'll be giving some recaps later, but let's read some papers first :D\n\nFor some context, I took a graduate LLM class this semester, and there were alot of papers that were mentioned, so I wanted to go over them thoroughly throughout the winter break.\n\nIn this blog, I will be covering BERT, RoBERTa and LoRA. I was going to do \"Attention is all you need\" but I decided o maybe put that as a individual blog with detailed implementations for the transformer, since it's such a important model.\n\n## [BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding](https://arxiv.org/pdf/1810.04805)\n\nAn important thing to note about BERT in the world of generative models is that it isn't a generative language model! It is purely an encoder that is used to understand language itself, and you need to use it for various downstream tasks. I think it is similar to CLIP for VLMs.\n\n### Why do we need BERT?\n\nBERT improves on language representation models by allowing a bidirectional understanding rather than just left-to-right or vise versa. We usually train a model by providing the tokens before a timestep $t$, and train the model to predict the token on timestep $t$ conditioned on the previous context. However, in terms of langauge understanding like Q&A, sentence comparison, you really need the context of the whole sentence/paragraph instead of just going one way.\n\n### How?\n\nThey used two very special unsupervised training task to achieve this bidirectional understanding:\n\n#### Masked LM (MLM)\n\nThe idea is very simple, we mask random tokens in the sentence and ask the model to reconstruct the whole sentence before the masking.\n\nInterestingly, they choose 15% of the tokens to mask, but out of these 15%, 80% of the time it will be a mask token [MASK], 10% of the time being a random token, and 10% the token will be unchanged. The intuition they gave in the paper was that this procedure makes it so that the model doesn't always know which word has been replaced, hence requiring the model to really understand the whole contextual representation of the entire sequence. \n\n(Note that they mask tokens, not words, so if a word is separated into two tokens it might only mask one of them. Whole Word Masking (WWM) was used in newer versions of BERT and makes more sense in my opinion.)\n\n### Next Sentence Prediction (NSP)\n\nTheir input for the model consists of two sentences A and B, which are separated by a special token [SEP]. Apart from masking them and doing MLM, they also required the model to additionally do a binary classification to determine if the sentence B is the next sentence of A or not. An illustration can be seen below:\n\n![NSP](image.png)\n\nThey said this could help the model understand connections between sentences and could help downstream tasks (spoiler alert: it doesn't), but it is interesting.\n\n\n### Thoughts?\n\nWell looking at BERT today, it's honestly pretty standard as most frameworks are built upon its ideas, but I can understand why its such an important idea back then.\n\n## [RoBERTa: A Robustly Optimized BERT Pretraining Approach](https://arxiv.org/pdf/1907.11692)\n\nThis is a sequal of BERT using the exact same architecture, but using different training approaches.\n\n### Why?\n\nThey realized that BERT was actually very much under-trained and had a lot of potential, so they developed a more systematic study to improve BERT.\n\n### How?\n\n#### Training tweaks\n\nI'll compose all the minor training changes here: They used more data and it worked better (Who would've thought..), more pretraining time (thats crazy who would've known???), and bigger batch sizes.\n\n#### Study on NSP\n\nThis is one of the more interesting discoveries in this paper. In the original BERT paper, they tried removing NSP loss and it hurt the performance quite a bit. However, in this paper they tried several settings, and they found out that if you remove NSP loss, and change the format of the input from two sentences to just one whole sentence instead, it performs better! (In the original BERT when they were trying to remove NSP, they still kept the 2 sentence input structure). Very weird but cool!\n\n### Thoughts?\n\nThere really isn't that much to say about this paper, just that they did a more systematic evaluation on their previous choices. However, I feel like beside the study on the NSP objective, the other improvements like more data, more batches, is quite apparent when a model is undertrained, so this paper isn't that interesting imo.\n\n## [LoRA: Low-Rank Adaptation of Large Language Models](https://arxiv.org/pdf/2106.09685)\n\n### Why?\n\nUsually when we adapt a general LLM to a specific dataset, we do a full finetuning, which is essentially just training all weights on this specific dataset. However, this is obviously very expensive, as most LLMs have several billion parameters. There has been quite some ideas to mitigate this like using task specific heads, but this increases inference latency and also doesn't work as well compared to finetuning. \n\n### How?\n\nThe idea stems from a previous research, which states these LLMs are usually over-parametrized, and that the weight matrices of an LLM are intrinsic low rank. That is, they all reside on a low dimention subspace, so we actually don't need to use this big of a matrix to properly characterize the weights. Since the weights itself are low-rank, the authors hypothesized that the updated weights should naturally be low-rank as well. This also makes sense because adaptation focuses on more local features, which shouldn't require that many dimensions to work with.\n\nFor an adapted weight $W'$, we can think of it as the sum of the original weight $W$ and the change of the weigt $\\Delta W$, so for an output we have \n$$h = W'x = Wx + \\Delta W x$$\n\nWhere $W'$, $W$, $\\Delta W$ all have dimensions $\\mathbb{R}^{d \\times k}$.  \n\nLoRA replaces $\\Delta W$ with two low rank matrices $A \\in \\mathbb{R}^{d \\times r}$ and $B \\in \\mathbb{R}^{r \\times k}$, where $r \\ll \\min(d,k)$. Giving \n$$h = Wx + ABx = (W + AB)x$$\n\nIt's far less complex training the two matrices $A$ and $B$, where originally we have $O(dk)$, and now only $O(r(d+k))$and during inference we can precompute $W' = W + AB$ so there is also little latency.\n\nIts usually used in the 4 attention weights in transformers, and it also has a plug-and-play style, so we can effeciently adapt to and switch tasks.\n\n\n### Thoughts?\nOne interesting observation from the paper was that the low rank matrices was amplifying features that were important for the task but was not focused on in the general model. I'm wondering if doing full tuning we will also get this effect or not (I think it should, but maybe the updates are more general?)\n\nAnyways, interesting paper, easy yet effective idea.\n\n\n\n\n\n\n\n","source":"_posts/Paper-Reading-3-BERT-RoBERTa-LoRA.md","raw":"---\ntitle: 'Paper Reading 3: BERT/RoBERTa/LoRA'\ndate: 2024-12-25 15:40:20\ntags: ['AI']\n---\n\nHey Yall!\n\nIt's been quite a while (again), I finished the first semester of my sophomore year! I'll be giving some recaps later, but let's read some papers first :D\n\nFor some context, I took a graduate LLM class this semester, and there were alot of papers that were mentioned, so I wanted to go over them thoroughly throughout the winter break.\n\nIn this blog, I will be covering BERT, RoBERTa and LoRA. I was going to do \"Attention is all you need\" but I decided o maybe put that as a individual blog with detailed implementations for the transformer, since it's such a important model.\n\n## [BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding](https://arxiv.org/pdf/1810.04805)\n\nAn important thing to note about BERT in the world of generative models is that it isn't a generative language model! It is purely an encoder that is used to understand language itself, and you need to use it for various downstream tasks. I think it is similar to CLIP for VLMs.\n\n### Why do we need BERT?\n\nBERT improves on language representation models by allowing a bidirectional understanding rather than just left-to-right or vise versa. We usually train a model by providing the tokens before a timestep $t$, and train the model to predict the token on timestep $t$ conditioned on the previous context. However, in terms of langauge understanding like Q&A, sentence comparison, you really need the context of the whole sentence/paragraph instead of just going one way.\n\n### How?\n\nThey used two very special unsupervised training task to achieve this bidirectional understanding:\n\n#### Masked LM (MLM)\n\nThe idea is very simple, we mask random tokens in the sentence and ask the model to reconstruct the whole sentence before the masking.\n\nInterestingly, they choose 15% of the tokens to mask, but out of these 15%, 80% of the time it will be a mask token [MASK], 10% of the time being a random token, and 10% the token will be unchanged. The intuition they gave in the paper was that this procedure makes it so that the model doesn't always know which word has been replaced, hence requiring the model to really understand the whole contextual representation of the entire sequence. \n\n(Note that they mask tokens, not words, so if a word is separated into two tokens it might only mask one of them. Whole Word Masking (WWM) was used in newer versions of BERT and makes more sense in my opinion.)\n\n### Next Sentence Prediction (NSP)\n\nTheir input for the model consists of two sentences A and B, which are separated by a special token [SEP]. Apart from masking them and doing MLM, they also required the model to additionally do a binary classification to determine if the sentence B is the next sentence of A or not. An illustration can be seen below:\n\n![NSP](image.png)\n\nThey said this could help the model understand connections between sentences and could help downstream tasks (spoiler alert: it doesn't), but it is interesting.\n\n\n### Thoughts?\n\nWell looking at BERT today, it's honestly pretty standard as most frameworks are built upon its ideas, but I can understand why its such an important idea back then.\n\n## [RoBERTa: A Robustly Optimized BERT Pretraining Approach](https://arxiv.org/pdf/1907.11692)\n\nThis is a sequal of BERT using the exact same architecture, but using different training approaches.\n\n### Why?\n\nThey realized that BERT was actually very much under-trained and had a lot of potential, so they developed a more systematic study to improve BERT.\n\n### How?\n\n#### Training tweaks\n\nI'll compose all the minor training changes here: They used more data and it worked better (Who would've thought..), more pretraining time (thats crazy who would've known???), and bigger batch sizes.\n\n#### Study on NSP\n\nThis is one of the more interesting discoveries in this paper. In the original BERT paper, they tried removing NSP loss and it hurt the performance quite a bit. However, in this paper they tried several settings, and they found out that if you remove NSP loss, and change the format of the input from two sentences to just one whole sentence instead, it performs better! (In the original BERT when they were trying to remove NSP, they still kept the 2 sentence input structure). Very weird but cool!\n\n### Thoughts?\n\nThere really isn't that much to say about this paper, just that they did a more systematic evaluation on their previous choices. However, I feel like beside the study on the NSP objective, the other improvements like more data, more batches, is quite apparent when a model is undertrained, so this paper isn't that interesting imo.\n\n## [LoRA: Low-Rank Adaptation of Large Language Models](https://arxiv.org/pdf/2106.09685)\n\n### Why?\n\nUsually when we adapt a general LLM to a specific dataset, we do a full finetuning, which is essentially just training all weights on this specific dataset. However, this is obviously very expensive, as most LLMs have several billion parameters. There has been quite some ideas to mitigate this like using task specific heads, but this increases inference latency and also doesn't work as well compared to finetuning. \n\n### How?\n\nThe idea stems from a previous research, which states these LLMs are usually over-parametrized, and that the weight matrices of an LLM are intrinsic low rank. That is, they all reside on a low dimention subspace, so we actually don't need to use this big of a matrix to properly characterize the weights. Since the weights itself are low-rank, the authors hypothesized that the updated weights should naturally be low-rank as well. This also makes sense because adaptation focuses on more local features, which shouldn't require that many dimensions to work with.\n\nFor an adapted weight $W'$, we can think of it as the sum of the original weight $W$ and the change of the weigt $\\Delta W$, so for an output we have \n$$h = W'x = Wx + \\Delta W x$$\n\nWhere $W'$, $W$, $\\Delta W$ all have dimensions $\\mathbb{R}^{d \\times k}$.  \n\nLoRA replaces $\\Delta W$ with two low rank matrices $A \\in \\mathbb{R}^{d \\times r}$ and $B \\in \\mathbb{R}^{r \\times k}$, where $r \\ll \\min(d,k)$. Giving \n$$h = Wx + ABx = (W + AB)x$$\n\nIt's far less complex training the two matrices $A$ and $B$, where originally we have $O(dk)$, and now only $O(r(d+k))$and during inference we can precompute $W' = W + AB$ so there is also little latency.\n\nIts usually used in the 4 attention weights in transformers, and it also has a plug-and-play style, so we can effeciently adapt to and switch tasks.\n\n\n### Thoughts?\nOne interesting observation from the paper was that the low rank matrices was amplifying features that were important for the task but was not focused on in the general model. I'm wondering if doing full tuning we will also get this effect or not (I think it should, but maybe the updates are more general?)\n\nAnyways, interesting paper, easy yet effective idea.\n\n\n\n\n\n\n\n","slug":"Paper-Reading-3-BERT-RoBERTa-LoRA","published":1,"updated":"2024-12-26T01:29:58.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblh60016b0u94gjie05v","content":"<p>Hey Yall!</p>\n<p>It’s been quite a while (again), I finished the first semester of my sophomore year! I’ll be giving some recaps later, but let’s read some papers first :D</p>\n<p>For some context, I took a graduate LLM class this semester, and there were alot of papers that were mentioned, so I wanted to go over them thoroughly throughout the winter break.</p>\n<p>In this blog, I will be covering BERT, RoBERTa and LoRA. I was going to do “Attention is all you need” but I decided o maybe put that as a individual blog with detailed implementations for the transformer, since it’s such a important model.</p>\n<h2 id=\"bert-pre-training-of-deep-bidirectional-transformers-for-language-understanding\"><a href=\"https://arxiv.org/pdf/1810.04805\">BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding</a></h2>\n<p>An important thing to note about BERT in the world of generative models is that it isn’t a generative language model! It is purely an encoder that is used to understand language itself, and you need to use it for various downstream tasks. I think it is similar to CLIP for VLMs.</p>\n<h3 id=\"why-do-we-need-bert\">Why do we need BERT?</h3>\n<p>BERT improves on language representation models by allowing a bidirectional understanding rather than just left-to-right or vise versa. We usually train a model by providing the tokens before a timestep <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>, and train the model to predict the token on timestep <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> conditioned on the previous context. However, in terms of langauge understanding like Q&amp;A, sentence comparison, you really need the context of the whole sentence/paragraph instead of just going one way.</p>\n<h3 id=\"how\">How?</h3>\n<p>They used two very special unsupervised training task to achieve this bidirectional understanding:</p>\n<h4 id=\"masked-lm-mlm\">Masked LM (MLM)</h4>\n<p>The idea is very simple, we mask random tokens in the sentence and ask the model to reconstruct the whole sentence before the masking.</p>\n<p>Interestingly, they choose 15% of the tokens to mask, but out of these 15%, 80% of the time it will be a mask token [MASK], 10% of the time being a random token, and 10% the token will be unchanged. The intuition they gave in the paper was that this procedure makes it so that the model doesn’t always know which word has been replaced, hence requiring the model to really understand the whole contextual representation of the entire sequence.</p>\n<p>(Note that they mask tokens, not words, so if a word is separated into two tokens it might only mask one of them. Whole Word Masking (WWM) was used in newer versions of BERT and makes more sense in my opinion.)</p>\n<h3 id=\"next-sentence-prediction-nsp\">Next Sentence Prediction (NSP)</h3>\n<p>Their input for the model consists of two sentences A and B, which are separated by a special token [SEP]. Apart from masking them and doing MLM, they also required the model to additionally do a binary classification to determine if the sentence B is the next sentence of A or not. An illustration can be seen below:</p>\n<p><img src=\"image.png\" alt=\"NSP\"></p>\n<p>They said this could help the model understand connections between sentences and could help downstream tasks (spoiler alert: it doesn’t), but it is interesting.</p>\n<h3 id=\"thoughts\">Thoughts?</h3>\n<p>Well looking at BERT today, it’s honestly pretty standard as most frameworks are built upon its ideas, but I can understand why its such an important idea back then.</p>\n<h2 id=\"roberta-a-robustly-optimized-bert-pretraining-approach\"><a href=\"https://arxiv.org/pdf/1907.11692\">RoBERTa: A Robustly Optimized BERT Pretraining Approach</a></h2>\n<p>This is a sequal of BERT using the exact same architecture, but using different training approaches.</p>\n<h3 id=\"why\">Why?</h3>\n<p>They realized that BERT was actually very much under-trained and had a lot of potential, so they developed a more systematic study to improve BERT.</p>\n<h3 id=\"how\">How?</h3>\n<h4 id=\"training-tweaks\">Training tweaks</h4>\n<p>I’ll compose all the minor training changes here: They used more data and it worked better (Who would’ve thought…), more pretraining time (thats crazy who would’ve known???), and bigger batch sizes.</p>\n<h4 id=\"study-on-nsp\">Study on NSP</h4>\n<p>This is one of the more interesting discoveries in this paper. In the original BERT paper, they tried removing NSP loss and it hurt the performance quite a bit. However, in this paper they tried several settings, and they found out that if you remove NSP loss, and change the format of the input from two sentences to just one whole sentence instead, it performs better! (In the original BERT when they were trying to remove NSP, they still kept the 2 sentence input structure). Very weird but cool!</p>\n<h3 id=\"thoughts\">Thoughts?</h3>\n<p>There really isn’t that much to say about this paper, just that they did a more systematic evaluation on their previous choices. However, I feel like beside the study on the NSP objective, the other improvements like more data, more batches, is quite apparent when a model is undertrained, so this paper isn’t that interesting imo.</p>\n<h2 id=\"lora-low-rank-adaptation-of-large-language-models\"><a href=\"https://arxiv.org/pdf/2106.09685\">LoRA: Low-Rank Adaptation of Large Language Models</a></h2>\n<h3 id=\"why\">Why?</h3>\n<p>Usually when we adapt a general LLM to a specific dataset, we do a full finetuning, which is essentially just training all weights on this specific dataset. However, this is obviously very expensive, as most LLMs have several billion parameters. There has been quite some ideas to mitigate this like using task specific heads, but this increases inference latency and also doesn’t work as well compared to finetuning.</p>\n<h3 id=\"how\">How?</h3>\n<p>The idea stems from a previous research, which states these LLMs are usually over-parametrized, and that the weight matrices of an LLM are intrinsic low rank. That is, they all reside on a low dimention subspace, so we actually don’t need to use this big of a matrix to properly characterize the weights. Since the weights itself are low-rank, the authors hypothesized that the updated weights should naturally be low-rank as well. This also makes sense because adaptation focuses on more local features, which shouldn’t require that many dimensions to work with.</p>\n<p>For an adapted weight <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>W</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">W&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, we can think of it as the sum of the original weight <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> and the change of the weigt <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span>, so for an output we have</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>h</mi><mo>=</mo><msup><mi>W</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>x</mi><mo>=</mo><mi>W</mi><mi>x</mi><mo>+</mo><mi mathvariant=\"normal\">Δ</mi><mi>W</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">h = W&#x27;x = Wx + \\Delta W x\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.801892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.801892em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\">x</span></span></span></span></span></p>\n<p>Where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>W</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">W&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> all have dimensions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mrow><mi>d</mi><mo>×</mo><mi>k</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^{d \\times k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mbin mtight\">×</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span></span>.</p>\n<p>LoRA replaces <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> with two low rank matrices <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>∈</mo><msup><mi mathvariant=\"double-struck\">R</mi><mrow><mi>d</mi><mo>×</mo><mi>r</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">A \\in \\mathbb{R}^{d \\times r}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mbin mtight\">×</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo>∈</mo><msup><mi mathvariant=\"double-struck\">R</mi><mrow><mi>r</mi><mo>×</mo><mi>k</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">B \\in \\mathbb{R}^{r \\times k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mbin mtight\">×</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>≪</mo><mi>min</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>d</mi><mo separator=\"true\">,</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">r \\ll \\min(d,k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≪</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">min</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span>. Giving</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>h</mi><mo>=</mo><mi>W</mi><mi>x</mi><mo>+</mo><mi>A</mi><mi>B</mi><mi>x</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>W</mi><mo>+</mo><mi>A</mi><mi>B</mi><mo stretchy=\"false\">)</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">h = Wx + ABx = (W + AB)x\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">x</span></span></span></span></span></p>\n<p>It’s far less complex training the two matrices <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, where originally we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(dk)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span>, and now only <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(r(d+k))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>and during inference we can precompute <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>W</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>=</mo><mi>W</mi><mo>+</mo><mi>A</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">W&#x27; = W + AB</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> so there is also little latency.</p>\n<p>Its usually used in the 4 attention weights in transformers, and it also has a plug-and-play style, so we can effeciently adapt to and switch tasks.</p>\n<h3 id=\"thoughts\">Thoughts?</h3>\n<p>One interesting observation from the paper was that the low rank matrices was amplifying features that were important for the task but was not focused on in the general model. I’m wondering if doing full tuning we will also get this effect or not (I think it should, but maybe the updates are more general?)</p>\n<p>Anyways, interesting paper, easy yet effective idea.</p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>Hey Yall!</p>\n<p>It’s been quite a while (again), I finished the first semester of my sophomore year! I’ll be giving some recaps later, but let’s read some papers first :D</p>\n<p>For some context, I took a graduate LLM class this semester, and there were alot of papers that were mentioned, so I wanted to go over them thoroughly throughout the winter break.</p>\n<p>In this blog, I will be covering BERT, RoBERTa and LoRA. I was going to do “Attention is all you need” but I decided o maybe put that as a individual blog with detailed implementations for the transformer, since it’s such a important model.</p>\n<h2 id=\"bert-pre-training-of-deep-bidirectional-transformers-for-language-understanding\"><a href=\"https://arxiv.org/pdf/1810.04805\">BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding</a></h2>\n<p>An important thing to note about BERT in the world of generative models is that it isn’t a generative language model! It is purely an encoder that is used to understand language itself, and you need to use it for various downstream tasks. I think it is similar to CLIP for VLMs.</p>\n<h3 id=\"why-do-we-need-bert\">Why do we need BERT?</h3>\n<p>BERT improves on language representation models by allowing a bidirectional understanding rather than just left-to-right or vise versa. We usually train a model by providing the tokens before a timestep <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>, and train the model to predict the token on timestep <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> conditioned on the previous context. However, in terms of langauge understanding like Q&amp;A, sentence comparison, you really need the context of the whole sentence/paragraph instead of just going one way.</p>\n<h3 id=\"how\">How?</h3>\n<p>They used two very special unsupervised training task to achieve this bidirectional understanding:</p>\n<h4 id=\"masked-lm-mlm\">Masked LM (MLM)</h4>\n<p>The idea is very simple, we mask random tokens in the sentence and ask the model to reconstruct the whole sentence before the masking.</p>\n<p>Interestingly, they choose 15% of the tokens to mask, but out of these 15%, 80% of the time it will be a mask token [MASK], 10% of the time being a random token, and 10% the token will be unchanged. The intuition they gave in the paper was that this procedure makes it so that the model doesn’t always know which word has been replaced, hence requiring the model to really understand the whole contextual representation of the entire sequence.</p>\n<p>(Note that they mask tokens, not words, so if a word is separated into two tokens it might only mask one of them. Whole Word Masking (WWM) was used in newer versions of BERT and makes more sense in my opinion.)</p>\n<h3 id=\"next-sentence-prediction-nsp\">Next Sentence Prediction (NSP)</h3>\n<p>Their input for the model consists of two sentences A and B, which are separated by a special token [SEP]. Apart from masking them and doing MLM, they also required the model to additionally do a binary classification to determine if the sentence B is the next sentence of A or not. An illustration can be seen below:</p>\n<p><img src=\"image.png\" alt=\"NSP\"></p>\n<p>They said this could help the model understand connections between sentences and could help downstream tasks (spoiler alert: it doesn’t), but it is interesting.</p>\n<h3 id=\"thoughts\">Thoughts?</h3>\n<p>Well looking at BERT today, it’s honestly pretty standard as most frameworks are built upon its ideas, but I can understand why its such an important idea back then.</p>\n<h2 id=\"roberta-a-robustly-optimized-bert-pretraining-approach\"><a href=\"https://arxiv.org/pdf/1907.11692\">RoBERTa: A Robustly Optimized BERT Pretraining Approach</a></h2>\n<p>This is a sequal of BERT using the exact same architecture, but using different training approaches.</p>\n<h3 id=\"why\">Why?</h3>\n<p>They realized that BERT was actually very much under-trained and had a lot of potential, so they developed a more systematic study to improve BERT.</p>\n<h3 id=\"how\">How?</h3>\n<h4 id=\"training-tweaks\">Training tweaks</h4>\n<p>I’ll compose all the minor training changes here: They used more data and it worked better (Who would’ve thought…), more pretraining time (thats crazy who would’ve known???), and bigger batch sizes.</p>\n<h4 id=\"study-on-nsp\">Study on NSP</h4>\n<p>This is one of the more interesting discoveries in this paper. In the original BERT paper, they tried removing NSP loss and it hurt the performance quite a bit. However, in this paper they tried several settings, and they found out that if you remove NSP loss, and change the format of the input from two sentences to just one whole sentence instead, it performs better! (In the original BERT when they were trying to remove NSP, they still kept the 2 sentence input structure). Very weird but cool!</p>\n<h3 id=\"thoughts\">Thoughts?</h3>\n<p>There really isn’t that much to say about this paper, just that they did a more systematic evaluation on their previous choices. However, I feel like beside the study on the NSP objective, the other improvements like more data, more batches, is quite apparent when a model is undertrained, so this paper isn’t that interesting imo.</p>\n<h2 id=\"lora-low-rank-adaptation-of-large-language-models\"><a href=\"https://arxiv.org/pdf/2106.09685\">LoRA: Low-Rank Adaptation of Large Language Models</a></h2>\n<h3 id=\"why\">Why?</h3>\n<p>Usually when we adapt a general LLM to a specific dataset, we do a full finetuning, which is essentially just training all weights on this specific dataset. However, this is obviously very expensive, as most LLMs have several billion parameters. There has been quite some ideas to mitigate this like using task specific heads, but this increases inference latency and also doesn’t work as well compared to finetuning.</p>\n<h3 id=\"how\">How?</h3>\n<p>The idea stems from a previous research, which states these LLMs are usually over-parametrized, and that the weight matrices of an LLM are intrinsic low rank. That is, they all reside on a low dimention subspace, so we actually don’t need to use this big of a matrix to properly characterize the weights. Since the weights itself are low-rank, the authors hypothesized that the updated weights should naturally be low-rank as well. This also makes sense because adaptation focuses on more local features, which shouldn’t require that many dimensions to work with.</p>\n<p>For an adapted weight <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>W</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">W&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, we can think of it as the sum of the original weight <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> and the change of the weigt <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span>, so for an output we have</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>h</mi><mo>=</mo><msup><mi>W</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mi>x</mi><mo>=</mo><mi>W</mi><mi>x</mi><mo>+</mo><mi mathvariant=\"normal\">Δ</mi><mi>W</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">h = W&#x27;x = Wx + \\Delta W x\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.801892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.801892em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\">x</span></span></span></span></span></p>\n<p>Where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>W</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup></mrow><annotation encoding=\"application/x-tex\">W&#x27;</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> all have dimensions <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi mathvariant=\"double-struck\">R</mi><mrow><mi>d</mi><mo>×</mo><mi>k</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">\\mathbb{R}^{d \\times k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mbin mtight\">×</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span></span>.</p>\n<p>LoRA replaces <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">Δ</mi><mi>W</mi></mrow><annotation encoding=\"application/x-tex\">\\Delta W</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord\">Δ</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span></span></span></span> with two low rank matrices <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi><mo>∈</mo><msup><mi mathvariant=\"double-struck\">R</mi><mrow><mi>d</mi><mo>×</mo><mi>r</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">A \\in \\mathbb{R}^{d \\times r}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">d</span><span class=\"mbin mtight\">×</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi><mo>∈</mo><msup><mi mathvariant=\"double-struck\">R</mi><mrow><mi>r</mi><mo>×</mo><mi>k</mi></mrow></msup></mrow><annotation encoding=\"application/x-tex\">B \\in \\mathbb{R}^{r \\times k}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72243em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">∈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8491079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathbb\">R</span></span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8491079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span><span class=\"mbin mtight\">×</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span></span></span></span></span></span></span></span></span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi><mo>≪</mo><mi>min</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mi>d</mi><mo separator=\"true\">,</mo><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">r \\ll \\min(d,k)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≪</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mop\">min</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span>. Giving</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>h</mi><mo>=</mo><mi>W</mi><mi>x</mi><mo>+</mo><mi>A</mi><mi>B</mi><mi>x</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>W</mi><mo>+</mo><mi>A</mi><mi>B</mi><mo stretchy=\"false\">)</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">h = Wx + ABx = (W + AB)x\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span><span class=\"mclose\">)</span><span class=\"mord mathnormal\">x</span></span></span></span></span></p>\n<p>It’s far less complex training the two matrices <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>A</mi></mrow><annotation encoding=\"application/x-tex\">A</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">B</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span>, where originally we have <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mi>k</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(dk)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span></span></span></span>, and now only <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>r</mi><mo stretchy=\"false\">(</mo><mi>d</mi><mo>+</mo><mi>k</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(r(d+k))</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span></span></span></span>and during inference we can precompute <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>W</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>=</mo><mi>W</mi><mo>+</mo><mi>A</mi><mi>B</mi></mrow><annotation encoding=\"application/x-tex\">W&#x27; = W + AB</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.751892em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.76666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">W</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">A</span><span class=\"mord mathnormal\" style=\"margin-right:0.05017em;\">B</span></span></span></span> so there is also little latency.</p>\n<p>Its usually used in the 4 attention weights in transformers, and it also has a plug-and-play style, so we can effeciently adapt to and switch tasks.</p>\n<h3 id=\"thoughts\">Thoughts?</h3>\n<p>One interesting observation from the paper was that the low rank matrices was amplifying features that were important for the task but was not focused on in the general model. I’m wondering if doing full tuning we will also get this effect or not (I think it should, but maybe the updates are more general?)</p>\n<p>Anyways, interesting paper, easy yet effective idea.</p>\n"},{"title":"Recent Learnings and Contests","date":"2023-10-29T15:20:35.000Z","_content":"\nEhhh, all of these should've been separate blogs. But I was too lazy, and I don't want to do my art assignment so here we are.\n\n## [10/24 Round 904 (Div 2) Virtual](https://codeforces.com/contest/1884)\n\nVirtual Rank: 997 (According to Codeforces Anytime)\nAC Count: 3 / 5\n\nThis was one of the contests held in 10/22. pA and pB aren't really hard so I'm not gonna go over them here.\n\npC was a interesting one, because it is really similar to [E2. Array and Segments (Hard version)](https://codeforces.com/contest/1108/problem/E2), and I tried to just do the segment tree solution I used in it, but got TLE for some reason. After a few attempts and optimizations, I did pass this problem.\npD is a hard problem in my opinion. I originally thought of mobuis function, but it wasn't the case. I didn't solve this in contest, and I suffered from this problem for like two more days. I'm really not that good at number theory :(.\n\n## [10/24 Round 905 (Div 2) Virtual](https://codeforces.com/contest/1888)\n\nVirtual Rank: 131 (According to Codeforces Anytime)\nAC Count: 6 / 7\n\nI absolutely cooked this round. I got 2174 performance, which is the highest I've ever gotten.\nIn my opinion, E > B > A > C >= D2 > D1, which is a really weird distribution.\n\npA asks if we can make a string into a palindrome when we remove $k$ elements. I definitely over thought this question when in the editorial, it was sufficient to check if the number of odd occurences is not greater than $k + 1$.\n\n```cpp\nvoid solve() {\n    int n, k;\n    cin >> n >> k;\n    string s;\n    cin >> s;\n    map<char, int> m;\n    for(auto &i : s) m[i] += 1;\n    int single_cnt = 0, double_cnt = 0;\n    for(auto [_, cnt] : m) {\n        double_cnt += cnt / 2;\n        cnt %= 2;\n        single_cnt += cnt;\n    }\n    if((n - k) % 2 == 1) {\n        k -= (single_cnt - 1);\n        if(k < 0 || k % 2 == 1) {\n            cout << \"NO\" << endl;\n        } else {\n            cout << \"YES\" << endl;\n        }\n    } else {\n        k -= (single_cnt);\n        if(k < 0 || k % 2 == 1) {\n            cout << \"NO\" << endl;\n        } else {\n            cout << \"YES\" << endl;\n        }\n    }\n    return;\n}\n```\n\npB was a really tricky one. The problem gives you an array of integers, and you have an operation $a_i = a_i + 1$. It asks the minimum number of operations that makes the product of the array divisible by $k$ $(1 \\leq k \\leq  5$).\n\nThe first idea is we can make the array $[a_0, a_1, a_2 ... a_{n - 1}]$ into $[a_0 \\% k, a_1 \\% k ,..., a_{n - 1} \\% k]$,\nbecause of the fact that $(a \\cdot b) \\% k = ((a \\% k)  \\cdot (b \\% k)) \\% k$.\nObviously, if there is a $0$ in the array, the answer is $0$.\nElse, we want to try to find the number that is closest to $k$ (so we can do the operation until it is k).\nBut this does not work in all cases, for example, $[1, 1], k = 4$, the answer should be $2$ (add 1 on both elements).\nI was stuck we for a while, but notice the constraint for $k$! It turns out, the case I mentioned would only occur for $4$! for $2, 3, 5$, we can just check it as usual, while we need to also check the way to make 2 2's when $k = 4$.\n\n```cpp\nvoid solve() {\n    int n, k;\n    cin >> n >> k;\n    vi vec(n), cntr(k);\n    int ans = INF;\n    int sum = 1;\n    for(int i = 0; i < n; i++) {\n        cin >> vec[i];\n        vec[i] %= k;\n        cntr[vec[i]] += 1; \n    }\n    if(cntr[0]) {\n        cout << 0 << endl;\n        return;\n    }\n    if(k == 4) {\n        if(cntr[2] >= 2) cout << 0 << endl;\n        else if(cntr[3]) cout << 1 << endl;\n        else if(cntr[2] == 1 && cntr[1] >= 1) cout << 1 << endl;\n        else if(cntr[1] >= 2) cout << 2 << endl;\n        else {\n            int ans = INF;\n            for(int i = 1; i <= 3; i++) {\n                if(cntr[i]) {\n                    ans = min(ans, 4 - i);\n                }\n            }\n            cout << ans << endl;\n        }\n    } else {\n        int ans = INF;\n        for(int i = 1; i <= k - 1; i++) {\n            if(cntr[i]) {\n                ans = min(ans, k - i);\n            }\n        }\n        cout << ans << endl;        \n    }\n    return;\n}\n```\n\npC was extremely easy for me. I solved it in under 7 minutes!\nThe problem is: Given an array, calculate the number of subarrays such that it occurs in the array as a subsequence exactly once.\n\nLets say if we have a subarray $a[l, r]$, if this subarray occurs in the array as a subsequence more than once, this implies that there exists (at least) one $r' > r$ s.t $a[r'] = a[r]$, or (at least) one $l' < r$ s.t $a[l'] = a[l]$, or even both.\nSo, we can find candidates for left/right end point by checking if there isn't the same element on its left/right.\n\nExample:\n\n$1$ $7$ $7$ $2$ $3$ $4$ $3$ $2$ $1$ -> the array\n$1$ $1$ $0$ $1$ $1$ $1$ $0$ $0$ $0$ -> potential left endpoint candidates\n$0$ $0$ $1$ $0$ $0$ $1$ $1$ $1$ $1$ -> potential right endpoint candidates\n\nThen the answer is just the sum of for each end point, the number of right candidates on its right.\nWe can calculate this quickly by using an prefix sum.\n\n```cpp\nvoid solve() {\n    int n;\n    cin >> n;\n    vi vec(n + 1, 0);\n    for(int i = 1; i <= n; i++) cin >> vec[i];\n    set<int> s;\n    vector<int> rightcan(n + 2, 0); // i can be used as a right index\n    for(int i = n; i >= 1; i--) {\n        if(s.find(vec[i]) == s.end()) rightcan[i] += 1;\n        rightcan[i] += rightcan[i + 1];\n        s.insert(vec[i]);\n    }\n    s.clear();\n    int ans = 0;\n    for(int i = 1; i <= n; i++) {\n        if(s.find(vec[i]) == s.end()) ans += rightcan[i];\n        s.insert(vec[i]);\n    }\n    cout << ans << endl;\n    return;\n}\n```\n\n(2024/02/20 edit) I actually noticed I haven't finished this yet... maybe one day..?\n","source":"_posts/Recent-Learnings-and-Contests.md","raw":"---\ntitle: Recent Learnings and Contests\ndate: 2023-10-29 10:20:35\ntags: [\"CP\"]\n---\n\nEhhh, all of these should've been separate blogs. But I was too lazy, and I don't want to do my art assignment so here we are.\n\n## [10/24 Round 904 (Div 2) Virtual](https://codeforces.com/contest/1884)\n\nVirtual Rank: 997 (According to Codeforces Anytime)\nAC Count: 3 / 5\n\nThis was one of the contests held in 10/22. pA and pB aren't really hard so I'm not gonna go over them here.\n\npC was a interesting one, because it is really similar to [E2. Array and Segments (Hard version)](https://codeforces.com/contest/1108/problem/E2), and I tried to just do the segment tree solution I used in it, but got TLE for some reason. After a few attempts and optimizations, I did pass this problem.\npD is a hard problem in my opinion. I originally thought of mobuis function, but it wasn't the case. I didn't solve this in contest, and I suffered from this problem for like two more days. I'm really not that good at number theory :(.\n\n## [10/24 Round 905 (Div 2) Virtual](https://codeforces.com/contest/1888)\n\nVirtual Rank: 131 (According to Codeforces Anytime)\nAC Count: 6 / 7\n\nI absolutely cooked this round. I got 2174 performance, which is the highest I've ever gotten.\nIn my opinion, E > B > A > C >= D2 > D1, which is a really weird distribution.\n\npA asks if we can make a string into a palindrome when we remove $k$ elements. I definitely over thought this question when in the editorial, it was sufficient to check if the number of odd occurences is not greater than $k + 1$.\n\n```cpp\nvoid solve() {\n    int n, k;\n    cin >> n >> k;\n    string s;\n    cin >> s;\n    map<char, int> m;\n    for(auto &i : s) m[i] += 1;\n    int single_cnt = 0, double_cnt = 0;\n    for(auto [_, cnt] : m) {\n        double_cnt += cnt / 2;\n        cnt %= 2;\n        single_cnt += cnt;\n    }\n    if((n - k) % 2 == 1) {\n        k -= (single_cnt - 1);\n        if(k < 0 || k % 2 == 1) {\n            cout << \"NO\" << endl;\n        } else {\n            cout << \"YES\" << endl;\n        }\n    } else {\n        k -= (single_cnt);\n        if(k < 0 || k % 2 == 1) {\n            cout << \"NO\" << endl;\n        } else {\n            cout << \"YES\" << endl;\n        }\n    }\n    return;\n}\n```\n\npB was a really tricky one. The problem gives you an array of integers, and you have an operation $a_i = a_i + 1$. It asks the minimum number of operations that makes the product of the array divisible by $k$ $(1 \\leq k \\leq  5$).\n\nThe first idea is we can make the array $[a_0, a_1, a_2 ... a_{n - 1}]$ into $[a_0 \\% k, a_1 \\% k ,..., a_{n - 1} \\% k]$,\nbecause of the fact that $(a \\cdot b) \\% k = ((a \\% k)  \\cdot (b \\% k)) \\% k$.\nObviously, if there is a $0$ in the array, the answer is $0$.\nElse, we want to try to find the number that is closest to $k$ (so we can do the operation until it is k).\nBut this does not work in all cases, for example, $[1, 1], k = 4$, the answer should be $2$ (add 1 on both elements).\nI was stuck we for a while, but notice the constraint for $k$! It turns out, the case I mentioned would only occur for $4$! for $2, 3, 5$, we can just check it as usual, while we need to also check the way to make 2 2's when $k = 4$.\n\n```cpp\nvoid solve() {\n    int n, k;\n    cin >> n >> k;\n    vi vec(n), cntr(k);\n    int ans = INF;\n    int sum = 1;\n    for(int i = 0; i < n; i++) {\n        cin >> vec[i];\n        vec[i] %= k;\n        cntr[vec[i]] += 1; \n    }\n    if(cntr[0]) {\n        cout << 0 << endl;\n        return;\n    }\n    if(k == 4) {\n        if(cntr[2] >= 2) cout << 0 << endl;\n        else if(cntr[3]) cout << 1 << endl;\n        else if(cntr[2] == 1 && cntr[1] >= 1) cout << 1 << endl;\n        else if(cntr[1] >= 2) cout << 2 << endl;\n        else {\n            int ans = INF;\n            for(int i = 1; i <= 3; i++) {\n                if(cntr[i]) {\n                    ans = min(ans, 4 - i);\n                }\n            }\n            cout << ans << endl;\n        }\n    } else {\n        int ans = INF;\n        for(int i = 1; i <= k - 1; i++) {\n            if(cntr[i]) {\n                ans = min(ans, k - i);\n            }\n        }\n        cout << ans << endl;        \n    }\n    return;\n}\n```\n\npC was extremely easy for me. I solved it in under 7 minutes!\nThe problem is: Given an array, calculate the number of subarrays such that it occurs in the array as a subsequence exactly once.\n\nLets say if we have a subarray $a[l, r]$, if this subarray occurs in the array as a subsequence more than once, this implies that there exists (at least) one $r' > r$ s.t $a[r'] = a[r]$, or (at least) one $l' < r$ s.t $a[l'] = a[l]$, or even both.\nSo, we can find candidates for left/right end point by checking if there isn't the same element on its left/right.\n\nExample:\n\n$1$ $7$ $7$ $2$ $3$ $4$ $3$ $2$ $1$ -> the array\n$1$ $1$ $0$ $1$ $1$ $1$ $0$ $0$ $0$ -> potential left endpoint candidates\n$0$ $0$ $1$ $0$ $0$ $1$ $1$ $1$ $1$ -> potential right endpoint candidates\n\nThen the answer is just the sum of for each end point, the number of right candidates on its right.\nWe can calculate this quickly by using an prefix sum.\n\n```cpp\nvoid solve() {\n    int n;\n    cin >> n;\n    vi vec(n + 1, 0);\n    for(int i = 1; i <= n; i++) cin >> vec[i];\n    set<int> s;\n    vector<int> rightcan(n + 2, 0); // i can be used as a right index\n    for(int i = n; i >= 1; i--) {\n        if(s.find(vec[i]) == s.end()) rightcan[i] += 1;\n        rightcan[i] += rightcan[i + 1];\n        s.insert(vec[i]);\n    }\n    s.clear();\n    int ans = 0;\n    for(int i = 1; i <= n; i++) {\n        if(s.find(vec[i]) == s.end()) ans += rightcan[i];\n        s.insert(vec[i]);\n    }\n    cout << ans << endl;\n    return;\n}\n```\n\n(2024/02/20 edit) I actually noticed I haven't finished this yet... maybe one day..?\n","slug":"Recent-Learnings-and-Contests","published":1,"updated":"2024-12-26T01:29:58.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblh60018b0u9b4oke8hb","content":"<p>Ehhh, all of these should’ve been separate blogs. But I was too lazy, and I don’t want to do my art assignment so here we are.</p>\n<h2 id=\"10-24-round-904-div-2-virtual\"><a href=\"https://codeforces.com/contest/1884\">10/24 Round 904 (Div 2) Virtual</a></h2>\n<p>Virtual Rank: 997 (According to Codeforces Anytime)<br>\nAC Count: 3 / 5</p>\n<p>This was one of the contests held in 10/22. pA and pB aren’t really hard so I’m not gonna go over them here.</p>\n<p>pC was a interesting one, because it is really similar to <a href=\"https://codeforces.com/contest/1108/problem/E2\">E2. Array and Segments (Hard version)</a>, and I tried to just do the segment tree solution I used in it, but got TLE for some reason. After a few attempts and optimizations, I did pass this problem.<br>\npD is a hard problem in my opinion. I originally thought of mobuis function, but it wasn’t the case. I didn’t solve this in contest, and I suffered from this problem for like two more days. I’m really not that good at number theory :(.</p>\n<h2 id=\"10-24-round-905-div-2-virtual\"><a href=\"https://codeforces.com/contest/1888\">10/24 Round 905 (Div 2) Virtual</a></h2>\n<p>Virtual Rank: 131 (According to Codeforces Anytime)<br>\nAC Count: 6 / 7</p>\n<p>I absolutely cooked this round. I got 2174 performance, which is the highest I’ve ever gotten.<br>\nIn my opinion, E &gt; B &gt; A &gt; C &gt;= D2 &gt; D1, which is a really weird distribution.</p>\n<p>pA asks if we can make a string into a palindrome when we remove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> elements. I definitely over thought this question when in the editorial, it was sufficient to check if the number of odd occurences is not greater than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">k + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    map&lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;i : s) m[i] += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> single_cnt = <span class=\"number\">0</span>, double_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [_, cnt] : m) &#123;</span><br><span class=\"line\">        double_cnt += cnt / <span class=\"number\">2</span>;</span><br><span class=\"line\">        cnt %= <span class=\"number\">2</span>;</span><br><span class=\"line\">        single_cnt += cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((n - k) % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        k -= (single_cnt - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k &lt; <span class=\"number\">0</span> || k % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        k -= (single_cnt);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k &lt; <span class=\"number\">0</span> || k % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>pB was a really tricky one. The problem gives you an array of integers, and you have an operation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a_i = a_i + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>. It asks the minimum number of operations that makes the product of the array divisible by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">(1 \\leq k \\leq  5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span></span></span></span>).</p>\n<p>The first idea is we can make the array <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><msub><mi>a</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>2</mn></msub><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a_0, a_1, a_2 ... a_{n - 1}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><msub><mi>a</mi><mn>0</mn></msub><mi mathvariant=\"normal\">%</mi><mi>k</mi><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>1</mn></msub><mi mathvariant=\"normal\">%</mi><mi>k</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mi mathvariant=\"normal\">%</mi><mi>k</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a_0 \\% k, a_1 \\% k ,..., a_{n - 1} \\% k]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">%</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">%</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mord\">%</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">]</span></span></span></span>,<br>\nbecause of the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo>⋅</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">%</mi><mi>k</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mi mathvariant=\"normal\">%</mi><mi>k</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mo stretchy=\"false\">(</mo><mi>b</mi><mi mathvariant=\"normal\">%</mi><mi>k</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">%</mi><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">(a \\cdot b) \\% k = ((a \\% k)  \\cdot (b \\% k)) \\% k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mord\">%</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mord\">%</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mord\">%</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mord\">%</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>.<br>\nObviously, if there is a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> in the array, the answer is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>.<br>\nElse, we want to try to find the number that is closest to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> (so we can do the operation until it is k).<br>\nBut this does not work in all cases, for example, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mi>k</mi><mo>=</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">[1, 1], k = 4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>, the answer should be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> (add 1 on both elements).<br>\nI was stuck we for a while, but notice the constraint for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>! It turns out, the case I mentioned would only occur for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>! for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">2, 3, 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span></span></span></span>, we can just check it as usual, while we need to also check the way to make 2 2’s when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">k = 4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"function\">vi <span class=\"title\">vec</span><span class=\"params\">(n)</span>, <span class=\"title\">cntr</span><span class=\"params\">(k)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = INF;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; vec[i];</span><br><span class=\"line\">        vec[i] %= k;</span><br><span class=\"line\">        cntr[vec[i]] += <span class=\"number\">1</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cntr[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"number\">0</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cntr[<span class=\"number\">2</span>] &gt;= <span class=\"number\">2</span>) cout &lt;&lt; <span class=\"number\">0</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cntr[<span class=\"number\">3</span>]) cout &lt;&lt; <span class=\"number\">1</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cntr[<span class=\"number\">2</span>] == <span class=\"number\">1</span> &amp;&amp; cntr[<span class=\"number\">1</span>] &gt;= <span class=\"number\">1</span>) cout &lt;&lt; <span class=\"number\">1</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cntr[<span class=\"number\">1</span>] &gt;= <span class=\"number\">2</span>) cout &lt;&lt; <span class=\"number\">2</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> ans = INF;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cntr[i]) &#123;</span><br><span class=\"line\">                    ans = <span class=\"built_in\">min</span>(ans, <span class=\"number\">4</span> - i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = INF;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= k - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cntr[i]) &#123;</span><br><span class=\"line\">                ans = <span class=\"built_in\">min</span>(ans, k - i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; ans &lt;&lt; endl;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>pC was extremely easy for me. I solved it in under 7 minutes!<br>\nThe problem is: Given an array, calculate the number of subarrays such that it occurs in the array as a subsequence exactly once.</p>\n<p>Lets say if we have a subarray <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[l, r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>, if this subarray occurs in the array as a subsequence more than once, this implies that there exists (at least) one <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>&gt;</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r&#x27; &gt; r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.790992em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> s.t <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">]</mo><mo>=</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[r&#x27;] = a[r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>, or (at least) one <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>l</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>&lt;</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">l&#x27; &lt; r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.790992em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> s.t <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><msup><mi>l</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">]</mo><mo>=</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[l&#x27;] = a[l]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mclose\">]</span></span></span></span>, or even both.<br>\nSo, we can find candidates for left/right end point by checking if there isn’t the same element on its left/right.</p>\n<p>Example:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">7</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">7</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> -&gt; the array<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> -&gt; potential left endpoint candidates<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> -&gt; potential right endpoint candidates</p>\n<p>Then the answer is just the sum of for each end point, the number of right candidates on its right.<br>\nWe can calculate this quickly by using an prefix sum.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vi <span class=\"title\">vec</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) cin &gt;&gt; vec[i];</span><br><span class=\"line\">    set&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">rightcan</span><span class=\"params\">(n + <span class=\"number\">2</span>, <span class=\"number\">0</span>)</span></span>; <span class=\"comment\">// i can be used as a right index</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n; i &gt;= <span class=\"number\">1</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.<span class=\"built_in\">find</span>(vec[i]) == s.<span class=\"built_in\">end</span>()) rightcan[i] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        rightcan[i] += rightcan[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">        s.<span class=\"built_in\">insert</span>(vec[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.<span class=\"built_in\">find</span>(vec[i]) == s.<span class=\"built_in\">end</span>()) ans += rightcan[i];</span><br><span class=\"line\">        s.<span class=\"built_in\">insert</span>(vec[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2024/02/20 edit) I actually noticed I haven’t finished this yet… maybe one day…?</p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>Ehhh, all of these should’ve been separate blogs. But I was too lazy, and I don’t want to do my art assignment so here we are.</p>\n<h2 id=\"10-24-round-904-div-2-virtual\"><a href=\"https://codeforces.com/contest/1884\">10/24 Round 904 (Div 2) Virtual</a></h2>\n<p>Virtual Rank: 997 (According to Codeforces Anytime)<br>\nAC Count: 3 / 5</p>\n<p>This was one of the contests held in 10/22. pA and pB aren’t really hard so I’m not gonna go over them here.</p>\n<p>pC was a interesting one, because it is really similar to <a href=\"https://codeforces.com/contest/1108/problem/E2\">E2. Array and Segments (Hard version)</a>, and I tried to just do the segment tree solution I used in it, but got TLE for some reason. After a few attempts and optimizations, I did pass this problem.<br>\npD is a hard problem in my opinion. I originally thought of mobuis function, but it wasn’t the case. I didn’t solve this in contest, and I suffered from this problem for like two more days. I’m really not that good at number theory :(.</p>\n<h2 id=\"10-24-round-905-div-2-virtual\"><a href=\"https://codeforces.com/contest/1888\">10/24 Round 905 (Div 2) Virtual</a></h2>\n<p>Virtual Rank: 131 (According to Codeforces Anytime)<br>\nAC Count: 6 / 7</p>\n<p>I absolutely cooked this round. I got 2174 performance, which is the highest I’ve ever gotten.<br>\nIn my opinion, E &gt; B &gt; A &gt; C &gt;= D2 &gt; D1, which is a really weird distribution.</p>\n<p>pA asks if we can make a string into a palindrome when we remove <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> elements. I definitely over thought this question when in the editorial, it was sufficient to check if the number of odd occurences is not greater than <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">k + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.77777em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    string s;</span><br><span class=\"line\">    cin &gt;&gt; s;</span><br><span class=\"line\">    map&lt;<span class=\"type\">char</span>, <span class=\"type\">int</span>&gt; m;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;i : s) m[i] += <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> single_cnt = <span class=\"number\">0</span>, double_cnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> [_, cnt] : m) &#123;</span><br><span class=\"line\">        double_cnt += cnt / <span class=\"number\">2</span>;</span><br><span class=\"line\">        cnt %= <span class=\"number\">2</span>;</span><br><span class=\"line\">        single_cnt += cnt;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>((n - k) % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        k -= (single_cnt - <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k &lt; <span class=\"number\">0</span> || k % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        k -= (single_cnt);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(k &lt; <span class=\"number\">0</span> || k % <span class=\"number\">2</span> == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>pB was a really tricky one. The problem gives you an array of integers, and you have an operation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">a_i = a_i + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>. It asks the minimum number of operations that makes the product of the array divisible by <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">(1 \\leq k \\leq  5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span></span></span></span>).</p>\n<p>The first idea is we can make the array <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><msub><mi>a</mi><mn>0</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>2</mn></msub><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a_0, a_1, a_2 ... a_{n - 1}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mclose\">]</span></span></span></span> into <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><msub><mi>a</mi><mn>0</mn></msub><mi mathvariant=\"normal\">%</mi><mi>k</mi><mo separator=\"true\">,</mo><msub><mi>a</mi><mn>1</mn></msub><mi mathvariant=\"normal\">%</mi><mi>k</mi><mo separator=\"true\">,</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo separator=\"true\">,</mo><msub><mi>a</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mi mathvariant=\"normal\">%</mi><mi>k</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[a_0 \\% k, a_1 \\% k ,..., a_{n - 1} \\% k]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">%</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">%</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.301108em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mord\">%</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">]</span></span></span></span>,<br>\nbecause of the fact that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>a</mi><mo>⋅</mo><mi>b</mi><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">%</mi><mi>k</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">(</mo><mi>a</mi><mi mathvariant=\"normal\">%</mi><mi>k</mi><mo stretchy=\"false\">)</mo><mo>⋅</mo><mo stretchy=\"false\">(</mo><mi>b</mi><mi mathvariant=\"normal\">%</mi><mi>k</mi><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mi mathvariant=\"normal\">%</mi><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">(a \\cdot b) \\% k = ((a \\% k)  \\cdot (b \\% k)) \\% k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">b</span><span class=\"mclose\">)</span><span class=\"mord\">%</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">a</span><span class=\"mord\">%</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">b</span><span class=\"mord\">%</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mord\">%</span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>.<br>\nObviously, if there is a <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> in the array, the answer is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>.<br>\nElse, we want to try to find the number that is closest to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> (so we can do the operation until it is k).<br>\nBut this does not work in all cases, for example, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>1</mn><mo separator=\"true\">,</mo><mn>1</mn><mo stretchy=\"false\">]</mo><mo separator=\"true\">,</mo><mi>k</mi><mo>=</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">[1, 1], k = 4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>, the answer should be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> (add 1 on both elements).<br>\nI was stuck we for a while, but notice the constraint for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span>! It turns out, the case I mentioned would only occur for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>! for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn><mo separator=\"true\">,</mo><mn>3</mn><mo separator=\"true\">,</mo><mn>5</mn></mrow><annotation encoding=\"application/x-tex\">2, 3, 5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8388800000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\">2</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">3</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\">5</span></span></span></span>, we can just check it as usual, while we need to also check the way to make 2 2’s when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi><mo>=</mo><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">k = 4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"function\">vi <span class=\"title\">vec</span><span class=\"params\">(n)</span>, <span class=\"title\">cntr</span><span class=\"params\">(k)</span></span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = INF;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; vec[i];</span><br><span class=\"line\">        vec[i] %= k;</span><br><span class=\"line\">        cntr[vec[i]] += <span class=\"number\">1</span>; </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(cntr[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"number\">0</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(k == <span class=\"number\">4</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cntr[<span class=\"number\">2</span>] &gt;= <span class=\"number\">2</span>) cout &lt;&lt; <span class=\"number\">0</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cntr[<span class=\"number\">3</span>]) cout &lt;&lt; <span class=\"number\">1</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cntr[<span class=\"number\">2</span>] == <span class=\"number\">1</span> &amp;&amp; cntr[<span class=\"number\">1</span>] &gt;= <span class=\"number\">1</span>) cout &lt;&lt; <span class=\"number\">1</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(cntr[<span class=\"number\">1</span>] &gt;= <span class=\"number\">2</span>) cout &lt;&lt; <span class=\"number\">2</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> ans = INF;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">3</span>; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(cntr[i]) &#123;</span><br><span class=\"line\">                    ans = <span class=\"built_in\">min</span>(ans, <span class=\"number\">4</span> - i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> ans = INF;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= k - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cntr[i]) &#123;</span><br><span class=\"line\">                ans = <span class=\"built_in\">min</span>(ans, k - i);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; ans &lt;&lt; endl;        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>pC was extremely easy for me. I solved it in under 7 minutes!<br>\nThe problem is: Given an array, calculate the number of subarrays such that it occurs in the array as a subsequence exactly once.</p>\n<p>Lets say if we have a subarray <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[l, r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>, if this subarray occurs in the array as a subsequence more than once, this implies that there exists (at least) one <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>&gt;</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r&#x27; &gt; r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.790992em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> s.t <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><msup><mi>r</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">]</mo><mo>=</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[r&#x27;] = a[r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>, or (at least) one <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>l</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo>&lt;</mo><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">l&#x27; &lt; r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.790992em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span> s.t <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><msup><mi>l</mi><mo mathvariant=\"normal\" lspace=\"0em\" rspace=\"0em\">′</mo></msup><mo stretchy=\"false\">]</mo><mo>=</mo><mi>a</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[l&#x27;] = a[l]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.001892em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.751892em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">′</span></span></span></span></span></span></span></span></span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mclose\">]</span></span></span></span>, or even both.<br>\nSo, we can find candidates for left/right end point by checking if there isn’t the same element on its left/right.</p>\n<p>Example:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">7</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">7</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> -&gt; the array<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> -&gt; potential left endpoint candidates<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> -&gt; potential right endpoint candidates</p>\n<p>Then the answer is just the sum of for each end point, the number of right candidates on its right.<br>\nWe can calculate this quickly by using an prefix sum.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vi <span class=\"title\">vec</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) cin &gt;&gt; vec[i];</span><br><span class=\"line\">    set&lt;<span class=\"type\">int</span>&gt; s;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">rightcan</span><span class=\"params\">(n + <span class=\"number\">2</span>, <span class=\"number\">0</span>)</span></span>; <span class=\"comment\">// i can be used as a right index</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = n; i &gt;= <span class=\"number\">1</span>; i--) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.<span class=\"built_in\">find</span>(vec[i]) == s.<span class=\"built_in\">end</span>()) rightcan[i] += <span class=\"number\">1</span>;</span><br><span class=\"line\">        rightcan[i] += rightcan[i + <span class=\"number\">1</span>];</span><br><span class=\"line\">        s.<span class=\"built_in\">insert</span>(vec[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    s.<span class=\"built_in\">clear</span>();</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(s.<span class=\"built_in\">find</span>(vec[i]) == s.<span class=\"built_in\">end</span>()) ans += rightcan[i];</span><br><span class=\"line\">        s.<span class=\"built_in\">insert</span>(vec[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>(2024/02/20 edit) I actually noticed I haven’t finished this yet… maybe one day…?</p>\n"},{"title":"Quick Review of Janurary","date":"2024-02-04T18:50:15.000Z","_content":"Hey guys! There are quite alot of things that happened in Janurary, so why not I make a quick recap?\n\nThe first biggest thing I done was skipping calculus 2 & 3 in 1 month without much prior experience. The reason I wanted to do that is because I'm seriously considering double majoring in math, and so I wanted to take proof-based linear algebra instead of computational based ones, which requires multivariable calculus (The computational one needs calc 2 too, so I kinda had to at least pass one of two).\n\nLuckily, I feel like US universities have very easy problems for tests, so I knew this is achievable.\nI first started studying calc 2, and honestly it wasn't that bad. integration techniques are quite easy once you know how to identify them, and for series tests its really also just experience, even if one test fails you can always just try other ideas. For taylor series you kinda just memorize the formula and it should be okay. Vectors and planes were pretty easy for me too, as I've already learned them in highschool, and its also a big topic in calc 3 so I wasn't really worried for it.\n\nAll in all, it took me around 1 week to finish calc 2 and a couple of days to really refine my skills for it.\n\nNext, I started studying calc 3, and I personally think its way harder than calc 2 conseptually. Theres basically two main parts of calc 3, one is partial derivatives and gradients and stuff like that, its pretty easy (at least for me) and I blazed through the first half of calc 3 very quickly.\nThe problem arises from all the new integrals. The tricky part about double/triple integrals is determining the bounds or the integral, as I don't really have alot of time to familiar myself with all the graphs and having the ability to sketch the graph, I did everything purely numerically, which is actually quite difficult because you are integrating something you don't know what it looks like.\nLine integrals and Surface integrals can be reduced to double/triple integrals so it's not a big deal, just that its really computational heavy, and also theres formulas for vector fields/scalar functions, parametric or normal, which makes it feel very complicated when you don't know whats going on. I recommend trying to relate everything together and really understanding why the formula is as such instead of just remembering them.\nThe last part of calculus 3 is the three big theorems: Greens Theorem, Stokes Theorem and Divergence Theorem. They are not really hard to memorize at all, and most of the time the problems are obvious enough for you to just use the theorems.\n\nIn summary, calc 3 was trickier than calc 2, but through some understanding it was alright.\n\nNow in test day, I was pretty worried when I first saw the calc 2 exam, it was quite a hard exam at least compared to all the past in class finals. The computation was quite heavy, and a couple problems required me to use some tricks that I knew (I used $\\text{log}(n) \\leq \\sqrt n$ a couple of times), and there were some IBPs and squeeze theorems used to test for convergence/divergence that isn't completely obvious. There was one problem about finding the degree 3 taylor polynomial of $e^{x^2}cos(x)$, which I think they were talking about order instead of degree, as the coefficient of odd terms for both $e^{x^2}$ and $cos(x)$ are both zero, but I was worried that its just I didn't study enough and so I didn't ask if the problem was wrong.\n\nAfter two hours of trying to find a non-existent term in a taylor polynomial, I had to start taking calc 3 exam immediately (I had to take exams back to back, which is 4 hours of calc tests in total). Luckily, the calc 3 exam was much easier than calc 2, and I finished it in under half a hour, but because I was too tired after the calc 2 exam, I was alot of calculation errors when I first wrote it, luckily I think I fixed most of them I can identify so I was quite confident with my calc 3 score.\n\nNow, how did I do in the tests?\n\n![score](score.png)\n\nYep, I passed all the exams :D (>= 75 to pass)\n\nThis is honestly a very big achievement for me, as I have always saw myself as someone horrible at math, but I managed to pass exams in one month that normal classes would take a whole year!\n\nAfter this, I swapped out my calc 2 class to MATH 341: Linear Algebra, which is the proof-based class I wanted to take, and I'm currently enjoying proving stuff with axioms, its just so satisfying!\n\nI also got in a grad-level course, which is CS 760: Machine Learning. I took it because 1) I couldn't do undergrad machine learning because of prerequisites (Why does my school don't have APs bruh), so I just took the grad version instead, as the only prerequisite for grad courses is having graduate standing, which you can bypass by communicating with the professor. 2) I am quite passionate about ML/DL, and I've already had quite some experience with it (I know like 90% of the course material, just much more high level than what the course is teaching), and also taking this class will allow me to take CS 762: Advanced Deep Learning, which is the real deal here.\n\nCurrently, I'm struggling quite a bit with the probability/statistics and notation parts of the course, as I kinda don't have much exposure to it, but I'll try my best to understand fully!\n\nLastly, I'm currently applying to summer REU (Research Experiences for Undergraduates) programs, I hope I can get into at least one of them so I can accumulate research experience over the summer!\n\nThats kinda the major stuff I've done in Janurary, and I also haven't broken any new years resolutions yet, yay! I did make doing 5 problems everyday on CF into do problems everyday on CF, because forcing myself doing 5 problems only made me do easy 800~1000 problems alot of the time because of time pressure, but I'll continue to try my best!\n","source":"_posts/Quick-Review-of-Janurary.md","raw":"---\ntitle: Quick Review of Janurary\ndate: 2024-02-04 12:50:15\ntags: [\"Life\"]\n---\nHey guys! There are quite alot of things that happened in Janurary, so why not I make a quick recap?\n\nThe first biggest thing I done was skipping calculus 2 & 3 in 1 month without much prior experience. The reason I wanted to do that is because I'm seriously considering double majoring in math, and so I wanted to take proof-based linear algebra instead of computational based ones, which requires multivariable calculus (The computational one needs calc 2 too, so I kinda had to at least pass one of two).\n\nLuckily, I feel like US universities have very easy problems for tests, so I knew this is achievable.\nI first started studying calc 2, and honestly it wasn't that bad. integration techniques are quite easy once you know how to identify them, and for series tests its really also just experience, even if one test fails you can always just try other ideas. For taylor series you kinda just memorize the formula and it should be okay. Vectors and planes were pretty easy for me too, as I've already learned them in highschool, and its also a big topic in calc 3 so I wasn't really worried for it.\n\nAll in all, it took me around 1 week to finish calc 2 and a couple of days to really refine my skills for it.\n\nNext, I started studying calc 3, and I personally think its way harder than calc 2 conseptually. Theres basically two main parts of calc 3, one is partial derivatives and gradients and stuff like that, its pretty easy (at least for me) and I blazed through the first half of calc 3 very quickly.\nThe problem arises from all the new integrals. The tricky part about double/triple integrals is determining the bounds or the integral, as I don't really have alot of time to familiar myself with all the graphs and having the ability to sketch the graph, I did everything purely numerically, which is actually quite difficult because you are integrating something you don't know what it looks like.\nLine integrals and Surface integrals can be reduced to double/triple integrals so it's not a big deal, just that its really computational heavy, and also theres formulas for vector fields/scalar functions, parametric or normal, which makes it feel very complicated when you don't know whats going on. I recommend trying to relate everything together and really understanding why the formula is as such instead of just remembering them.\nThe last part of calculus 3 is the three big theorems: Greens Theorem, Stokes Theorem and Divergence Theorem. They are not really hard to memorize at all, and most of the time the problems are obvious enough for you to just use the theorems.\n\nIn summary, calc 3 was trickier than calc 2, but through some understanding it was alright.\n\nNow in test day, I was pretty worried when I first saw the calc 2 exam, it was quite a hard exam at least compared to all the past in class finals. The computation was quite heavy, and a couple problems required me to use some tricks that I knew (I used $\\text{log}(n) \\leq \\sqrt n$ a couple of times), and there were some IBPs and squeeze theorems used to test for convergence/divergence that isn't completely obvious. There was one problem about finding the degree 3 taylor polynomial of $e^{x^2}cos(x)$, which I think they were talking about order instead of degree, as the coefficient of odd terms for both $e^{x^2}$ and $cos(x)$ are both zero, but I was worried that its just I didn't study enough and so I didn't ask if the problem was wrong.\n\nAfter two hours of trying to find a non-existent term in a taylor polynomial, I had to start taking calc 3 exam immediately (I had to take exams back to back, which is 4 hours of calc tests in total). Luckily, the calc 3 exam was much easier than calc 2, and I finished it in under half a hour, but because I was too tired after the calc 2 exam, I was alot of calculation errors when I first wrote it, luckily I think I fixed most of them I can identify so I was quite confident with my calc 3 score.\n\nNow, how did I do in the tests?\n\n![score](score.png)\n\nYep, I passed all the exams :D (>= 75 to pass)\n\nThis is honestly a very big achievement for me, as I have always saw myself as someone horrible at math, but I managed to pass exams in one month that normal classes would take a whole year!\n\nAfter this, I swapped out my calc 2 class to MATH 341: Linear Algebra, which is the proof-based class I wanted to take, and I'm currently enjoying proving stuff with axioms, its just so satisfying!\n\nI also got in a grad-level course, which is CS 760: Machine Learning. I took it because 1) I couldn't do undergrad machine learning because of prerequisites (Why does my school don't have APs bruh), so I just took the grad version instead, as the only prerequisite for grad courses is having graduate standing, which you can bypass by communicating with the professor. 2) I am quite passionate about ML/DL, and I've already had quite some experience with it (I know like 90% of the course material, just much more high level than what the course is teaching), and also taking this class will allow me to take CS 762: Advanced Deep Learning, which is the real deal here.\n\nCurrently, I'm struggling quite a bit with the probability/statistics and notation parts of the course, as I kinda don't have much exposure to it, but I'll try my best to understand fully!\n\nLastly, I'm currently applying to summer REU (Research Experiences for Undergraduates) programs, I hope I can get into at least one of them so I can accumulate research experience over the summer!\n\nThats kinda the major stuff I've done in Janurary, and I also haven't broken any new years resolutions yet, yay! I did make doing 5 problems everyday on CF into do problems everyday on CF, because forcing myself doing 5 problems only made me do easy 800~1000 problems alot of the time because of time pressure, but I'll continue to try my best!\n","slug":"Quick-Review-of-Janurary","published":1,"updated":"2024-12-26T01:29:58.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblh7001ab0u9h0rnecht","content":"<p>Hey guys! There are quite alot of things that happened in Janurary, so why not I make a quick recap?</p>\n<p>The first biggest thing I done was skipping calculus 2 &amp; 3 in 1 month without much prior experience. The reason I wanted to do that is because I’m seriously considering double majoring in math, and so I wanted to take proof-based linear algebra instead of computational based ones, which requires multivariable calculus (The computational one needs calc 2 too, so I kinda had to at least pass one of two).</p>\n<p>Luckily, I feel like US universities have very easy problems for tests, so I knew this is achievable.<br>\nI first started studying calc 2, and honestly it wasn’t that bad. integration techniques are quite easy once you know how to identify them, and for series tests its really also just experience, even if one test fails you can always just try other ideas. For taylor series you kinda just memorize the formula and it should be okay. Vectors and planes were pretty easy for me too, as I’ve already learned them in highschool, and its also a big topic in calc 3 so I wasn’t really worried for it.</p>\n<p>All in all, it took me around 1 week to finish calc 2 and a couple of days to really refine my skills for it.</p>\n<p>Next, I started studying calc 3, and I personally think its way harder than calc 2 conseptually. Theres basically two main parts of calc 3, one is partial derivatives and gradients and stuff like that, its pretty easy (at least for me) and I blazed through the first half of calc 3 very quickly.<br>\nThe problem arises from all the new integrals. The tricky part about double/triple integrals is determining the bounds or the integral, as I don’t really have alot of time to familiar myself with all the graphs and having the ability to sketch the graph, I did everything purely numerically, which is actually quite difficult because you are integrating something you don’t know what it looks like.<br>\nLine integrals and Surface integrals can be reduced to double/triple integrals so it’s not a big deal, just that its really computational heavy, and also theres formulas for vector fields/scalar functions, parametric or normal, which makes it feel very complicated when you don’t know whats going on. I recommend trying to relate everything together and really understanding why the formula is as such instead of just remembering them.<br>\nThe last part of calculus 3 is the three big theorems: Greens Theorem, Stokes Theorem and Divergence Theorem. They are not really hard to memorize at all, and most of the time the problems are obvious enough for you to just use the theorems.</p>\n<p>In summary, calc 3 was trickier than calc 2, but through some understanding it was alright.</p>\n<p>Now in test day, I was pretty worried when I first saw the calc 2 exam, it was quite a hard exam at least compared to all the past in class finals. The computation was quite heavy, and a couple problems required me to use some tricks that I knew (I used <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>log</mtext><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><msqrt><mi>n</mi></msqrt></mrow><annotation encoding=\"application/x-tex\">\\text{log}(n) \\leq \\sqrt n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">log</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.23972em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"padding-left:0.833em;\">n</span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span></span></span></span> a couple of times), and there were some IBPs and squeeze theorems used to test for convergence/divergence that isn’t completely obvious. There was one problem about finding the degree 3 taylor polynomial of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><msup><mi>x</mi><mn>2</mn></msup></msup><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">e^{x^2}cos(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.23692em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9869199999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913142857142857em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>, which I think they were talking about order instead of degree, as the coefficient of odd terms for both <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><msup><mi>x</mi><mn>2</mn></msup></msup></mrow><annotation encoding=\"application/x-tex\">e^{x^2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9869199999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9869199999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913142857142857em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">cos(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> are both zero, but I was worried that its just I didn’t study enough and so I didn’t ask if the problem was wrong.</p>\n<p>After two hours of trying to find a non-existent term in a taylor polynomial, I had to start taking calc 3 exam immediately (I had to take exams back to back, which is 4 hours of calc tests in total). Luckily, the calc 3 exam was much easier than calc 2, and I finished it in under half a hour, but because I was too tired after the calc 2 exam, I was alot of calculation errors when I first wrote it, luckily I think I fixed most of them I can identify so I was quite confident with my calc 3 score.</p>\n<p>Now, how did I do in the tests?</p>\n<p><img src=\"score.png\" alt=\"score\"></p>\n<p>Yep, I passed all the exams :D (&gt;= 75 to pass)</p>\n<p>This is honestly a very big achievement for me, as I have always saw myself as someone horrible at math, but I managed to pass exams in one month that normal classes would take a whole year!</p>\n<p>After this, I swapped out my calc 2 class to MATH 341: Linear Algebra, which is the proof-based class I wanted to take, and I’m currently enjoying proving stuff with axioms, its just so satisfying!</p>\n<p>I also got in a grad-level course, which is CS 760: Machine Learning. I took it because 1) I couldn’t do undergrad machine learning because of prerequisites (Why does my school don’t have APs bruh), so I just took the grad version instead, as the only prerequisite for grad courses is having graduate standing, which you can bypass by communicating with the professor. 2) I am quite passionate about ML/DL, and I’ve already had quite some experience with it (I know like 90% of the course material, just much more high level than what the course is teaching), and also taking this class will allow me to take CS 762: Advanced Deep Learning, which is the real deal here.</p>\n<p>Currently, I’m struggling quite a bit with the probability/statistics and notation parts of the course, as I kinda don’t have much exposure to it, but I’ll try my best to understand fully!</p>\n<p>Lastly, I’m currently applying to summer REU (Research Experiences for Undergraduates) programs, I hope I can get into at least one of them so I can accumulate research experience over the summer!</p>\n<p>Thats kinda the major stuff I’ve done in Janurary, and I also haven’t broken any new years resolutions yet, yay! I did make doing 5 problems everyday on CF into do problems everyday on CF, because forcing myself doing 5 problems only made me do easy 800~1000 problems alot of the time because of time pressure, but I’ll continue to try my best!</p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>Hey guys! There are quite alot of things that happened in Janurary, so why not I make a quick recap?</p>\n<p>The first biggest thing I done was skipping calculus 2 &amp; 3 in 1 month without much prior experience. The reason I wanted to do that is because I’m seriously considering double majoring in math, and so I wanted to take proof-based linear algebra instead of computational based ones, which requires multivariable calculus (The computational one needs calc 2 too, so I kinda had to at least pass one of two).</p>\n<p>Luckily, I feel like US universities have very easy problems for tests, so I knew this is achievable.<br>\nI first started studying calc 2, and honestly it wasn’t that bad. integration techniques are quite easy once you know how to identify them, and for series tests its really also just experience, even if one test fails you can always just try other ideas. For taylor series you kinda just memorize the formula and it should be okay. Vectors and planes were pretty easy for me too, as I’ve already learned them in highschool, and its also a big topic in calc 3 so I wasn’t really worried for it.</p>\n<p>All in all, it took me around 1 week to finish calc 2 and a couple of days to really refine my skills for it.</p>\n<p>Next, I started studying calc 3, and I personally think its way harder than calc 2 conseptually. Theres basically two main parts of calc 3, one is partial derivatives and gradients and stuff like that, its pretty easy (at least for me) and I blazed through the first half of calc 3 very quickly.<br>\nThe problem arises from all the new integrals. The tricky part about double/triple integrals is determining the bounds or the integral, as I don’t really have alot of time to familiar myself with all the graphs and having the ability to sketch the graph, I did everything purely numerically, which is actually quite difficult because you are integrating something you don’t know what it looks like.<br>\nLine integrals and Surface integrals can be reduced to double/triple integrals so it’s not a big deal, just that its really computational heavy, and also theres formulas for vector fields/scalar functions, parametric or normal, which makes it feel very complicated when you don’t know whats going on. I recommend trying to relate everything together and really understanding why the formula is as such instead of just remembering them.<br>\nThe last part of calculus 3 is the three big theorems: Greens Theorem, Stokes Theorem and Divergence Theorem. They are not really hard to memorize at all, and most of the time the problems are obvious enough for you to just use the theorems.</p>\n<p>In summary, calc 3 was trickier than calc 2, but through some understanding it was alright.</p>\n<p>Now in test day, I was pretty worried when I first saw the calc 2 exam, it was quite a hard exam at least compared to all the past in class finals. The computation was quite heavy, and a couple problems required me to use some tricks that I knew (I used <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>log</mtext><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo><mo>≤</mo><msqrt><mi>n</mi></msqrt></mrow><annotation encoding=\"application/x-tex\">\\text{log}(n) \\leq \\sqrt n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord text\"><span class=\"mord\">log</span></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.04em;vertical-align:-0.23972em;\"></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8002800000000001em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"padding-left:0.833em;\">n</span></span><span style=\"top:-2.76028em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z'/></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.23972em;\"><span></span></span></span></span></span></span></span></span> a couple of times), and there were some IBPs and squeeze theorems used to test for convergence/divergence that isn’t completely obvious. There was one problem about finding the degree 3 taylor polynomial of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><msup><mi>x</mi><mn>2</mn></msup></msup><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">e^{x^2}cos(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.23692em;vertical-align:-0.25em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9869199999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913142857142857em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span>, which I think they were talking about order instead of degree, as the coefficient of odd terms for both <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mi>e</mi><msup><mi>x</mi><mn>2</mn></msup></msup></mrow><annotation encoding=\"application/x-tex\">e^{x^2}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9869199999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.9869199999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8913142857142857em;\"><span style=\"top:-2.931em;margin-right:0.07142857142857144em;\"><span class=\"pstrut\" style=\"height:2.5em;\"></span><span class=\"sizing reset-size3 size1 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi><mi>o</mi><mi>s</mi><mo stretchy=\"false\">(</mo><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">cos(x)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">c</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> are both zero, but I was worried that its just I didn’t study enough and so I didn’t ask if the problem was wrong.</p>\n<p>After two hours of trying to find a non-existent term in a taylor polynomial, I had to start taking calc 3 exam immediately (I had to take exams back to back, which is 4 hours of calc tests in total). Luckily, the calc 3 exam was much easier than calc 2, and I finished it in under half a hour, but because I was too tired after the calc 2 exam, I was alot of calculation errors when I first wrote it, luckily I think I fixed most of them I can identify so I was quite confident with my calc 3 score.</p>\n<p>Now, how did I do in the tests?</p>\n<p><img src=\"score.png\" alt=\"score\"></p>\n<p>Yep, I passed all the exams :D (&gt;= 75 to pass)</p>\n<p>This is honestly a very big achievement for me, as I have always saw myself as someone horrible at math, but I managed to pass exams in one month that normal classes would take a whole year!</p>\n<p>After this, I swapped out my calc 2 class to MATH 341: Linear Algebra, which is the proof-based class I wanted to take, and I’m currently enjoying proving stuff with axioms, its just so satisfying!</p>\n<p>I also got in a grad-level course, which is CS 760: Machine Learning. I took it because 1) I couldn’t do undergrad machine learning because of prerequisites (Why does my school don’t have APs bruh), so I just took the grad version instead, as the only prerequisite for grad courses is having graduate standing, which you can bypass by communicating with the professor. 2) I am quite passionate about ML/DL, and I’ve already had quite some experience with it (I know like 90% of the course material, just much more high level than what the course is teaching), and also taking this class will allow me to take CS 762: Advanced Deep Learning, which is the real deal here.</p>\n<p>Currently, I’m struggling quite a bit with the probability/statistics and notation parts of the course, as I kinda don’t have much exposure to it, but I’ll try my best to understand fully!</p>\n<p>Lastly, I’m currently applying to summer REU (Research Experiences for Undergraduates) programs, I hope I can get into at least one of them so I can accumulate research experience over the summer!</p>\n<p>Thats kinda the major stuff I’ve done in Janurary, and I also haven’t broken any new years resolutions yet, yay! I did make doing 5 problems everyday on CF into do problems everyday on CF, because forcing myself doing 5 problems only made me do easy 800~1000 problems alot of the time because of time pressure, but I’ll continue to try my best!</p>\n"},{"title":"Perm hair + CF mashups","date":"2023-08-05T00:02:30.000Z","_content":"Hello! .w.\nI went to the hair salon today to straighten and stick my hair to my head (idk what its called in English lmao).\nThe chemical process was super itchy and I had to maintain the same posture for like 20 minutes, truely inhumane...\nAlthough after the process my hair did look pretty nice :D\nIn the process, I was bored, so I mind solved a mashup of 1400 to 1700 CF problems.\nSuprisingly, I got them all correct after writing them at home! Im still worthy!\nThe problems were all pretty nice so I want to share them here (sorted by  CF difficulty):\n\n## [CF 1714E. Add Modulo 10](https://codeforces.com/problemset/problem/1714/E)\n\nThe problem is basically as follows:\n> For each test case, you are given an array of $n$ ($n \\leq  2\\cdot10^5$) integers,\n> you can apply an operation $a_i = a_i + (a_i \\space \\text{mod} \\space 10)$ on any elemment,\n> Is it possible to make every element in the array the same by using a finite ammount of operations?\n\nAn Easy math pattern finding problem.\nWe can try by applying the operation on all unit digits and observe the pattern of which the unit digit changes.\n\n> Example:\n> 9 $\\rarr$ 8 $\\rarr$ 6 $\\rarr$ 2 $\\rarr$ 4 $\\rarr$ 8 $\\rarr$ 6 $\\rarr$ 2....\n> 7 $\\rarr$ 4 $\\rarr$ 8 $\\rarr$ 6 $\\rarr$ 2.....\n\nAfter trying all of them, its easy to notice that there are two patterns:\nIf the unit digit is 0 or 5. After one operation the unit digit will become 0.\nElse, after some ammount of operation, the unit digit will land on a 8 -> 6 -> 2 -> 4 infinite cycle.\n\nNow we can obtain the solution:\nIf there is any element with 0 or 5, we apply the operation to every element once and check if they are all the same.\nElse, we apply operations until they all have the same unit digit, and check if they have the same value modulo 20.\nThe reason its 20 is because one cycle is 8 -> 6 -> 2 -> 4, which adds up to 20.\n\nCode (flg1 is to check if there is a element whose unit digit is 5 or 0, flg2 is check if its possible)\n\n```cpp\nint func(int n) {\n    return n + (n % 10);\n}\nvoid solve() {\n    int n;\n    cin >> n;\n    int arr[n];\n    bool flg1 = false;\n    bool flg2 = false;\n    for(int i = 0; i < n; i++) {\n        cin >> arr[i];\n        if(arr[i] % 5 == 0) flg1 = true;\n    }\n    if(flg1) {\n        for(auto &i : arr) {\n            i = func(i);\n        }\n        int cmp = arr[0];\n        for(int i = 0; i < n; i++) {\n            if(arr[i] != cmp) flg2 = true;\n        }\n    } else {\n        for(int i = 0; i < n; i++) {\n            while(arr[i] % 10 != 2) {\n                arr[i] = func(arr[i]);\n            }\n        }  \n        int cmp = arr[0] % 20;\n        for(int i = 0; i < n; i++) {\n            if(cmp != (arr[i] % 20)) flg2 = true;  \n        }\n    }\n    if(flg2) {\n        cout << \"NO\" << endl;\n    } else {\n        cout << \"YES\" << endl;\n    }\n    return;\n}\n```\n\nTime Complexity: $O(n)$\n\n## [CF 1249C2. Good Numbers (hard version)](https://codeforces.com/problemset/problem/1249/C2)\n\nThe problem is basically as follows:\n> A good number is one that can be made by using distinct powers of 3.\n> For each test case, you are given a number $n$ ($n \\leq 10^{18}$), output the smallest good number greater or equal to $n$.\n\nHonestly not sure why this question is rated 1500...\n\nThe idea is really simple: Maintain an array $pre$, where $pre_i = 3^i + 3^{i-1} + ... + 3^0$.\nYou want to find the one that is greater or equal to $n$, and from large to small greedily remove powers of 3 if possible.\n\nCode\n\n```cpp\nvoid solve() {\n    vector<int> pre(39);\n    vector<int> pre2(39);\n    pre[0] = 1;\n    pre2[0] = 1;\n    int val = 1;\n    for(int i = 1; i <= 38; i++) {\n        val *= 3;\n        pre[i] = pre[i - 1] + val;\n        pre2[i] = val; // 3^i\n    }\n    int q;\n    cin >> q;\n    while(q--) {\n        int n;\n        cin >> n;\n        int val = *lower_bound(all(pre), n); \n        for(int i = 38; i >= 0; i--) {\n            if(val - pre2[i] >= n) val -= pre2[i];\n        }\n        cout << val << endl;\n    }\n    return;\n}\n```\n\nTime Complexity: $O(1)$\n\n## [CF 1081B. Farewell Party](https://codeforces.com/problemset/problem/1081/B)\n\nThe problem is basically as follows:\n> Given an array, each $i$ belongs to some group. $a_i$ denotes how many people are in different groups then $i$, check if theres a valid grouping that can satisfy the array's constraints.\n\nFirst, lets think about what $a_i$ actually means:\n> $a_i$ denotes how many people are in different groups then $i$.\n\nCan be changed to:\n\n> $n - a_i$ denotes how many people are in the same group as $i$.\n\nAlthough it doesn't seem much, we can actually use this knowledge to our advantage:\nThis means that for a possible combination, there must be $n - a_i$ people whose value in the array is $a_i$!\nFurther more, there might be multiple groups with the same amount of people in it.\nSo we can change our previous conclusion to there must be a multiple of $n - a_i$ people whose value in the array is $a_i$!\nAfter knowing this, we just need to assign groups to each person and AC this question :D\n\n```cpp\nvoid solve() {\n    int n;\n    cin >> n;\n    int sol[n];\n    vector<int> cnt[n + 1]; // saves indexes of ppl with same count of ppl in same group\n    bool flg = true;\n    int val;\n    mset(sol, 0);\n    for(int i = 0; i < n; i++) {\n        cin >> val;\n        cnt[(n - val)].pb(i);\n    }\n    int hat = 1; // current group index\n    int hatcnt = 0; // count in the current group\n    for(int i = 1; i <= n; i++) { // i = number of ppl with same hat\n        if(cnt[i].size() % i == 0) {\n            for(int j = 0; j < cnt[i].size(); j++) {\n                sol[cnt[i][j]] = hat;\n                hatcnt += 1;\n                if(hatcnt == i) {\n                    hatcnt = 0;\n                    hat += 1;\n                }\n            }\n        } else {\n            flg = false;\n        }\n    }\n    if(!flg) {\n        cout << \"Impossible\" << endl;\n    } else {\n        cout << \"Possible\" << endl;\n        for(auto i : sol) cout << i << \" \";\n        cout << endl;\n    }\n \n    return;\n}\n```\n\nTime Complexity: $O(n)$\n\n## [CF 1543D1. RPD and Rap Sheet (Easy Version)](https://codeforces.com/contest/1543/problem/D1)\n\nThe problem is basically as follows:\n> There is a password $x$ between $0$ to $n - 1$ ($n \\leq 2\\cdot10^{5}$). You can guess the password $q$ ($q \\leq n$) times.\n> After each failed guess $y$, the password will become $z$ where $x⊕z = y$ ($⊕$ denotes binary XOR)\n\nThe problem statement actually gave me a big hint:\n> Password between $0$ to $n - 1$ and guess the password $q$ ($q \\leq n$) times.\n> $\\rarr$ Try all passwords from 0 to n - 1!\n\nNow, the problem is that the password changes after each failed attempt. How would we solve this?\nLets observe the encoding function of the password:\n> $x⊕z = y$ $\\rarr$ $x⊕x⊕z = x⊕y$ $\\rarr$ $x⊕y = z$ (Because $x⊕x = 0$)\n\nDenote the password for step $i$ as $x_i$, for a failed query $q_i$, the password becomes $x_{i}⊕q_i$ = $x⊕q_i⊕q_{i-1}...⊕q_1$ !\nThus if we also encode our query $q_i$ with $⊕q_{i-1}...⊕q_1$, the encoded value for $x_i$ is the same as the original $x$ to query $q_i$!\n\nCode\n\n```cpp\nvoid solve() {\n    int t;\n    cin >> t;\n    while(t--){\n        int xorval = 0;\n        int n, k, r;\n        cin >> n >> k;\n        for(int i = 0; i < n; i++) {\n            int guess = xorval ^ i;\n            cout << guess << endl;\n            xorval ^= guess;\n            cin >> r;\n            if(r == 1 or r == -1) break;\n        }\n    }\n    return;\n}\n```\n\nTime Complexity: $O(n)$\n\n[3:09AM]\nIm like also super dizzy and kinda drunk now lol, first time bar experience lets gooo!\nI drank a long island ice tea, gin tonic, a few shots of whiskey and some mixed stuff.\nHonesty im suprised that I have a decent alcohol tolerance, but still, drink safely!\n","source":"_posts/Perm-hair-CF-mashups.md","raw":"---\ntitle: Perm hair + CF mashups\ndate: 2023-08-04 19:02:30\ntags: [\"Life\", \"CP\"]\n---\nHello! .w.\nI went to the hair salon today to straighten and stick my hair to my head (idk what its called in English lmao).\nThe chemical process was super itchy and I had to maintain the same posture for like 20 minutes, truely inhumane...\nAlthough after the process my hair did look pretty nice :D\nIn the process, I was bored, so I mind solved a mashup of 1400 to 1700 CF problems.\nSuprisingly, I got them all correct after writing them at home! Im still worthy!\nThe problems were all pretty nice so I want to share them here (sorted by  CF difficulty):\n\n## [CF 1714E. Add Modulo 10](https://codeforces.com/problemset/problem/1714/E)\n\nThe problem is basically as follows:\n> For each test case, you are given an array of $n$ ($n \\leq  2\\cdot10^5$) integers,\n> you can apply an operation $a_i = a_i + (a_i \\space \\text{mod} \\space 10)$ on any elemment,\n> Is it possible to make every element in the array the same by using a finite ammount of operations?\n\nAn Easy math pattern finding problem.\nWe can try by applying the operation on all unit digits and observe the pattern of which the unit digit changes.\n\n> Example:\n> 9 $\\rarr$ 8 $\\rarr$ 6 $\\rarr$ 2 $\\rarr$ 4 $\\rarr$ 8 $\\rarr$ 6 $\\rarr$ 2....\n> 7 $\\rarr$ 4 $\\rarr$ 8 $\\rarr$ 6 $\\rarr$ 2.....\n\nAfter trying all of them, its easy to notice that there are two patterns:\nIf the unit digit is 0 or 5. After one operation the unit digit will become 0.\nElse, after some ammount of operation, the unit digit will land on a 8 -> 6 -> 2 -> 4 infinite cycle.\n\nNow we can obtain the solution:\nIf there is any element with 0 or 5, we apply the operation to every element once and check if they are all the same.\nElse, we apply operations until they all have the same unit digit, and check if they have the same value modulo 20.\nThe reason its 20 is because one cycle is 8 -> 6 -> 2 -> 4, which adds up to 20.\n\nCode (flg1 is to check if there is a element whose unit digit is 5 or 0, flg2 is check if its possible)\n\n```cpp\nint func(int n) {\n    return n + (n % 10);\n}\nvoid solve() {\n    int n;\n    cin >> n;\n    int arr[n];\n    bool flg1 = false;\n    bool flg2 = false;\n    for(int i = 0; i < n; i++) {\n        cin >> arr[i];\n        if(arr[i] % 5 == 0) flg1 = true;\n    }\n    if(flg1) {\n        for(auto &i : arr) {\n            i = func(i);\n        }\n        int cmp = arr[0];\n        for(int i = 0; i < n; i++) {\n            if(arr[i] != cmp) flg2 = true;\n        }\n    } else {\n        for(int i = 0; i < n; i++) {\n            while(arr[i] % 10 != 2) {\n                arr[i] = func(arr[i]);\n            }\n        }  \n        int cmp = arr[0] % 20;\n        for(int i = 0; i < n; i++) {\n            if(cmp != (arr[i] % 20)) flg2 = true;  \n        }\n    }\n    if(flg2) {\n        cout << \"NO\" << endl;\n    } else {\n        cout << \"YES\" << endl;\n    }\n    return;\n}\n```\n\nTime Complexity: $O(n)$\n\n## [CF 1249C2. Good Numbers (hard version)](https://codeforces.com/problemset/problem/1249/C2)\n\nThe problem is basically as follows:\n> A good number is one that can be made by using distinct powers of 3.\n> For each test case, you are given a number $n$ ($n \\leq 10^{18}$), output the smallest good number greater or equal to $n$.\n\nHonestly not sure why this question is rated 1500...\n\nThe idea is really simple: Maintain an array $pre$, where $pre_i = 3^i + 3^{i-1} + ... + 3^0$.\nYou want to find the one that is greater or equal to $n$, and from large to small greedily remove powers of 3 if possible.\n\nCode\n\n```cpp\nvoid solve() {\n    vector<int> pre(39);\n    vector<int> pre2(39);\n    pre[0] = 1;\n    pre2[0] = 1;\n    int val = 1;\n    for(int i = 1; i <= 38; i++) {\n        val *= 3;\n        pre[i] = pre[i - 1] + val;\n        pre2[i] = val; // 3^i\n    }\n    int q;\n    cin >> q;\n    while(q--) {\n        int n;\n        cin >> n;\n        int val = *lower_bound(all(pre), n); \n        for(int i = 38; i >= 0; i--) {\n            if(val - pre2[i] >= n) val -= pre2[i];\n        }\n        cout << val << endl;\n    }\n    return;\n}\n```\n\nTime Complexity: $O(1)$\n\n## [CF 1081B. Farewell Party](https://codeforces.com/problemset/problem/1081/B)\n\nThe problem is basically as follows:\n> Given an array, each $i$ belongs to some group. $a_i$ denotes how many people are in different groups then $i$, check if theres a valid grouping that can satisfy the array's constraints.\n\nFirst, lets think about what $a_i$ actually means:\n> $a_i$ denotes how many people are in different groups then $i$.\n\nCan be changed to:\n\n> $n - a_i$ denotes how many people are in the same group as $i$.\n\nAlthough it doesn't seem much, we can actually use this knowledge to our advantage:\nThis means that for a possible combination, there must be $n - a_i$ people whose value in the array is $a_i$!\nFurther more, there might be multiple groups with the same amount of people in it.\nSo we can change our previous conclusion to there must be a multiple of $n - a_i$ people whose value in the array is $a_i$!\nAfter knowing this, we just need to assign groups to each person and AC this question :D\n\n```cpp\nvoid solve() {\n    int n;\n    cin >> n;\n    int sol[n];\n    vector<int> cnt[n + 1]; // saves indexes of ppl with same count of ppl in same group\n    bool flg = true;\n    int val;\n    mset(sol, 0);\n    for(int i = 0; i < n; i++) {\n        cin >> val;\n        cnt[(n - val)].pb(i);\n    }\n    int hat = 1; // current group index\n    int hatcnt = 0; // count in the current group\n    for(int i = 1; i <= n; i++) { // i = number of ppl with same hat\n        if(cnt[i].size() % i == 0) {\n            for(int j = 0; j < cnt[i].size(); j++) {\n                sol[cnt[i][j]] = hat;\n                hatcnt += 1;\n                if(hatcnt == i) {\n                    hatcnt = 0;\n                    hat += 1;\n                }\n            }\n        } else {\n            flg = false;\n        }\n    }\n    if(!flg) {\n        cout << \"Impossible\" << endl;\n    } else {\n        cout << \"Possible\" << endl;\n        for(auto i : sol) cout << i << \" \";\n        cout << endl;\n    }\n \n    return;\n}\n```\n\nTime Complexity: $O(n)$\n\n## [CF 1543D1. RPD and Rap Sheet (Easy Version)](https://codeforces.com/contest/1543/problem/D1)\n\nThe problem is basically as follows:\n> There is a password $x$ between $0$ to $n - 1$ ($n \\leq 2\\cdot10^{5}$). You can guess the password $q$ ($q \\leq n$) times.\n> After each failed guess $y$, the password will become $z$ where $x⊕z = y$ ($⊕$ denotes binary XOR)\n\nThe problem statement actually gave me a big hint:\n> Password between $0$ to $n - 1$ and guess the password $q$ ($q \\leq n$) times.\n> $\\rarr$ Try all passwords from 0 to n - 1!\n\nNow, the problem is that the password changes after each failed attempt. How would we solve this?\nLets observe the encoding function of the password:\n> $x⊕z = y$ $\\rarr$ $x⊕x⊕z = x⊕y$ $\\rarr$ $x⊕y = z$ (Because $x⊕x = 0$)\n\nDenote the password for step $i$ as $x_i$, for a failed query $q_i$, the password becomes $x_{i}⊕q_i$ = $x⊕q_i⊕q_{i-1}...⊕q_1$ !\nThus if we also encode our query $q_i$ with $⊕q_{i-1}...⊕q_1$, the encoded value for $x_i$ is the same as the original $x$ to query $q_i$!\n\nCode\n\n```cpp\nvoid solve() {\n    int t;\n    cin >> t;\n    while(t--){\n        int xorval = 0;\n        int n, k, r;\n        cin >> n >> k;\n        for(int i = 0; i < n; i++) {\n            int guess = xorval ^ i;\n            cout << guess << endl;\n            xorval ^= guess;\n            cin >> r;\n            if(r == 1 or r == -1) break;\n        }\n    }\n    return;\n}\n```\n\nTime Complexity: $O(n)$\n\n[3:09AM]\nIm like also super dizzy and kinda drunk now lol, first time bar experience lets gooo!\nI drank a long island ice tea, gin tonic, a few shots of whiskey and some mixed stuff.\nHonesty im suprised that I have a decent alcohol tolerance, but still, drink safely!\n","slug":"Perm-hair-CF-mashups","published":1,"updated":"2024-12-26T01:29:58.499Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblh7001cb0u960q711bf","content":"<p>Hello! .w.<br>\nI went to the hair salon today to straighten and stick my hair to my head (idk what its called in English lmao).<br>\nThe chemical process was super itchy and I had to maintain the same posture for like 20 minutes, truely inhumane…<br>\nAlthough after the process my hair did look pretty nice :D<br>\nIn the process, I was bored, so I mind solved a mashup of 1400 to 1700 CF problems.<br>\nSuprisingly, I got them all correct after writing them at home! Im still worthy!<br>\nThe problems were all pretty nice so I want to share them here (sorted by  CF difficulty):</p>\n<h2 id=\"cf-1714e-add-modulo-10\"><a href=\"https://codeforces.com/problemset/problem/1714/E\">CF 1714E. Add Modulo 10</a></h2>\n<p>The problem is basically as follows:</p>\n<blockquote>\n<p>For each test case, you are given an array of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>2</mn><mo>⋅</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">n \\leq  2\\cdot10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span>) integers,<br>\nyou can apply an operation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>i</mi></msub><mtext> mod </mtext><mn>10</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a_i = a_i + (a_i \\space \\text{mod} \\space 10)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> on any elemment,<br>\nIs it possible to make every element in the array the same by using a finite ammount of operations?</p>\n</blockquote>\n<p>An Easy math pattern finding problem.<br>\nWe can try by applying the operation on all unit digits and observe the pattern of which the unit digit changes.</p>\n<blockquote>\n<p>Example:<br>\n9 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 8 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 6 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 2 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 4 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 8 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 6 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 2…<br>\n7 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 4 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 8 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 6 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 2…</p>\n</blockquote>\n<p>After trying all of them, its easy to notice that there are two patterns:<br>\nIf the unit digit is 0 or 5. After one operation the unit digit will become 0.<br>\nElse, after some ammount of operation, the unit digit will land on a 8 -&gt; 6 -&gt; 2 -&gt; 4 infinite cycle.</p>\n<p>Now we can obtain the solution:<br>\nIf there is any element with 0 or 5, we apply the operation to every element once and check if they are all the same.<br>\nElse, we apply operations until they all have the same unit digit, and check if they have the same value modulo 20.<br>\nThe reason its 20 is because one cycle is 8 -&gt; 6 -&gt; 2 -&gt; 4, which adds up to 20.</p>\n<p>Code (flg1 is to check if there is a element whose unit digit is 5 or 0, flg2 is check if its possible)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n + (n % <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[n];</span><br><span class=\"line\">    <span class=\"type\">bool</span> flg1 = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">bool</span> flg2 = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; arr[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i] % <span class=\"number\">5</span> == <span class=\"number\">0</span>) flg1 = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flg1) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;i : arr) &#123;</span><br><span class=\"line\">            i = <span class=\"built_in\">func</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> cmp = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[i] != cmp) flg2 = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(arr[i] % <span class=\"number\">10</span> != <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                arr[i] = <span class=\"built_in\">func</span>(arr[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"type\">int</span> cmp = arr[<span class=\"number\">0</span>] % <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cmp != (arr[i] % <span class=\"number\">20</span>)) flg2 = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flg2) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1249c2-good-numbers-hard-version\"><a href=\"https://codeforces.com/problemset/problem/1249/C2\">CF 1249C2. Good Numbers (hard version)</a></h2>\n<p>The problem is basically as follows:</p>\n<blockquote>\n<p>A good number is one that can be made by using distinct powers of 3.<br>\nFor each test case, you are given a number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>18</mn></msup></mrow><annotation encoding=\"application/x-tex\">n \\leq 10^{18}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span></span>), output the smallest good number greater or equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>.</p>\n</blockquote>\n<p>Honestly not sure why this question is rated 1500…</p>\n<p>The idea is really simple: Maintain an array <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">pre</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><msub><mi>e</mi><mi>i</mi></msub><mo>=</mo><msup><mn>3</mn><mi>i</mi></msup><mo>+</mo><msup><mn>3</mn><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>+</mo><msup><mn>3</mn><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\">pre_i = 3^i + 3^{i-1} + ... + 3^0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.907994em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.907994em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span>.<br>\nYou want to find the one that is greater or equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, and from large to small greedily remove powers of 3 if possible.</p>\n<p>Code</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">pre</span><span class=\"params\">(<span class=\"number\">39</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">pre2</span><span class=\"params\">(<span class=\"number\">39</span>)</span></span>;</span><br><span class=\"line\">    pre[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    pre2[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> val = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">38</span>; i++) &#123;</span><br><span class=\"line\">        val *= <span class=\"number\">3</span>;</span><br><span class=\"line\">        pre[i] = pre[i - <span class=\"number\">1</span>] + val;</span><br><span class=\"line\">        pre2[i] = val; <span class=\"comment\">// 3^i</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> q;</span><br><span class=\"line\">    cin &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n;</span><br><span class=\"line\">        cin &gt;&gt; n;</span><br><span class=\"line\">        <span class=\"type\">int</span> val = *<span class=\"built_in\">lower_bound</span>(<span class=\"built_in\">all</span>(pre), n); </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">38</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(val - pre2[i] &gt;= n) val -= pre2[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; val &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1081b-farewell-party\"><a href=\"https://codeforces.com/problemset/problem/1081/B\">CF 1081B. Farewell Party</a></h2>\n<p>The problem is basically as follows:</p>\n<blockquote>\n<p>Given an array, each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> belongs to some group. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> denotes how many people are in different groups then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, check if theres a valid grouping that can satisfy the array’s constraints.</p>\n</blockquote>\n<p>First, lets think about what <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> actually means:</p>\n<blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> denotes how many people are in different groups then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>.</p>\n</blockquote>\n<p>Can be changed to:</p>\n<blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">n - a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> denotes how many people are in the same group as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>.</p>\n</blockquote>\n<p>Although it doesn’t seem much, we can actually use this knowledge to our advantage:<br>\nThis means that for a possible combination, there must be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">n - a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> people whose value in the array is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>!<br>\nFurther more, there might be multiple groups with the same amount of people in it.<br>\nSo we can change our previous conclusion to there must be a multiple of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">n - a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> people whose value in the array is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>!<br>\nAfter knowing this, we just need to assign groups to each person and AC this question :D</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"type\">int</span> sol[n];</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; cnt[n + <span class=\"number\">1</span>]; <span class=\"comment\">// saves indexes of ppl with same count of ppl in same group</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> flg = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">    <span class=\"built_in\">mset</span>(sol, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; val;</span><br><span class=\"line\">        cnt[(n - val)].<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> hat = <span class=\"number\">1</span>; <span class=\"comment\">// current group index</span></span><br><span class=\"line\">    <span class=\"type\">int</span> hatcnt = <span class=\"number\">0</span>; <span class=\"comment\">// count in the current group</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123; <span class=\"comment\">// i = number of ppl with same hat</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt[i].<span class=\"built_in\">size</span>() % i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; cnt[i].<span class=\"built_in\">size</span>(); j++) &#123;</span><br><span class=\"line\">                sol[cnt[i][j]] = hat;</span><br><span class=\"line\">                hatcnt += <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(hatcnt == i) &#123;</span><br><span class=\"line\">                    hatcnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    hat += <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            flg = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!flg) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Impossible&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Possible&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : sol) cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1543d1-rpd-and-rap-sheet-easy-version\"><a href=\"https://codeforces.com/contest/1543/problem/D1\">CF 1543D1. RPD and Rap Sheet (Easy Version)</a></h2>\n<p>The problem is basically as follows:</p>\n<blockquote>\n<p>There is a password <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>2</mn><mo>⋅</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">n \\leq 2\\cdot10^{5}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span></span>). You can guess the password <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">q \\leq n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8304100000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>) times.<br>\nAfter each failed guess <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>, the password will become <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊕</mo><mi>z</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x⊕z = y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊕</mo></mrow><annotation encoding=\"application/x-tex\">⊕</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">⊕</span></span></span></span> denotes binary XOR)</p>\n</blockquote>\n<p>The problem statement actually gave me a big hint:</p>\n<blockquote>\n<p>Password between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> and guess the password <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">q \\leq n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8304100000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>) times.<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> Try all passwords from 0 to n - 1!</p>\n</blockquote>\n<p>Now, the problem is that the password changes after each failed attempt. How would we solve this?<br>\nLets observe the encoding function of the password:</p>\n<blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊕</mo><mi>z</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x⊕z = y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊕</mo><mi>x</mi><mo>⊕</mo><mi>z</mi><mo>=</mo><mi>x</mi><mo>⊕</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x⊕x⊕z = x⊕y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊕</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x⊕y = z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> (Because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊕</mo><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x⊕x = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>)</p>\n</blockquote>\n<p>Denote the password for step <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, for a failed query <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">q_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, the password becomes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>⊕</mo><msub><mi>q</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_{i}⊕q_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> = <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊕</mo><msub><mi>q</mi><mi>i</mi></msub><mo>⊕</mo><msub><mi>q</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>⊕</mo><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">x⊕q_i⊕q_{i-1}...⊕q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.791661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> !<br>\nThus if we also encode our query <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">q_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊕</mo><msub><mi>q</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>⊕</mo><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">⊕q_{i-1}...⊕q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.791661em;vertical-align:-0.208331em;\"></span><span class=\"mord\">⊕</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, the encoded value for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the same as the original <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> to query <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">q_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>!</p>\n<p>Code</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> xorval = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> n, k, r;</span><br><span class=\"line\">        cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> guess = xorval ^ i;</span><br><span class=\"line\">            cout &lt;&lt; guess &lt;&lt; endl;</span><br><span class=\"line\">            xorval ^= guess;</span><br><span class=\"line\">            cin &gt;&gt; r;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r == <span class=\"number\">1</span> <span class=\"keyword\">or</span> r == <span class=\"number\">-1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>[3:09AM]<br>\nIm like also super dizzy and kinda drunk now lol, first time bar experience lets gooo!<br>\nI drank a long island ice tea, gin tonic, a few shots of whiskey and some mixed stuff.<br>\nHonesty im suprised that I have a decent alcohol tolerance, but still, drink safely!</p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>Hello! .w.<br>\nI went to the hair salon today to straighten and stick my hair to my head (idk what its called in English lmao).<br>\nThe chemical process was super itchy and I had to maintain the same posture for like 20 minutes, truely inhumane…<br>\nAlthough after the process my hair did look pretty nice :D<br>\nIn the process, I was bored, so I mind solved a mashup of 1400 to 1700 CF problems.<br>\nSuprisingly, I got them all correct after writing them at home! Im still worthy!<br>\nThe problems were all pretty nice so I want to share them here (sorted by  CF difficulty):</p>\n<h2 id=\"cf-1714e-add-modulo-10\"><a href=\"https://codeforces.com/problemset/problem/1714/E\">CF 1714E. Add Modulo 10</a></h2>\n<p>The problem is basically as follows:</p>\n<blockquote>\n<p>For each test case, you are given an array of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>2</mn><mo>⋅</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">n \\leq  2\\cdot10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span>) integers,<br>\nyou can apply an operation <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo>=</mo><msub><mi>a</mi><mi>i</mi></msub><mo>+</mo><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>i</mi></msub><mtext> mod </mtext><mn>10</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">a_i = a_i + (a_i \\space \\text{mod} \\space 10)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\"> </span><span class=\"mord text\"><span class=\"mord\">mod</span></span><span class=\"mspace\"> </span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mclose\">)</span></span></span></span> on any elemment,<br>\nIs it possible to make every element in the array the same by using a finite ammount of operations?</p>\n</blockquote>\n<p>An Easy math pattern finding problem.<br>\nWe can try by applying the operation on all unit digits and observe the pattern of which the unit digit changes.</p>\n<blockquote>\n<p>Example:<br>\n9 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 8 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 6 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 2 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 4 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 8 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 6 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 2…<br>\n7 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 4 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 8 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 6 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> 2…</p>\n</blockquote>\n<p>After trying all of them, its easy to notice that there are two patterns:<br>\nIf the unit digit is 0 or 5. After one operation the unit digit will become 0.<br>\nElse, after some ammount of operation, the unit digit will land on a 8 -&gt; 6 -&gt; 2 -&gt; 4 infinite cycle.</p>\n<p>Now we can obtain the solution:<br>\nIf there is any element with 0 or 5, we apply the operation to every element once and check if they are all the same.<br>\nElse, we apply operations until they all have the same unit digit, and check if they have the same value modulo 20.<br>\nThe reason its 20 is because one cycle is 8 -&gt; 6 -&gt; 2 -&gt; 4, which adds up to 20.</p>\n<p>Code (flg1 is to check if there is a element whose unit digit is 5 or 0, flg2 is check if its possible)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n + (n % <span class=\"number\">10</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[n];</span><br><span class=\"line\">    <span class=\"type\">bool</span> flg1 = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"type\">bool</span> flg2 = <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; arr[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i] % <span class=\"number\">5</span> == <span class=\"number\">0</span>) flg1 = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flg1) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> &amp;i : arr) &#123;</span><br><span class=\"line\">            i = <span class=\"built_in\">func</span>(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> cmp = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(arr[i] != cmp) flg2 = <span class=\"literal\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">while</span>(arr[i] % <span class=\"number\">10</span> != <span class=\"number\">2</span>) &#123;</span><br><span class=\"line\">                arr[i] = <span class=\"built_in\">func</span>(arr[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;  </span><br><span class=\"line\">        <span class=\"type\">int</span> cmp = arr[<span class=\"number\">0</span>] % <span class=\"number\">20</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(cmp != (arr[i] % <span class=\"number\">20</span>)) flg2 = <span class=\"literal\">true</span>;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(flg2) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1249c2-good-numbers-hard-version\"><a href=\"https://codeforces.com/problemset/problem/1249/C2\">CF 1249C2. Good Numbers (hard version)</a></h2>\n<p>The problem is basically as follows:</p>\n<blockquote>\n<p>A good number is one that can be made by using distinct powers of 3.<br>\nFor each test case, you are given a number <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>18</mn></msup></mrow><annotation encoding=\"application/x-tex\">n \\leq 10^{18}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"mord mtight\">8</span></span></span></span></span></span></span></span></span></span></span></span>), output the smallest good number greater or equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>.</p>\n</blockquote>\n<p>Honestly not sure why this question is rated 1500…</p>\n<p>The idea is really simple: Maintain an array <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">pre</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span></span></span></span>, where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>p</mi><mi>r</mi><msub><mi>e</mi><mi>i</mi></msub><mo>=</mo><msup><mn>3</mn><mi>i</mi></msup><mo>+</mo><msup><mn>3</mn><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>+</mo><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>+</mo><msup><mn>3</mn><mn>0</mn></msup></mrow><annotation encoding=\"application/x-tex\">pre_i = 3^i + 3^{i-1} + ... + 3^0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\"><span class=\"mord mathnormal\">e</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.907994em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.907994em;vertical-align:-0.08333em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.824664em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">3</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span></span></span></span></span></span></span></span>.<br>\nYou want to find the one that is greater or equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>, and from large to small greedily remove powers of 3 if possible.</p>\n<p>Code</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">pre</span><span class=\"params\">(<span class=\"number\">39</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">pre2</span><span class=\"params\">(<span class=\"number\">39</span>)</span></span>;</span><br><span class=\"line\">    pre[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    pre2[<span class=\"number\">0</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> val = <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= <span class=\"number\">38</span>; i++) &#123;</span><br><span class=\"line\">        val *= <span class=\"number\">3</span>;</span><br><span class=\"line\">        pre[i] = pre[i - <span class=\"number\">1</span>] + val;</span><br><span class=\"line\">        pre2[i] = val; <span class=\"comment\">// 3^i</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> q;</span><br><span class=\"line\">    cin &gt;&gt; q;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(q--) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> n;</span><br><span class=\"line\">        cin &gt;&gt; n;</span><br><span class=\"line\">        <span class=\"type\">int</span> val = *<span class=\"built_in\">lower_bound</span>(<span class=\"built_in\">all</span>(pre), n); </span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">38</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(val - pre2[i] &gt;= n) val -= pre2[i];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout &lt;&lt; val &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1081b-farewell-party\"><a href=\"https://codeforces.com/problemset/problem/1081/B\">CF 1081B. Farewell Party</a></h2>\n<p>The problem is basically as follows:</p>\n<blockquote>\n<p>Given an array, each <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> belongs to some group. <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> denotes how many people are in different groups then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, check if theres a valid grouping that can satisfy the array’s constraints.</p>\n</blockquote>\n<p>First, lets think about what <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> actually means:</p>\n<blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> denotes how many people are in different groups then <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>.</p>\n</blockquote>\n<p>Can be changed to:</p>\n<blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">n - a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> denotes how many people are in the same group as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>.</p>\n</blockquote>\n<p>Although it doesn’t seem much, we can actually use this knowledge to our advantage:<br>\nThis means that for a possible combination, there must be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">n - a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> people whose value in the array is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>!<br>\nFurther more, there might be multiple groups with the same amount of people in it.<br>\nSo we can change our previous conclusion to there must be a multiple of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">n - a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> people whose value in the array is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>!<br>\nAfter knowing this, we just need to assign groups to each person and AC this question :D</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"type\">int</span> sol[n];</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; cnt[n + <span class=\"number\">1</span>]; <span class=\"comment\">// saves indexes of ppl with same count of ppl in same group</span></span><br><span class=\"line\">    <span class=\"type\">bool</span> flg = <span class=\"literal\">true</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> val;</span><br><span class=\"line\">    <span class=\"built_in\">mset</span>(sol, <span class=\"number\">0</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; val;</span><br><span class=\"line\">        cnt[(n - val)].<span class=\"built_in\">pb</span>(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> hat = <span class=\"number\">1</span>; <span class=\"comment\">// current group index</span></span><br><span class=\"line\">    <span class=\"type\">int</span> hatcnt = <span class=\"number\">0</span>; <span class=\"comment\">// count in the current group</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123; <span class=\"comment\">// i = number of ppl with same hat</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cnt[i].<span class=\"built_in\">size</span>() % i == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(<span class=\"type\">int</span> j = <span class=\"number\">0</span>; j &lt; cnt[i].<span class=\"built_in\">size</span>(); j++) &#123;</span><br><span class=\"line\">                sol[cnt[i][j]] = hat;</span><br><span class=\"line\">                hatcnt += <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(hatcnt == i) &#123;</span><br><span class=\"line\">                    hatcnt = <span class=\"number\">0</span>;</span><br><span class=\"line\">                    hat += <span class=\"number\">1</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            flg = <span class=\"literal\">false</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!flg) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Impossible&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;Possible&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : sol) cout &lt;&lt; i &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">        cout &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1543d1-rpd-and-rap-sheet-easy-version\"><a href=\"https://codeforces.com/contest/1543/problem/D1\">CF 1543D1. RPD and Rap Sheet (Easy Version)</a></h2>\n<p>The problem is basically as follows:</p>\n<blockquote>\n<p>There is a password <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>2</mn><mo>⋅</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">n \\leq 2\\cdot10^{5}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span></span>). You can guess the password <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">q \\leq n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8304100000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>) times.<br>\nAfter each failed guess <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span>, the password will become <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> where <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊕</mo><mi>z</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x⊕z = y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊕</mo></mrow><annotation encoding=\"application/x-tex\">⊕</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord\">⊕</span></span></span></span> denotes binary XOR)</p>\n</blockquote>\n<p>The problem statement actually gave me a big hint:</p>\n<blockquote>\n<p>Password between <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">n - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> and guess the password <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi></mrow><annotation encoding=\"application/x-tex\">q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span></span></span></span> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">q \\leq n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8304100000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>) times.<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> Try all passwords from 0 to n - 1!</p>\n</blockquote>\n<p>Now, the problem is that the password changes after each failed attempt. How would we solve this?<br>\nLets observe the encoding function of the password:</p>\n<blockquote>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊕</mo><mi>z</mi><mo>=</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x⊕z = y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊕</mo><mi>x</mi><mo>⊕</mo><mi>z</mi><mo>=</mo><mi>x</mi><mo>⊕</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x⊕x⊕z = x⊕y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rarr</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊕</mo><mi>y</mi><mo>=</mo><mi>z</mi></mrow><annotation encoding=\"application/x-tex\">x⊕y = z</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.04398em;\">z</span></span></span></span> (Because <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊕</mo><mi>x</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">x⊕x = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>)</p>\n</blockquote>\n<p>Denote the password for step <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, for a failed query <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">q_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, the password becomes <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub><mo>⊕</mo><msub><mi>q</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_{i}⊕q_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.73333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> = <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo>⊕</mo><msub><mi>q</mi><mi>i</mi></msub><mo>⊕</mo><msub><mi>q</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>⊕</mo><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">x⊕q_i⊕q_{i-1}...⊕q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7777700000000001em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.791661em;vertical-align:-0.208331em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> !<br>\nThus if we also encode our query <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">q_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⊕</mo><msub><mi>q</mi><mrow><mi>i</mi><mo>−</mo><mn>1</mn></mrow></msub><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mo>⊕</mo><msub><mi>q</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">⊕q_{i-1}...⊕q_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.791661em;vertical-align:-0.208331em;\"></span><span class=\"mord\">⊕</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.311664em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.208331em;\"><span></span></span></span></span></span></span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, the encoded value for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>x</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">x_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> is the same as the original <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span> to query <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>q</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">q_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>!</p>\n<p>Code</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> t;</span><br><span class=\"line\">    cin &gt;&gt; t;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(t--)&#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> xorval = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"type\">int</span> n, k, r;</span><br><span class=\"line\">        cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> guess = xorval ^ i;</span><br><span class=\"line\">            cout &lt;&lt; guess &lt;&lt; endl;</span><br><span class=\"line\">            xorval ^= guess;</span><br><span class=\"line\">            cin &gt;&gt; r;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r == <span class=\"number\">1</span> <span class=\"keyword\">or</span> r == <span class=\"number\">-1</span>) <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>[3:09AM]<br>\nIm like also super dizzy and kinda drunk now lol, first time bar experience lets gooo!<br>\nI drank a long island ice tea, gin tonic, a few shots of whiskey and some mixed stuff.<br>\nHonesty im suprised that I have a decent alcohol tolerance, but still, drink safely!</p>\n"},{"title":"UW Madison!","date":"2023-09-10T02:26:32.000Z","_content":"Okay its actually already been almost 11 days since I got to the US, and like around a week since I moved in to my dorm.\nI'm starting to get used to the life here, and well I miss Taiwan very much. People here are all pretty friendly although a bit too chaotic haha.\nI currently live in Chadbourne resident hall, which is a pretty nice dorm with an awesome location!\nI can physically feel the temperature getting colder and colder each day, and it's only september now! I wonder how cold it would go...\nI did the calculus 1 skip test a few days ago. I think im going to pass the test because it wasn't really hard. I'm thinking of skipping all three calculus classes by self-studying, I wonder if I can pull it off or not (I hope so).\nThe food here is kinda hit or miss. There is an buffet kind of cafeteria just under Chadbourne, so its quite convenient to get food here! The pizzas are always pretty consistent, but other things are more based on luck to be honest.\nAlso, doing classes with 400 other students is a pretty exciting experience! though most of the chairs and desks suck here >:(\nCurrently, my course schedule is made so I can do every codeforces contest (my first class will be at 1:30 pm). Even if there isn't a contest I can sleep to my hearts content! great schedule!\nAlthough, doing cf contests in the morning when your brain hasn't started yet isn't the best experience. I tried out a div 3 contest and things went horribly wrong.\nThere is div 2s back to back tomorrow, and I will attend both of them. I don't wish I maintain my rating, I just wish I can preform and do my best.\nI've also met alot of new people here, although I'm struggling to make friends in my dorm floor (im just too introverted and I was sick the second day I got here haha), I made some comp sci friends and some people I met while waiting for things, cool!\n\nAnyways, things seem to be pretty good the first week im here. I'll try my best at socialing, studying and doing cp. good luck myself and on Wisconsin~","source":"_posts/UW-Madison.md","raw":"---\ntitle: UW Madison!\ndate: 2023-09-09 21:26:32\ntags: [\"Life\"]\n---\nOkay its actually already been almost 11 days since I got to the US, and like around a week since I moved in to my dorm.\nI'm starting to get used to the life here, and well I miss Taiwan very much. People here are all pretty friendly although a bit too chaotic haha.\nI currently live in Chadbourne resident hall, which is a pretty nice dorm with an awesome location!\nI can physically feel the temperature getting colder and colder each day, and it's only september now! I wonder how cold it would go...\nI did the calculus 1 skip test a few days ago. I think im going to pass the test because it wasn't really hard. I'm thinking of skipping all three calculus classes by self-studying, I wonder if I can pull it off or not (I hope so).\nThe food here is kinda hit or miss. There is an buffet kind of cafeteria just under Chadbourne, so its quite convenient to get food here! The pizzas are always pretty consistent, but other things are more based on luck to be honest.\nAlso, doing classes with 400 other students is a pretty exciting experience! though most of the chairs and desks suck here >:(\nCurrently, my course schedule is made so I can do every codeforces contest (my first class will be at 1:30 pm). Even if there isn't a contest I can sleep to my hearts content! great schedule!\nAlthough, doing cf contests in the morning when your brain hasn't started yet isn't the best experience. I tried out a div 3 contest and things went horribly wrong.\nThere is div 2s back to back tomorrow, and I will attend both of them. I don't wish I maintain my rating, I just wish I can preform and do my best.\nI've also met alot of new people here, although I'm struggling to make friends in my dorm floor (im just too introverted and I was sick the second day I got here haha), I made some comp sci friends and some people I met while waiting for things, cool!\n\nAnyways, things seem to be pretty good the first week im here. I'll try my best at socialing, studying and doing cp. good luck myself and on Wisconsin~","slug":"UW-Madison","published":1,"updated":"2024-12-26T01:29:58.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblh8001eb0u9ello7jns","content":"<p>Okay its actually already been almost 11 days since I got to the US, and like around a week since I moved in to my dorm.<br>\nI’m starting to get used to the life here, and well I miss Taiwan very much. People here are all pretty friendly although a bit too chaotic haha.<br>\nI currently live in Chadbourne resident hall, which is a pretty nice dorm with an awesome location!<br>\nI can physically feel the temperature getting colder and colder each day, and it’s only september now! I wonder how cold it would go…<br>\nI did the calculus 1 skip test a few days ago. I think im going to pass the test because it wasn’t really hard. I’m thinking of skipping all three calculus classes by self-studying, I wonder if I can pull it off or not (I hope so).<br>\nThe food here is kinda hit or miss. There is an buffet kind of cafeteria just under Chadbourne, so its quite convenient to get food here! The pizzas are always pretty consistent, but other things are more based on luck to be honest.<br>\nAlso, doing classes with 400 other students is a pretty exciting experience! though most of the chairs and desks suck here &gt;:(<br>\nCurrently, my course schedule is made so I can do every codeforces contest (my first class will be at 1:30 pm). Even if there isn’t a contest I can sleep to my hearts content! great schedule!<br>\nAlthough, doing cf contests in the morning when your brain hasn’t started yet isn’t the best experience. I tried out a div 3 contest and things went horribly wrong.<br>\nThere is div 2s back to back tomorrow, and I will attend both of them. I don’t wish I maintain my rating, I just wish I can preform and do my best.<br>\nI’ve also met alot of new people here, although I’m struggling to make friends in my dorm floor (im just too introverted and I was sick the second day I got here haha), I made some comp sci friends and some people I met while waiting for things, cool!</p>\n<p>Anyways, things seem to be pretty good the first week im here. I’ll try my best at socialing, studying and doing cp. good luck myself and on Wisconsin~</p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>Okay its actually already been almost 11 days since I got to the US, and like around a week since I moved in to my dorm.<br>\nI’m starting to get used to the life here, and well I miss Taiwan very much. People here are all pretty friendly although a bit too chaotic haha.<br>\nI currently live in Chadbourne resident hall, which is a pretty nice dorm with an awesome location!<br>\nI can physically feel the temperature getting colder and colder each day, and it’s only september now! I wonder how cold it would go…<br>\nI did the calculus 1 skip test a few days ago. I think im going to pass the test because it wasn’t really hard. I’m thinking of skipping all three calculus classes by self-studying, I wonder if I can pull it off or not (I hope so).<br>\nThe food here is kinda hit or miss. There is an buffet kind of cafeteria just under Chadbourne, so its quite convenient to get food here! The pizzas are always pretty consistent, but other things are more based on luck to be honest.<br>\nAlso, doing classes with 400 other students is a pretty exciting experience! though most of the chairs and desks suck here &gt;:(<br>\nCurrently, my course schedule is made so I can do every codeforces contest (my first class will be at 1:30 pm). Even if there isn’t a contest I can sleep to my hearts content! great schedule!<br>\nAlthough, doing cf contests in the morning when your brain hasn’t started yet isn’t the best experience. I tried out a div 3 contest and things went horribly wrong.<br>\nThere is div 2s back to back tomorrow, and I will attend both of them. I don’t wish I maintain my rating, I just wish I can preform and do my best.<br>\nI’ve also met alot of new people here, although I’m struggling to make friends in my dorm floor (im just too introverted and I was sick the second day I got here haha), I made some comp sci friends and some people I met while waiting for things, cool!</p>\n<p>Anyways, things seem to be pretty good the first week im here. I’ll try my best at socialing, studying and doing cp. good luck myself and on Wisconsin~</p>\n"},{"title":"Some thought about CP + some CF","date":"2023-08-07T05:24:06.000Z","_content":"I'm seriously considering whether I should try pursuing CP in college. I did CP in highschool before, and really didn't achieve much. The main thing I should think about is what I can get from doing CP in college.\nI talked to Kuroma yesterday and I decided to give myself one year for CP:\nIf I can't get in ICPC or can't get to atleast master in CF I'll quit and focus on DL. I think this is a solid plan do really determine if I should spend my time on this, hope I can do it!\nI've also contacted a previous member of UW Madison's ICPC team--RobeZH. I was really inspired and shock when I saw in his blog that he only started CP in his undergrad, and within only 4 years he became IGM and did successfully in ICPC. I hope to know more about CP in Madison and I wish to become as good as him.\nAnother thing is that I went and contacted a former friend of mine which I thought I would never forgive him. There was a annual team-based algorithm contest and we went as a team before. For last years contest, he replaced me with another person that barely knows how to code, and didn't notify me whatsoever. I was in a really dark time and this really made me collapse. I thought we were good friends and he wouldn't do something like this. I blocked him everywhere and I absolutely hated him since.\nAfter a whole year and being in a better position, I was talking with one of our mutual friend who did well in the college entrance exam. He mentioned that he was really sorry and wanted to apologize to me. I was in dilemma because I thought it would be super awkward. I told the friend to tell him that I wish him the best luck at Singapore (He is going to NTU). I told my counselor about this and she encouraged me to ask him about why he didn't invite me.\nI was like ok fuck it the worst thing thats gonna happen is I hate him more, I have nothing to lose! So I went and questioned him.\nThe reason he gave me was he was in a hurry and genuinely did not think that much. This was such a bad reason that it actually made me laugh. Although after alot of thinking, I realized that there is basically no point to hate him really, and him giving a bad reason without even trying to come up with a better one really made me chuckle, so I just kinda forgave him. I don't think we could be as good as a friend like before, but hey, at least I don't hate him anymore.\n\nWell, enough for recent updates and lets check out some CF problems :D\n\n## [CF 1336A. Linova and Kingdom](https://codeforces.com/problemset/problem/1336/A)\n\nThis problem is a problem I mindsolved at the salon but didn't implement until today.\n\n> You are given a tree with $n$ ($n \\leq  2\\cdot10^5$) nodes and 1 as the tree's root.\n> There are two kind of nodes--Industry node and tourism node.\n> The happiness is defined as the number of tourism nodes on the path from a industry node to the root. (The root can also be a tourism node or industry node)\n> Given a value $k$ ($1 \\leq  k \\leq n$), You must assign $k$ nodes as industry nodes. What is the maximum possible sum of happiness achievable?\n\nThere are a few observations we can easily notice:\n\nWe should always choose the ones with the deeper depth on a path, as it would give us more possible happiness compared to chosing one with a smaller depth.\n\nWe can let every node be a tourist node, and try assigning industry nodes and calculate the changes each industry node made.\n\nNow, lets try to figure out the happiness a node with depth $d$ and a subtree size of $t$ provides.\nObviously, the number of tourism nodes on the path to the root is just equal to $d$. But we also need to take account for the happiness taken away from changing it from a tourist node to a industry node.\nThe total ammount of happiness taken away is equal to the size of the subtree $t$. So for a industry node with depth $d$ and a subtree size of $t$, The total happiness it contributes is $t - d$.\n\nNow we can just greedily choose nodes that contribute the highest happiness and AC this question!\n\nCode\n\n```cpp\nconst int MAXN = (int)2e5 + 5;\nvector<int> graph[MAXN];\nvector<int> depth(MAXN);\nvector<int> sz(MAXN);\nvoid dfs(int node, int prev) {\n    depth[node] = depth[prev] + 1;\n    if(graph[node].size() == 1) sz[node] = 0;\n    for(auto i : graph[node]) {\n        if(i != prev) {\n            dfs(i, node);\n            sz[node] += (sz[i] + 1);\n        }\n    }\n}\nvoid solve() {\n    int n, k;\n    cin >> n >> k;\n    for(int i = 0; i < n - 1; i++) {\n        int u, v;\n        cin >> u >> v;\n        graph[u].pb(v);\n        graph[v].pb(u);\n    }\n    depth[1] = -1;\n    dfs(1, 1);\n    vector<pii> vec;\n    int ans = 0;\n    for(int i = 1; i <= n; i++) {\n        vec.pb({depth[i] - sz[i],i});\n    }\n    sort(all(vec), [](pii a, pii b){return a.first > b.first;});\n    for(int i = 0; i < k; i++) {\n        ans += vec[i].first;\n    }\n    cout << ans << endl;\n    return;\n}\n```\n\nTime Complexity: $O(nlogn)$\n\nNext off are questions all from CF Round 890 (Div 2), I couldn't participate in time unfortunately :/\nThe statements are all super clear so I'll omit the part explaining the statements.\n\n## [CF 1856A. Tales of a Sort](https://codeforces.com/problemset/problem/1856/A)\n\nA trivial problem so I'll just provide my code and skip this question...\n\nCode\n\n```cpp\nvoid solve() {\n    int n;\n    cin >> n;\n    int arr[n];\n    for(int i = 0; i < n; i++) cin >> arr[i];\n    int ans = 0;\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] > arr[i + 1]) {\n            ans = max(ans, arr[i]);\n        }\n    }\n    cout << ans << endl;\n    return;\n}\n```\n\nTime Complexity: $O(n)$\n\n## [CF 1856B. Good Arrays](https://codeforces.com/problemset/problem/1856/B)\n\nThere is a easy solution to this: We can set all 1's into 2, and anything not equal to 1 as one. Now if the current sum is smaller or equal to the original sum, it's possible, else it isn't.\nThe idea is quite simple here. We make sure everything satifys $a_i \\neq b_i$, and if the sum is less then the original one, it's not hard to see that we can just put the remaining needed values on one index.\n\nCode\n\n```cpp\nvoid solve() {\n    int n;\n    cin >> n;\n    int arr[n];\n    int sum = 0;\n    int sum2 = 0;\n    for(int i = 0; i < n; i++) {\n        cin >> arr[i];\n        sum += arr[i];\n        if(arr[i] == 1) {\n            sum2 += 2;\n        } else {\n            sum2 += 1;\n        }\n    }\n    if(n == 1) {\n        cout << \"NO\" << endl;\n        return;\n    }\n    if(sum2 > sum) {\n        cout << \"NO\" << endl;\n    } else {\n        cout << \"YES\" << endl;\n    }\n    return;\n}\n```\n\nTime Complexity: $O(n)$\n\n## [CF 1856C. To Become Max](https://codeforces.com/problemset/problem/1856/C)\n\n(notice that $n \\leq 1000$)\nI initally thought this problem was super easy and quickly came up with a greedy solution, just to be proven wrong by one of the samples.\nThe idea is for each index, we use binary search to find the maximum value this index can become.\n\nlets say for an index $idx$ with a original value $arr[idx]$, and we want to check if making it become $m$ is possible or not:\n\nif $arr[idx] >= m$ it's obviously possible.\nelse, we add a cost of $arr[idx] - i$ and start checking and modifying indexes on the right:\nfor each index $i$ on the right, we only need it to become $m - (i - idx)$ for $idx$ to become $m$.\nif we encounter one that already satisfys this condition, we can stop and check if the overall cost is higher than what we have.\nThe same goes for when we get to the end, except we also need to check if the last element is large enough.\n\nCode\n\n```cpp\nint n, k;\nbool func(int arr[], int m, int idx) {\n    int cost = 0;\n    for(int i = idx; i < n; i++) {\n        if(i == n - 1) return k >= cost and arr[i] >= m - (i - idx);\n        if(arr[i] >= m - (i - idx)) return k >= cost;\n        cost += (m - arr[i] - (i - idx));\n    }\n    return k >= cost;\n}\nvoid solve() {\n    cin >> n >> k;\n    int arr[n];\n    int mx = -1;\n    for(int i = 0; i < n; i++) {\n        cin >> arr[i];\n        mx = max(mx, arr[i]);\n    }\n    for(int i = 0; i < (n - 1); i++) {\n        int l = -1, r = INF; \n        while(r - l > 1) {\n            int m = (r + l) >> 1;\n            if(func(arr, m, i) == true) {\n                l = m;\n            } else {\n                r = m;\n            }\n        }\n        mx = max(mx, l);\n    }\n    cout << mx << endl;\n    return;\n}\n```\n\nTime Complexity: $O(n^2logn)$\n\n## [CF 1856D. More Wrong](https://codeforces.com/problemset/problem/1856/D)\n\nWell... this was a tricky question.\nI did thought of the crucial part of solving this question, but I just couldn't assemble it.\nAnother thing is that im just not that good with D&Q problems.\n\nThe thing I observed quickly is this:\n\nDenote $q(l, r)$ as a query of $[l, r]$, if $q(l, r) == q(l, r - 1)$, $a[r]$ is bigger than every value in the sub array $a[l...r - 1]$.\n\nI failed to realize that if I know the biggest index in two adjacent sub arrays, I can use this idea to find which one is bigger!\n\nThe whole solution is as follows:\n\nWe divide the arrays into several subarrays of 2 (there will be one with only 1 index if it's odd).\nFor the subarrays of 2, We each ask a query to determine which is bigger. (the index if theres only 1 index)\nNow we recursively do the following:\nFor each two adjacent subarrays $[l, m]$ and $[m+1, r]$ with this largest index at $l_{max}$ and $r_{max}$, I can ask 2 queries, $q(l_{max}, r_{max})$ and $q(l_{max}, r_{max} - 1)$, to determine which is bigger. (if $r_{max} == l_{max} + 1$ we just ask $q(l_{max}, r_{max})$)\n\nAnd the final biggest index is what we want!\n\nThe formal proof for cost is in the editorial,\nalthough we can also get an extremely rough estimate of the cost: $\\displaystyle \\sum_{i = 1}^{log(2000)}(\\frac{1}{2^{(i-1)}})n^2 \\approx 4\\cdot n^2 < 5\\cdot n^2$\n\nCode (Note that my implementation is pretty bad, check out the editorial for a concise version!)\n\n```cpp\nint solve(int l, int r) {\n    if(r - l == 1) {\n        cout << \"? \" << l << \" \" << r << endl;\n        int ret;\n        cin >> ret;\n        if(ret == 1) return l;\n        else return r;\n    } else if(r - l == 0) {\n        return l;\n    }\n    int maxl = solve(l, (l + r) >> 1);\n    int maxr = solve(((l + r) >> 1) + 1, r);\n    if(maxr - maxl == 1) {\n        cout << \"? \" << maxl  << \" \" << maxr << endl;\n        int ret;\n        cin >> ret;\n        if(ret == 1) return maxl;\n        else return maxr;\n    }\n    int ans1;\n    int ans2;\n    cout << \"? \" << maxl << \" \" << maxr << endl;\n    cin >> ans1;\n    cout << \"? \" << maxl << \" \" << maxr - 1 << endl;\n    cin >> ans2;\n    if(ans1 == ans2) {\n        return maxr;\n    } else {\n        return maxl;\n    }\n}\n```\n\nTime Complexity: $O(n)$\n","source":"_posts/Some-thought-about-CP-some-CF.md","raw":"---\ntitle: Some thought about CP + some CF\ndate: 2023-08-07 00:24:06\ntags: [\"Life\", \"CP\"]\n---\nI'm seriously considering whether I should try pursuing CP in college. I did CP in highschool before, and really didn't achieve much. The main thing I should think about is what I can get from doing CP in college.\nI talked to Kuroma yesterday and I decided to give myself one year for CP:\nIf I can't get in ICPC or can't get to atleast master in CF I'll quit and focus on DL. I think this is a solid plan do really determine if I should spend my time on this, hope I can do it!\nI've also contacted a previous member of UW Madison's ICPC team--RobeZH. I was really inspired and shock when I saw in his blog that he only started CP in his undergrad, and within only 4 years he became IGM and did successfully in ICPC. I hope to know more about CP in Madison and I wish to become as good as him.\nAnother thing is that I went and contacted a former friend of mine which I thought I would never forgive him. There was a annual team-based algorithm contest and we went as a team before. For last years contest, he replaced me with another person that barely knows how to code, and didn't notify me whatsoever. I was in a really dark time and this really made me collapse. I thought we were good friends and he wouldn't do something like this. I blocked him everywhere and I absolutely hated him since.\nAfter a whole year and being in a better position, I was talking with one of our mutual friend who did well in the college entrance exam. He mentioned that he was really sorry and wanted to apologize to me. I was in dilemma because I thought it would be super awkward. I told the friend to tell him that I wish him the best luck at Singapore (He is going to NTU). I told my counselor about this and she encouraged me to ask him about why he didn't invite me.\nI was like ok fuck it the worst thing thats gonna happen is I hate him more, I have nothing to lose! So I went and questioned him.\nThe reason he gave me was he was in a hurry and genuinely did not think that much. This was such a bad reason that it actually made me laugh. Although after alot of thinking, I realized that there is basically no point to hate him really, and him giving a bad reason without even trying to come up with a better one really made me chuckle, so I just kinda forgave him. I don't think we could be as good as a friend like before, but hey, at least I don't hate him anymore.\n\nWell, enough for recent updates and lets check out some CF problems :D\n\n## [CF 1336A. Linova and Kingdom](https://codeforces.com/problemset/problem/1336/A)\n\nThis problem is a problem I mindsolved at the salon but didn't implement until today.\n\n> You are given a tree with $n$ ($n \\leq  2\\cdot10^5$) nodes and 1 as the tree's root.\n> There are two kind of nodes--Industry node and tourism node.\n> The happiness is defined as the number of tourism nodes on the path from a industry node to the root. (The root can also be a tourism node or industry node)\n> Given a value $k$ ($1 \\leq  k \\leq n$), You must assign $k$ nodes as industry nodes. What is the maximum possible sum of happiness achievable?\n\nThere are a few observations we can easily notice:\n\nWe should always choose the ones with the deeper depth on a path, as it would give us more possible happiness compared to chosing one with a smaller depth.\n\nWe can let every node be a tourist node, and try assigning industry nodes and calculate the changes each industry node made.\n\nNow, lets try to figure out the happiness a node with depth $d$ and a subtree size of $t$ provides.\nObviously, the number of tourism nodes on the path to the root is just equal to $d$. But we also need to take account for the happiness taken away from changing it from a tourist node to a industry node.\nThe total ammount of happiness taken away is equal to the size of the subtree $t$. So for a industry node with depth $d$ and a subtree size of $t$, The total happiness it contributes is $t - d$.\n\nNow we can just greedily choose nodes that contribute the highest happiness and AC this question!\n\nCode\n\n```cpp\nconst int MAXN = (int)2e5 + 5;\nvector<int> graph[MAXN];\nvector<int> depth(MAXN);\nvector<int> sz(MAXN);\nvoid dfs(int node, int prev) {\n    depth[node] = depth[prev] + 1;\n    if(graph[node].size() == 1) sz[node] = 0;\n    for(auto i : graph[node]) {\n        if(i != prev) {\n            dfs(i, node);\n            sz[node] += (sz[i] + 1);\n        }\n    }\n}\nvoid solve() {\n    int n, k;\n    cin >> n >> k;\n    for(int i = 0; i < n - 1; i++) {\n        int u, v;\n        cin >> u >> v;\n        graph[u].pb(v);\n        graph[v].pb(u);\n    }\n    depth[1] = -1;\n    dfs(1, 1);\n    vector<pii> vec;\n    int ans = 0;\n    for(int i = 1; i <= n; i++) {\n        vec.pb({depth[i] - sz[i],i});\n    }\n    sort(all(vec), [](pii a, pii b){return a.first > b.first;});\n    for(int i = 0; i < k; i++) {\n        ans += vec[i].first;\n    }\n    cout << ans << endl;\n    return;\n}\n```\n\nTime Complexity: $O(nlogn)$\n\nNext off are questions all from CF Round 890 (Div 2), I couldn't participate in time unfortunately :/\nThe statements are all super clear so I'll omit the part explaining the statements.\n\n## [CF 1856A. Tales of a Sort](https://codeforces.com/problemset/problem/1856/A)\n\nA trivial problem so I'll just provide my code and skip this question...\n\nCode\n\n```cpp\nvoid solve() {\n    int n;\n    cin >> n;\n    int arr[n];\n    for(int i = 0; i < n; i++) cin >> arr[i];\n    int ans = 0;\n    for(int i = 0; i < n - 1; i++) {\n        if(arr[i] > arr[i + 1]) {\n            ans = max(ans, arr[i]);\n        }\n    }\n    cout << ans << endl;\n    return;\n}\n```\n\nTime Complexity: $O(n)$\n\n## [CF 1856B. Good Arrays](https://codeforces.com/problemset/problem/1856/B)\n\nThere is a easy solution to this: We can set all 1's into 2, and anything not equal to 1 as one. Now if the current sum is smaller or equal to the original sum, it's possible, else it isn't.\nThe idea is quite simple here. We make sure everything satifys $a_i \\neq b_i$, and if the sum is less then the original one, it's not hard to see that we can just put the remaining needed values on one index.\n\nCode\n\n```cpp\nvoid solve() {\n    int n;\n    cin >> n;\n    int arr[n];\n    int sum = 0;\n    int sum2 = 0;\n    for(int i = 0; i < n; i++) {\n        cin >> arr[i];\n        sum += arr[i];\n        if(arr[i] == 1) {\n            sum2 += 2;\n        } else {\n            sum2 += 1;\n        }\n    }\n    if(n == 1) {\n        cout << \"NO\" << endl;\n        return;\n    }\n    if(sum2 > sum) {\n        cout << \"NO\" << endl;\n    } else {\n        cout << \"YES\" << endl;\n    }\n    return;\n}\n```\n\nTime Complexity: $O(n)$\n\n## [CF 1856C. To Become Max](https://codeforces.com/problemset/problem/1856/C)\n\n(notice that $n \\leq 1000$)\nI initally thought this problem was super easy and quickly came up with a greedy solution, just to be proven wrong by one of the samples.\nThe idea is for each index, we use binary search to find the maximum value this index can become.\n\nlets say for an index $idx$ with a original value $arr[idx]$, and we want to check if making it become $m$ is possible or not:\n\nif $arr[idx] >= m$ it's obviously possible.\nelse, we add a cost of $arr[idx] - i$ and start checking and modifying indexes on the right:\nfor each index $i$ on the right, we only need it to become $m - (i - idx)$ for $idx$ to become $m$.\nif we encounter one that already satisfys this condition, we can stop and check if the overall cost is higher than what we have.\nThe same goes for when we get to the end, except we also need to check if the last element is large enough.\n\nCode\n\n```cpp\nint n, k;\nbool func(int arr[], int m, int idx) {\n    int cost = 0;\n    for(int i = idx; i < n; i++) {\n        if(i == n - 1) return k >= cost and arr[i] >= m - (i - idx);\n        if(arr[i] >= m - (i - idx)) return k >= cost;\n        cost += (m - arr[i] - (i - idx));\n    }\n    return k >= cost;\n}\nvoid solve() {\n    cin >> n >> k;\n    int arr[n];\n    int mx = -1;\n    for(int i = 0; i < n; i++) {\n        cin >> arr[i];\n        mx = max(mx, arr[i]);\n    }\n    for(int i = 0; i < (n - 1); i++) {\n        int l = -1, r = INF; \n        while(r - l > 1) {\n            int m = (r + l) >> 1;\n            if(func(arr, m, i) == true) {\n                l = m;\n            } else {\n                r = m;\n            }\n        }\n        mx = max(mx, l);\n    }\n    cout << mx << endl;\n    return;\n}\n```\n\nTime Complexity: $O(n^2logn)$\n\n## [CF 1856D. More Wrong](https://codeforces.com/problemset/problem/1856/D)\n\nWell... this was a tricky question.\nI did thought of the crucial part of solving this question, but I just couldn't assemble it.\nAnother thing is that im just not that good with D&Q problems.\n\nThe thing I observed quickly is this:\n\nDenote $q(l, r)$ as a query of $[l, r]$, if $q(l, r) == q(l, r - 1)$, $a[r]$ is bigger than every value in the sub array $a[l...r - 1]$.\n\nI failed to realize that if I know the biggest index in two adjacent sub arrays, I can use this idea to find which one is bigger!\n\nThe whole solution is as follows:\n\nWe divide the arrays into several subarrays of 2 (there will be one with only 1 index if it's odd).\nFor the subarrays of 2, We each ask a query to determine which is bigger. (the index if theres only 1 index)\nNow we recursively do the following:\nFor each two adjacent subarrays $[l, m]$ and $[m+1, r]$ with this largest index at $l_{max}$ and $r_{max}$, I can ask 2 queries, $q(l_{max}, r_{max})$ and $q(l_{max}, r_{max} - 1)$, to determine which is bigger. (if $r_{max} == l_{max} + 1$ we just ask $q(l_{max}, r_{max})$)\n\nAnd the final biggest index is what we want!\n\nThe formal proof for cost is in the editorial,\nalthough we can also get an extremely rough estimate of the cost: $\\displaystyle \\sum_{i = 1}^{log(2000)}(\\frac{1}{2^{(i-1)}})n^2 \\approx 4\\cdot n^2 < 5\\cdot n^2$\n\nCode (Note that my implementation is pretty bad, check out the editorial for a concise version!)\n\n```cpp\nint solve(int l, int r) {\n    if(r - l == 1) {\n        cout << \"? \" << l << \" \" << r << endl;\n        int ret;\n        cin >> ret;\n        if(ret == 1) return l;\n        else return r;\n    } else if(r - l == 0) {\n        return l;\n    }\n    int maxl = solve(l, (l + r) >> 1);\n    int maxr = solve(((l + r) >> 1) + 1, r);\n    if(maxr - maxl == 1) {\n        cout << \"? \" << maxl  << \" \" << maxr << endl;\n        int ret;\n        cin >> ret;\n        if(ret == 1) return maxl;\n        else return maxr;\n    }\n    int ans1;\n    int ans2;\n    cout << \"? \" << maxl << \" \" << maxr << endl;\n    cin >> ans1;\n    cout << \"? \" << maxl << \" \" << maxr - 1 << endl;\n    cin >> ans2;\n    if(ans1 == ans2) {\n        return maxr;\n    } else {\n        return maxl;\n    }\n}\n```\n\nTime Complexity: $O(n)$\n","slug":"Some-thought-about-CP-some-CF","published":1,"updated":"2024-12-26T01:29:58.506Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblh8001gb0u93veq55iv","content":"<p>I’m seriously considering whether I should try pursuing CP in college. I did CP in highschool before, and really didn’t achieve much. The main thing I should think about is what I can get from doing CP in college.<br>\nI talked to Kuroma yesterday and I decided to give myself one year for CP:<br>\nIf I can’t get in ICPC or can’t get to atleast master in CF I’ll quit and focus on DL. I think this is a solid plan do really determine if I should spend my time on this, hope I can do it!<br>\nI’ve also contacted a previous member of UW Madison’s ICPC team–RobeZH. I was really inspired and shock when I saw in his blog that he only started CP in his undergrad, and within only 4 years he became IGM and did successfully in ICPC. I hope to know more about CP in Madison and I wish to become as good as him.<br>\nAnother thing is that I went and contacted a former friend of mine which I thought I would never forgive him. There was a annual team-based algorithm contest and we went as a team before. For last years contest, he replaced me with another person that barely knows how to code, and didn’t notify me whatsoever. I was in a really dark time and this really made me collapse. I thought we were good friends and he wouldn’t do something like this. I blocked him everywhere and I absolutely hated him since.<br>\nAfter a whole year and being in a better position, I was talking with one of our mutual friend who did well in the college entrance exam. He mentioned that he was really sorry and wanted to apologize to me. I was in dilemma because I thought it would be super awkward. I told the friend to tell him that I wish him the best luck at Singapore (He is going to NTU). I told my counselor about this and she encouraged me to ask him about why he didn’t invite me.<br>\nI was like ok fuck it the worst thing thats gonna happen is I hate him more, I have nothing to lose! So I went and questioned him.<br>\nThe reason he gave me was he was in a hurry and genuinely did not think that much. This was such a bad reason that it actually made me laugh. Although after alot of thinking, I realized that there is basically no point to hate him really, and him giving a bad reason without even trying to come up with a better one really made me chuckle, so I just kinda forgave him. I don’t think we could be as good as a friend like before, but hey, at least I don’t hate him anymore.</p>\n<p>Well, enough for recent updates and lets check out some CF problems :D</p>\n<h2 id=\"cf-1336a-linova-and-kingdom\"><a href=\"https://codeforces.com/problemset/problem/1336/A\">CF 1336A. Linova and Kingdom</a></h2>\n<p>This problem is a problem I mindsolved at the salon but didn’t implement until today.</p>\n<blockquote>\n<p>You are given a tree with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>2</mn><mo>⋅</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">n \\leq  2\\cdot10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span>) nodes and 1 as the tree’s root.<br>\nThere are two kind of nodes–Industry node and tourism node.<br>\nThe happiness is defined as the number of tourism nodes on the path from a industry node to the root. (The root can also be a tourism node or industry node)<br>\nGiven a value <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">1 \\leq  k \\leq n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>), You must assign <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> nodes as industry nodes. What is the maximum possible sum of happiness achievable?</p>\n</blockquote>\n<p>There are a few observations we can easily notice:</p>\n<p>We should always choose the ones with the deeper depth on a path, as it would give us more possible happiness compared to chosing one with a smaller depth.</p>\n<p>We can let every node be a tourist node, and try assigning industry nodes and calculate the changes each industry node made.</p>\n<p>Now, lets try to figure out the happiness a node with depth <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> and a subtree size of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> provides.<br>\nObviously, the number of tourism nodes on the path to the root is just equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span>. But we also need to take account for the happiness taken away from changing it from a tourist node to a industry node.<br>\nThe total ammount of happiness taken away is equal to the size of the subtree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>. So for a industry node with depth <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> and a subtree size of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>, The total happiness it contributes is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>−</mo><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">t - d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69841em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span>.</p>\n<p>Now we can just greedily choose nodes that contribute the highest happiness and AC this question!</p>\n<p>Code</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> MAXN = (<span class=\"type\">int</span>)<span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; graph[MAXN];</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">depth</span><span class=\"params\">(MAXN)</span></span>;</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">sz</span><span class=\"params\">(MAXN)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> node, <span class=\"type\">int</span> prev)</span> </span>&#123;</span><br><span class=\"line\">    depth[node] = depth[prev] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(graph[node].<span class=\"built_in\">size</span>() == <span class=\"number\">1</span>) sz[node] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : graph[node]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i != prev) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(i, node);</span><br><span class=\"line\">            sz[node] += (sz[i] + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">        graph[u].<span class=\"built_in\">pb</span>(v);</span><br><span class=\"line\">        graph[v].<span class=\"built_in\">pb</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    depth[<span class=\"number\">1</span>] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    vector&lt;pii&gt; vec;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        vec.<span class=\"built_in\">pb</span>(&#123;depth[i] - sz[i],i&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(vec), [](pii a, pii b)&#123;<span class=\"keyword\">return</span> a.first &gt; b.first;&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">        ans += vec[i].first;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>Next off are questions all from CF Round 890 (Div 2), I couldn’t participate in time unfortunately :/<br>\nThe statements are all super clear so I’ll omit the part explaining the statements.</p>\n<h2 id=\"cf-1856a-tales-of-a-sort\"><a href=\"https://codeforces.com/problemset/problem/1856/A\">CF 1856A. Tales of a Sort</a></h2>\n<p>A trivial problem so I’ll just provide my code and skip this question…</p>\n<p>Code</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; arr[i];</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i] &gt; arr[i + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1856b-good-arrays\"><a href=\"https://codeforces.com/problemset/problem/1856/B\">CF 1856B. Good Arrays</a></h2>\n<p>There is a easy solution to this: We can set all 1’s into 2, and anything not equal to 1 as one. Now if the current sum is smaller or equal to the original sum, it’s possible, else it isn’t.<br>\nThe idea is quite simple here. We make sure everything satifys <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo mathvariant=\"normal\">≠</mo><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i \\neq b_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and if the sum is less then the original one, it’s not hard to see that we can just put the remaining needed values on one index.</p>\n<p>Code</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[n];</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; arr[i];</span><br><span class=\"line\">        sum += arr[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            sum2 += <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sum2 += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sum2 &gt; sum) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1856c-to-become-max\"><a href=\"https://codeforces.com/problemset/problem/1856/C\">CF 1856C. To Become Max</a></h2>\n<p>(notice that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>1000</mn></mrow><annotation encoding=\"application/x-tex\">n \\leq 1000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>)<br>\nI initally thought this problem was super easy and quickly came up with a greedy solution, just to be proven wrong by one of the samples.<br>\nThe idea is for each index, we use binary search to find the maximum value this index can become.</p>\n<p>lets say for an index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>d</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">idx</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span></span></span></span> with a original value <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mi>d</mi><mi>x</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">arr[idx]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span></span></span></span>, and we want to check if making it become <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> is possible or not:</p>\n<p>if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mi>d</mi><mi>x</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mo>=</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">arr[idx] &gt;= m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> it’s obviously possible.<br>\nelse, we add a cost of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mi>d</mi><mi>x</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">arr[idx] - i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> and start checking and modifying indexes on the right:<br>\nfor each index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> on the right, we only need it to become <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>−</mo><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mi>i</mi><mi>d</mi><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">m - (i - idx)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>d</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">idx</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span></span></span></span> to become <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>.<br>\nif we encounter one that already satisfys this condition, we can stop and check if the overall cost is higher than what we have.<br>\nThe same goes for when we get to the end, except we also need to check if the last element is large enough.</p>\n<p>Code</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n, k;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> m, <span class=\"type\">int</span> idx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> cost = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = idx; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == n - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> k &gt;= cost <span class=\"keyword\">and</span> arr[i] &gt;= m - (i - idx);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i] &gt;= m - (i - idx)) <span class=\"keyword\">return</span> k &gt;= cost;</span><br><span class=\"line\">        cost += (m - arr[i] - (i - idx));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> k &gt;= cost;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[n];</span><br><span class=\"line\">    <span class=\"type\">int</span> mx = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; arr[i];</span><br><span class=\"line\">        mx = <span class=\"built_in\">max</span>(mx, arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (n - <span class=\"number\">1</span>); i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l = <span class=\"number\">-1</span>, r = INF; </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(r - l &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> m = (r + l) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">func</span>(arr, m, i) == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                l = m;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                r = m;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mx = <span class=\"built_in\">max</span>(mx, l);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; mx &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1856d-more-wrong\"><a href=\"https://codeforces.com/problemset/problem/1856/D\">CF 1856D. More Wrong</a></h2>\n<p>Well… this was a tricky question.<br>\nI did thought of the crucial part of solving this question, but I just couldn’t assemble it.<br>\nAnother thing is that im just not that good with D&amp;Q problems.</p>\n<p>The thing I observed quickly is this:</p>\n<p>Denote <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">q(l, r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span></span></span></span> as a query of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[l, r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo>=</mo><mi>q</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">q(l, r) == q(l, r - 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span> is bigger than every value in the sub array <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi>r</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[l...r - 1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>.</p>\n<p>I failed to realize that if I know the biggest index in two adjacent sub arrays, I can use this idea to find which one is bigger!</p>\n<p>The whole solution is as follows:</p>\n<p>We divide the arrays into several subarrays of 2 (there will be one with only 1 index if it’s odd).<br>\nFor the subarrays of 2, We each ask a query to determine which is bigger. (the index if theres only 1 index)<br>\nNow we recursively do the following:<br>\nFor each two adjacent subarrays <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>m</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[l, m]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">]</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>m</mi><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[m+1, r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span> with this largest index at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>l</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">l_{max}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>r</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">r_{max}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, I can ask 2 queries, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo stretchy=\"false\">(</mo><msub><mi>l</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo separator=\"true\">,</mo><msub><mi>r</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">q(l_{max}, r_{max})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo stretchy=\"false\">(</mo><msub><mi>l</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo separator=\"true\">,</mo><msub><mi>r</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">q(l_{max}, r_{max} - 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>, to determine which is bigger. (if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>r</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><mo>=</mo><msub><mi>l</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">r_{max} == l_{max} + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> we just ask <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo stretchy=\"false\">(</mo><msub><mi>l</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo separator=\"true\">,</mo><msub><mi>r</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">q(l_{max}, r_{max})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>)</p>\n<p>And the final biggest index is what we want!</p>\n<p>The formal proof for cost is in the editorial,<br>\nalthough we can also get an extremely rough estimate of the cost: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mn>2000</mn><mo stretchy=\"false\">)</mo></mrow></munderover><mo stretchy=\"false\">(</mo><mfrac><mn>1</mn><msup><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msup></mfrac><mo stretchy=\"false\">)</mo><msup><mi>n</mi><mn>2</mn></msup><mo>≈</mo><mn>4</mn><mo>⋅</mo><msup><mi>n</mi><mn>2</mn></msup><mo>&lt;</mo><mn>5</mn><mo>⋅</mo><msup><mi>n</mi><mn>2</mn></msup></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle \\sum_{i = 1}^{log(2000)}(\\frac{1}{2^{(i-1)}})n^2 \\approx 4\\cdot n^2 &lt; 5\\cdot n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.2386740000000005em;vertical-align:-1.277669em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.9610050000000003em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.386005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">0</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.2960000000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.814em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.704em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9032079999999999em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>Code (Note that my implementation is pretty bad, check out the editorial for a concise version!)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r - l == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;? &quot;</span> &lt;&lt; l &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; r &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"type\">int</span> ret;</span><br><span class=\"line\">        cin &gt;&gt; ret;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ret == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(r - l == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> maxl = <span class=\"built_in\">solve</span>(l, (l + r) &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> maxr = <span class=\"built_in\">solve</span>(((l + r) &gt;&gt; <span class=\"number\">1</span>) + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(maxr - maxl == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;? &quot;</span> &lt;&lt; maxl  &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; maxr &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"type\">int</span> ret;</span><br><span class=\"line\">        cin &gt;&gt; ret;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ret == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> maxl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> maxr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans1;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans2;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;? &quot;</span> &lt;&lt; maxl &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; maxr &lt;&lt; endl;</span><br><span class=\"line\">    cin &gt;&gt; ans1;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;? &quot;</span> &lt;&lt; maxl &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; maxr - <span class=\"number\">1</span> &lt;&lt; endl;</span><br><span class=\"line\">    cin &gt;&gt; ans2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ans1 == ans2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxr;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>I’m seriously considering whether I should try pursuing CP in college. I did CP in highschool before, and really didn’t achieve much. The main thing I should think about is what I can get from doing CP in college.<br>\nI talked to Kuroma yesterday and I decided to give myself one year for CP:<br>\nIf I can’t get in ICPC or can’t get to atleast master in CF I’ll quit and focus on DL. I think this is a solid plan do really determine if I should spend my time on this, hope I can do it!<br>\nI’ve also contacted a previous member of UW Madison’s ICPC team–RobeZH. I was really inspired and shock when I saw in his blog that he only started CP in his undergrad, and within only 4 years he became IGM and did successfully in ICPC. I hope to know more about CP in Madison and I wish to become as good as him.<br>\nAnother thing is that I went and contacted a former friend of mine which I thought I would never forgive him. There was a annual team-based algorithm contest and we went as a team before. For last years contest, he replaced me with another person that barely knows how to code, and didn’t notify me whatsoever. I was in a really dark time and this really made me collapse. I thought we were good friends and he wouldn’t do something like this. I blocked him everywhere and I absolutely hated him since.<br>\nAfter a whole year and being in a better position, I was talking with one of our mutual friend who did well in the college entrance exam. He mentioned that he was really sorry and wanted to apologize to me. I was in dilemma because I thought it would be super awkward. I told the friend to tell him that I wish him the best luck at Singapore (He is going to NTU). I told my counselor about this and she encouraged me to ask him about why he didn’t invite me.<br>\nI was like ok fuck it the worst thing thats gonna happen is I hate him more, I have nothing to lose! So I went and questioned him.<br>\nThe reason he gave me was he was in a hurry and genuinely did not think that much. This was such a bad reason that it actually made me laugh. Although after alot of thinking, I realized that there is basically no point to hate him really, and him giving a bad reason without even trying to come up with a better one really made me chuckle, so I just kinda forgave him. I don’t think we could be as good as a friend like before, but hey, at least I don’t hate him anymore.</p>\n<p>Well, enough for recent updates and lets check out some CF problems :D</p>\n<h2 id=\"cf-1336a-linova-and-kingdom\"><a href=\"https://codeforces.com/problemset/problem/1336/A\">CF 1336A. Linova and Kingdom</a></h2>\n<p>This problem is a problem I mindsolved at the salon but didn’t implement until today.</p>\n<blockquote>\n<p>You are given a tree with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>2</mn><mo>⋅</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">n \\leq  2\\cdot10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span>) nodes and 1 as the tree’s root.<br>\nThere are two kind of nodes–Industry node and tourism node.<br>\nThe happiness is defined as the number of tourism nodes on the path from a industry node to the root. (The root can also be a tourism node or industry node)<br>\nGiven a value <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">1 \\leq  k \\leq n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.78041em;vertical-align:-0.13597em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.83041em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span>), You must assign <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>k</mi></mrow><annotation encoding=\"application/x-tex\">k</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03148em;\">k</span></span></span></span> nodes as industry nodes. What is the maximum possible sum of happiness achievable?</p>\n</blockquote>\n<p>There are a few observations we can easily notice:</p>\n<p>We should always choose the ones with the deeper depth on a path, as it would give us more possible happiness compared to chosing one with a smaller depth.</p>\n<p>We can let every node be a tourist node, and try assigning industry nodes and calculate the changes each industry node made.</p>\n<p>Now, lets try to figure out the happiness a node with depth <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> and a subtree size of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span> provides.<br>\nObviously, the number of tourism nodes on the path to the root is just equal to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span>. But we also need to take account for the happiness taken away from changing it from a tourist node to a industry node.<br>\nThe total ammount of happiness taken away is equal to the size of the subtree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>. So for a industry node with depth <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span> and a subtree size of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi></mrow><annotation encoding=\"application/x-tex\">t</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.61508em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">t</span></span></span></span>, The total happiness it contributes is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>t</mi><mo>−</mo><mi>d</mi></mrow><annotation encoding=\"application/x-tex\">t - d</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69841em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">t</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">d</span></span></span></span>.</p>\n<p>Now we can just greedily choose nodes that contribute the highest happiness and AC this question!</p>\n<p>Code</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">const</span> <span class=\"type\">int</span> MAXN = (<span class=\"type\">int</span>)<span class=\"number\">2e5</span> + <span class=\"number\">5</span>;</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; graph[MAXN];</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">depth</span><span class=\"params\">(MAXN)</span></span>;</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">sz</span><span class=\"params\">(MAXN)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">dfs</span><span class=\"params\">(<span class=\"type\">int</span> node, <span class=\"type\">int</span> prev)</span> </span>&#123;</span><br><span class=\"line\">    depth[node] = depth[prev] + <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(graph[node].<span class=\"built_in\">size</span>() == <span class=\"number\">1</span>) sz[node] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> i : graph[node]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i != prev) &#123;</span><br><span class=\"line\">            <span class=\"built_in\">dfs</span>(i, node);</span><br><span class=\"line\">            sz[node] += (sz[i] + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, k;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> u, v;</span><br><span class=\"line\">        cin &gt;&gt; u &gt;&gt; v;</span><br><span class=\"line\">        graph[u].<span class=\"built_in\">pb</span>(v);</span><br><span class=\"line\">        graph[v].<span class=\"built_in\">pb</span>(u);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    depth[<span class=\"number\">1</span>] = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"built_in\">dfs</span>(<span class=\"number\">1</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">    vector&lt;pii&gt; vec;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        vec.<span class=\"built_in\">pb</span>(&#123;depth[i] - sz[i],i&#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">sort</span>(<span class=\"built_in\">all</span>(vec), [](pii a, pii b)&#123;<span class=\"keyword\">return</span> a.first &gt; b.first;&#125;);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; k; i++) &#123;</span><br><span class=\"line\">        ans += vec[i].first;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>Next off are questions all from CF Round 890 (Div 2), I couldn’t participate in time unfortunately :/<br>\nThe statements are all super clear so I’ll omit the part explaining the statements.</p>\n<h2 id=\"cf-1856a-tales-of-a-sort\"><a href=\"https://codeforces.com/problemset/problem/1856/A\">CF 1856A. Tales of a Sort</a></h2>\n<p>A trivial problem so I’ll just provide my code and skip this question…</p>\n<p>Code</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) cin &gt;&gt; arr[i];</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i] &gt; arr[i + <span class=\"number\">1</span>]) &#123;</span><br><span class=\"line\">            ans = <span class=\"built_in\">max</span>(ans, arr[i]);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1856b-good-arrays\"><a href=\"https://codeforces.com/problemset/problem/1856/B\">CF 1856B. Good Arrays</a></h2>\n<p>There is a easy solution to this: We can set all 1’s into 2, and anything not equal to 1 as one. Now if the current sum is smaller or equal to the original sum, it’s possible, else it isn’t.<br>\nThe idea is quite simple here. We make sure everything satifys <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mi>i</mi></msub><mo mathvariant=\"normal\">≠</mo><msub><mi>b</mi><mi>i</mi></msub></mrow><annotation encoding=\"application/x-tex\">a_i \\neq b_i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\"><span class=\"mrel\"><span class=\"mord vbox\"><span class=\"thinbox\"><span class=\"rlap\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel\">=</span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.31166399999999994em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, and if the sum is less then the original one, it’s not hard to see that we can just put the remaining needed values on one index.</p>\n<p>Code</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[n];</span><br><span class=\"line\">    <span class=\"type\">int</span> sum = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> sum2 = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; arr[i];</span><br><span class=\"line\">        sum += arr[i];</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i] == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            sum2 += <span class=\"number\">2</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            sum2 += <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sum2 &gt; sum) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;NO&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;YES&quot;</span> &lt;&lt; endl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1856c-to-become-max\"><a href=\"https://codeforces.com/problemset/problem/1856/C\">CF 1856C. To Become Max</a></h2>\n<p>(notice that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>1000</mn></mrow><annotation encoding=\"application/x-tex\">n \\leq 1000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>)<br>\nI initally thought this problem was super easy and quickly came up with a greedy solution, just to be proven wrong by one of the samples.<br>\nThe idea is for each index, we use binary search to find the maximum value this index can become.</p>\n<p>lets say for an index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>d</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">idx</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span></span></span></span> with a original value <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mi>d</mi><mi>x</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">arr[idx]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span></span></span></span>, and we want to check if making it become <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> is possible or not:</p>\n<p>if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mi>d</mi><mi>x</mi><mo stretchy=\"false\">]</mo><mo>&gt;</mo><mo>=</mo><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">arr[idx] &gt;= m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&gt;</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> it’s obviously possible.<br>\nelse, we add a cost of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>r</mi><mi>r</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mi>d</mi><mi>x</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">arr[idx] - i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> and start checking and modifying indexes on the right:<br>\nfor each index <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> on the right, we only need it to become <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mo>−</mo><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mi>i</mi><mi>d</mi><mi>x</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">m - (i - idx)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">)</span></span></span></span> for <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi><mi>d</mi><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">idx</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.69444em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">x</span></span></span></span> to become <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span>.<br>\nif we encounter one that already satisfys this condition, we can stop and check if the overall cost is higher than what we have.<br>\nThe same goes for when we get to the end, except we also need to check if the last element is large enough.</p>\n<p>Code</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"type\">int</span> n, k;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">bool</span> <span class=\"title\">func</span><span class=\"params\">(<span class=\"type\">int</span> arr[], <span class=\"type\">int</span> m, <span class=\"type\">int</span> idx)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> cost = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = idx; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(i == n - <span class=\"number\">1</span>) <span class=\"keyword\">return</span> k &gt;= cost <span class=\"keyword\">and</span> arr[i] &gt;= m - (i - idx);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(arr[i] &gt;= m - (i - idx)) <span class=\"keyword\">return</span> k &gt;= cost;</span><br><span class=\"line\">        cost += (m - arr[i] - (i - idx));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> k &gt;= cost;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class=\"line\">    <span class=\"type\">int</span> arr[n];</span><br><span class=\"line\">    <span class=\"type\">int</span> mx = <span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; arr[i];</span><br><span class=\"line\">        mx = <span class=\"built_in\">max</span>(mx, arr[i]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; (n - <span class=\"number\">1</span>); i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> l = <span class=\"number\">-1</span>, r = INF; </span><br><span class=\"line\">        <span class=\"keyword\">while</span>(r - l &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> m = (r + l) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"built_in\">func</span>(arr, m, i) == <span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">                l = m;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                r = m;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mx = <span class=\"built_in\">max</span>(mx, l);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; mx &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>2</mn></msup><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^2logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.064108em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"cf-1856d-more-wrong\"><a href=\"https://codeforces.com/problemset/problem/1856/D\">CF 1856D. More Wrong</a></h2>\n<p>Well… this was a tricky question.<br>\nI did thought of the crucial part of solving this question, but I just couldn’t assemble it.<br>\nAnother thing is that im just not that good with D&amp;Q problems.</p>\n<p>The thing I observed quickly is this:</p>\n<p>Denote <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">q(l, r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span></span></span></span> as a query of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[l, r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span>, if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">)</mo><mo>=</mo><mo>=</mo><mi>q</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">q(l, r) == q(l, r - 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span> is bigger than every value in the sub array <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi mathvariant=\"normal\">.</mi><mi>r</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">a[l...r - 1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord\">.</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>.</p>\n<p>I failed to realize that if I know the biggest index in two adjacent sub arrays, I can use this idea to find which one is bigger!</p>\n<p>The whole solution is as follows:</p>\n<p>We divide the arrays into several subarrays of 2 (there will be one with only 1 index if it’s odd).<br>\nFor the subarrays of 2, We each ask a query to determine which is bigger. (the index if theres only 1 index)<br>\nNow we recursively do the following:<br>\nFor each two adjacent subarrays <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>m</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[l, m]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mclose\">]</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>m</mi><mo>+</mo><mn>1</mn><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[m+1, r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span> with this largest index at <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>l</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">l_{max}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>r</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">r_{max}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>, I can ask 2 queries, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo stretchy=\"false\">(</mo><msub><mi>l</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo separator=\"true\">,</mo><msub><mi>r</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">q(l_{max}, r_{max})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo stretchy=\"false\">(</mo><msub><mi>l</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo separator=\"true\">,</mo><msub><mi>r</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">q(l_{max}, r_{max} - 1)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span></span></span></span>, to determine which is bigger. (if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>r</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>=</mo><mo>=</mo><msub><mi>l</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">r_{max} == l_{max} + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.58056em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.84444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> we just ask <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>q</mi><mo stretchy=\"false\">(</mo><msub><mi>l</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo separator=\"true\">,</mo><msub><mi>r</mi><mrow><mi>m</mi><mi>a</mi><mi>x</mi></mrow></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">q(l_{max}, r_{max})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">q</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.01968em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.151392em;\"><span style=\"top:-2.5500000000000003em;margin-left:-0.02778em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">m</span><span class=\"mord mathnormal mtight\">a</span><span class=\"mord mathnormal mtight\">x</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span>)</p>\n<p>And the final biggest index is what we want!</p>\n<p>The formal proof for cost is in the editorial,<br>\nalthough we can also get an extremely rough estimate of the cost: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><munderover><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mrow><mi>l</mi><mi>o</mi><mi>g</mi><mo stretchy=\"false\">(</mo><mn>2000</mn><mo stretchy=\"false\">)</mo></mrow></munderover><mo stretchy=\"false\">(</mo><mfrac><mn>1</mn><msup><mn>2</mn><mrow><mo stretchy=\"false\">(</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo></mrow></msup></mfrac><mo stretchy=\"false\">)</mo><msup><mi>n</mi><mn>2</mn></msup><mo>≈</mo><mn>4</mn><mo>⋅</mo><msup><mi>n</mi><mn>2</mn></msup><mo>&lt;</mo><mn>5</mn><mo>⋅</mo><msup><mi>n</mi><mn>2</mn></msup></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle \\sum_{i = 1}^{log(2000)}(\\frac{1}{2^{(i-1)}})n^2 \\approx 4\\cdot n^2 &lt; 5\\cdot n^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.2386740000000005em;vertical-align:-1.277669em;\"></span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.9610050000000003em;\"><span style=\"top:-1.872331em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.050005em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span><span style=\"top:-4.386005em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\">o</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">g</span><span class=\"mopen mtight\">(</span><span class=\"mord mtight\">2</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">0</span><span class=\"mord mtight\">0</span><span class=\"mclose mtight\">)</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.277669em;\"><span></span></span></span></span></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.32144em;\"><span style=\"top:-2.2960000000000003em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.814em;\"><span style=\"top:-2.989em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mopen mtight\">(</span><span class=\"mord mathnormal mtight\">i</span><span class=\"mbin mtight\">−</span><span class=\"mord mtight\">1</span><span class=\"mclose mtight\">)</span></span></span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.704em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≈</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9032079999999999em;vertical-align:-0.0391em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">&lt;</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">5</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8641079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8641079999999999em;\"><span style=\"top:-3.113em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span></p>\n<p>Code (Note that my implementation is pretty bad, check out the editorial for a concise version!)</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">solve</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r - l == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;? &quot;</span> &lt;&lt; l &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; r &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"type\">int</span> ret;</span><br><span class=\"line\">        cin &gt;&gt; ret;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ret == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> r;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(r - l == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> l;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> maxl = <span class=\"built_in\">solve</span>(l, (l + r) &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"type\">int</span> maxr = <span class=\"built_in\">solve</span>(((l + r) &gt;&gt; <span class=\"number\">1</span>) + <span class=\"number\">1</span>, r);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(maxr - maxl == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        cout &lt;&lt; <span class=\"string\">&quot;? &quot;</span> &lt;&lt; maxl  &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; maxr &lt;&lt; endl;</span><br><span class=\"line\">        <span class=\"type\">int</span> ret;</span><br><span class=\"line\">        cin &gt;&gt; ret;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(ret == <span class=\"number\">1</span>) <span class=\"keyword\">return</span> maxl;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> maxr;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans1;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans2;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;? &quot;</span> &lt;&lt; maxl &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; maxr &lt;&lt; endl;</span><br><span class=\"line\">    cin &gt;&gt; ans1;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;? &quot;</span> &lt;&lt; maxl &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; maxr - <span class=\"number\">1</span> &lt;&lt; endl;</span><br><span class=\"line\">    cin &gt;&gt; ans2;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(ans1 == ans2) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxr;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> maxl;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n"},{"title":"Blog...again?","date":"2023-08-04T07:10:50.000Z","cover":"transparent","_content":"Hello again!\n\nYou may be wondering why I said again?\nThe reason is because I used to have another blog with the same domain, but I didn't update it at all. So I basically redeployed\na new blog in the event of me going to college (UW Madison), Horray!\nI mean, im really not good at documenting my life and stuff like that, because im often too lazy to get up and write stuff.\nI'll try this time though (I promise although I said it last time lol)\nI tried to get pagination working, but I couldn't find where to change the background color, and im just don't know css unfortunately,\nI'll try to get it running sometime!\nI hope to share some coding related stuff or stuff that happened in my daily life, who knows?\n\nTo end this off, Im going to show you my favorite problem in CF when I first started: [1526C2. Potions (Hard Version)](https://codeforces.com/problemset/problem/1526/C2)\nWhen I just started coding, I was stuck at this problem for so long.\nI thought I couldn't solve it because it was 1600 (I was <1000 then),\nBut after hard thinking, I finally solved this problem and I was super proud of myself.\nThe problem has an easy and a hard version with the only difference being $n \\leq 2000$ and $n \\leq 200000$.\nWith $n \\leq 200000$, its apparent that we need to develop an $O(nlogn)$ or better solution.\nWe will traverse from left to right and try to drink as many potions as possible while not letting our health go down to zero.\nLets first identify an easy case: when the potion is positive i.e. drinking it gives you hp.\nIt's obvious that we just drink it, as there are no downsides to greedily drink any positive potions.\nNow the tricky part: When a potion is negative i.e. drinking it deducts hp.\nAn idea one may think of is to greedily drink potions whenever you have the hp, which can be proved wrong with this example:\n\n> 6\n> 4 -4 1 -3 1 -3\n\nWith pure greedy, you would drink 1, 2, 3, 5, in total 4 potions.\nBut you can actually drink 1, 3, 4, 5, 6, in total 5 potions.\n\nA important idea used in this problem is also used similarly in doing LIS (Longest Increasing Subsequence) in $O(nlogn)$:\nWe want to try having as much hp as possible while having the maximum amount of potions drank in any timestep!\nOur first priority is to drink as much as possible, but if we can't, we can maybe still find ways to make our hp higher\nby \"undrinking\" high cost potions we drank before and substitute them with ones that cost lower!\nNow we have a good algorithm to solve this problem:\nWe will traverse from left to right,\nwith each potion, if the potion is positive, we drink it and update hp and our potion count.\nif the potion is negative, if we can drink it we drink it, else we find the highest cost potion we drank before and check whether\nsubstituting it with our current one would increase our hp.\nNow just one last problem to solve: How do we find the highest cost potion we drank before?\nLuckly, there is a data structure called \"priority queue\" that can help us achieve this in $O(logn)$!\nNow we successfully solved a 1600 greedy question with ease! Horray!\nCode (I ommitted my templates):\n\n```cpp\nvoid solve() {\n    int n;\n    cin >> n;\n    int ans = 0;\n    int hp = 0;\n    priority_queue<int, vector<int>, greater<int>> pq;\n    for(int i = 0; i < n; i++) {\n        int val;\n        cin >> val;\n        if(val >= 0) {\n            ans += 1;\n            hp += val;\n        } else {\n            if(hp + val >= 0) {\n                ans += 1;\n                hp += val;\n                pq.push(val);\n            } else if(pq.size() and val > pq.top()){\n                hp += (val - pq.top());\n                pq.pop();\n                pq.push(val);\n            }\n        }\n    }\n    cout << ans << endl;\n    return;\n}\n```\n\nTime Complexity: $O(nlogn)$\n\nPretty nice question right?\n","source":"_posts/Blog-again.md","raw":"---\ntitle: Blog...again?\ndate: 2023-08-04 02:10:50\ntags: [\"Life\", \"CP\"]\ncover: transparent\n---\nHello again!\n\nYou may be wondering why I said again?\nThe reason is because I used to have another blog with the same domain, but I didn't update it at all. So I basically redeployed\na new blog in the event of me going to college (UW Madison), Horray!\nI mean, im really not good at documenting my life and stuff like that, because im often too lazy to get up and write stuff.\nI'll try this time though (I promise although I said it last time lol)\nI tried to get pagination working, but I couldn't find where to change the background color, and im just don't know css unfortunately,\nI'll try to get it running sometime!\nI hope to share some coding related stuff or stuff that happened in my daily life, who knows?\n\nTo end this off, Im going to show you my favorite problem in CF when I first started: [1526C2. Potions (Hard Version)](https://codeforces.com/problemset/problem/1526/C2)\nWhen I just started coding, I was stuck at this problem for so long.\nI thought I couldn't solve it because it was 1600 (I was <1000 then),\nBut after hard thinking, I finally solved this problem and I was super proud of myself.\nThe problem has an easy and a hard version with the only difference being $n \\leq 2000$ and $n \\leq 200000$.\nWith $n \\leq 200000$, its apparent that we need to develop an $O(nlogn)$ or better solution.\nWe will traverse from left to right and try to drink as many potions as possible while not letting our health go down to zero.\nLets first identify an easy case: when the potion is positive i.e. drinking it gives you hp.\nIt's obvious that we just drink it, as there are no downsides to greedily drink any positive potions.\nNow the tricky part: When a potion is negative i.e. drinking it deducts hp.\nAn idea one may think of is to greedily drink potions whenever you have the hp, which can be proved wrong with this example:\n\n> 6\n> 4 -4 1 -3 1 -3\n\nWith pure greedy, you would drink 1, 2, 3, 5, in total 4 potions.\nBut you can actually drink 1, 3, 4, 5, 6, in total 5 potions.\n\nA important idea used in this problem is also used similarly in doing LIS (Longest Increasing Subsequence) in $O(nlogn)$:\nWe want to try having as much hp as possible while having the maximum amount of potions drank in any timestep!\nOur first priority is to drink as much as possible, but if we can't, we can maybe still find ways to make our hp higher\nby \"undrinking\" high cost potions we drank before and substitute them with ones that cost lower!\nNow we have a good algorithm to solve this problem:\nWe will traverse from left to right,\nwith each potion, if the potion is positive, we drink it and update hp and our potion count.\nif the potion is negative, if we can drink it we drink it, else we find the highest cost potion we drank before and check whether\nsubstituting it with our current one would increase our hp.\nNow just one last problem to solve: How do we find the highest cost potion we drank before?\nLuckly, there is a data structure called \"priority queue\" that can help us achieve this in $O(logn)$!\nNow we successfully solved a 1600 greedy question with ease! Horray!\nCode (I ommitted my templates):\n\n```cpp\nvoid solve() {\n    int n;\n    cin >> n;\n    int ans = 0;\n    int hp = 0;\n    priority_queue<int, vector<int>, greater<int>> pq;\n    for(int i = 0; i < n; i++) {\n        int val;\n        cin >> val;\n        if(val >= 0) {\n            ans += 1;\n            hp += val;\n        } else {\n            if(hp + val >= 0) {\n                ans += 1;\n                hp += val;\n                pq.push(val);\n            } else if(pq.size() and val > pq.top()){\n                hp += (val - pq.top());\n                pq.pop();\n                pq.push(val);\n            }\n        }\n    }\n    cout << ans << endl;\n    return;\n}\n```\n\nTime Complexity: $O(nlogn)$\n\nPretty nice question right?\n","slug":"Blog-again","published":1,"updated":"2024-12-26T01:29:58.458Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblh9001ib0u9cskm5tmj","content":"<p>Hello again!</p>\n<p>You may be wondering why I said again?<br>\nThe reason is because I used to have another blog with the same domain, but I didn’t update it at all. So I basically redeployed<br>\na new blog in the event of me going to college (UW Madison), Horray!<br>\nI mean, im really not good at documenting my life and stuff like that, because im often too lazy to get up and write stuff.<br>\nI’ll try this time though (I promise although I said it last time lol)<br>\nI tried to get pagination working, but I couldn’t find where to change the background color, and im just don’t know css unfortunately,<br>\nI’ll try to get it running sometime!<br>\nI hope to share some coding related stuff or stuff that happened in my daily life, who knows?</p>\n<p>To end this off, Im going to show you my favorite problem in CF when I first started: <a href=\"https://codeforces.com/problemset/problem/1526/C2\">1526C2. Potions (Hard Version)</a><br>\nWhen I just started coding, I was stuck at this problem for so long.<br>\nI thought I couldn’t solve it because it was 1600 (I was &lt;1000 then),<br>\nBut after hard thinking, I finally solved this problem and I was super proud of myself.<br>\nThe problem has an easy and a hard version with the only difference being <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>2000</mn></mrow><annotation encoding=\"application/x-tex\">n \\leq 2000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>200000</mn></mrow><annotation encoding=\"application/x-tex\">n \\leq 200000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>.<br>\nWith <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>200000</mn></mrow><annotation encoding=\"application/x-tex\">n \\leq 200000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>, its apparent that we need to develop an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> or better solution.<br>\nWe will traverse from left to right and try to drink as many potions as possible while not letting our health go down to zero.<br>\nLets first identify an easy case: when the potion is positive i.e. drinking it gives you hp.<br>\nIt’s obvious that we just drink it, as there are no downsides to greedily drink any positive potions.<br>\nNow the tricky part: When a potion is negative i.e. drinking it deducts hp.<br>\nAn idea one may think of is to greedily drink potions whenever you have the hp, which can be proved wrong with this example:</p>\n<blockquote>\n<p>6<br>\n4 -4 1 -3 1 -3</p>\n</blockquote>\n<p>With pure greedy, you would drink 1, 2, 3, 5, in total 4 potions.<br>\nBut you can actually drink 1, 3, 4, 5, 6, in total 5 potions.</p>\n<p>A important idea used in this problem is also used similarly in doing LIS (Longest Increasing Subsequence) in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>:<br>\nWe want to try having as much hp as possible while having the maximum amount of potions drank in any timestep!<br>\nOur first priority is to drink as much as possible, but if we can’t, we can maybe still find ways to make our hp higher<br>\nby “undrinking” high cost potions we drank before and substitute them with ones that cost lower!<br>\nNow we have a good algorithm to solve this problem:<br>\nWe will traverse from left to right,<br>\nwith each potion, if the potion is positive, we drink it and update hp and our potion count.<br>\nif the potion is negative, if we can drink it we drink it, else we find the highest cost potion we drank before and check whether<br>\nsubstituting it with our current one would increase our hp.<br>\nNow just one last problem to solve: How do we find the highest cost potion we drank before?<br>\nLuckly, there is a data structure called “priority queue” that can help us achieve this in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>!<br>\nNow we successfully solved a 1600 greedy question with ease! Horray!<br>\nCode (I ommitted my templates):</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> hp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    priority_queue&lt;<span class=\"type\">int</span>, vector&lt;<span class=\"type\">int</span>&gt;, greater&lt;<span class=\"type\">int</span>&gt;&gt; pq;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> val;</span><br><span class=\"line\">        cin &gt;&gt; val;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(val &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ans += <span class=\"number\">1</span>;</span><br><span class=\"line\">            hp += val;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(hp + val &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                ans += <span class=\"number\">1</span>;</span><br><span class=\"line\">                hp += val;</span><br><span class=\"line\">                pq.<span class=\"built_in\">push</span>(val);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pq.<span class=\"built_in\">size</span>() <span class=\"keyword\">and</span> val &gt; pq.<span class=\"built_in\">top</span>())&#123;</span><br><span class=\"line\">                hp += (val - pq.<span class=\"built_in\">top</span>());</span><br><span class=\"line\">                pq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                pq.<span class=\"built_in\">push</span>(val);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>Pretty nice question right?</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Hello again!</p>\n<p>You may be wondering why I said again?<br>\nThe reason is because I used to have another blog with the same domain, but I didn’t update it at all. So I basically redeployed<br>\na new blog in the event of me going to college (UW Madison), Horray!<br>\nI mean, im really not good at documenting my life and stuff like that, because im often too lazy to get up and write stuff.<br>\nI’ll try this time though (I promise although I said it last time lol)<br>\nI tried to get pagination working, but I couldn’t find where to change the background color, and im just don’t know css unfortunately,<br>\nI’ll try to get it running sometime!<br>\nI hope to share some coding related stuff or stuff that happened in my daily life, who knows?</p>\n<p>To end this off, Im going to show you my favorite problem in CF when I first started: <a href=\"https://codeforces.com/problemset/problem/1526/C2\">1526C2. Potions (Hard Version)</a><br>\nWhen I just started coding, I was stuck at this problem for so long.<br>\nI thought I couldn’t solve it because it was 1600 (I was &lt;1000 then),<br>\nBut after hard thinking, I finally solved this problem and I was super proud of myself.<br>\nThe problem has an easy and a hard version with the only difference being <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>2000</mn></mrow><annotation encoding=\"application/x-tex\">n \\leq 2000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span> and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>200000</mn></mrow><annotation encoding=\"application/x-tex\">n \\leq 200000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>.<br>\nWith <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>≤</mo><mn>200000</mn></mrow><annotation encoding=\"application/x-tex\">n \\leq 200000</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7719400000000001em;vertical-align:-0.13597em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span><span class=\"mord\">0</span></span></span></span>, its apparent that we need to develop an <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> or better solution.<br>\nWe will traverse from left to right and try to drink as many potions as possible while not letting our health go down to zero.<br>\nLets first identify an easy case: when the potion is positive i.e. drinking it gives you hp.<br>\nIt’s obvious that we just drink it, as there are no downsides to greedily drink any positive potions.<br>\nNow the tricky part: When a potion is negative i.e. drinking it deducts hp.<br>\nAn idea one may think of is to greedily drink potions whenever you have the hp, which can be proved wrong with this example:</p>\n<blockquote>\n<p>6<br>\n4 -4 1 -3 1 -3</p>\n</blockquote>\n<p>With pure greedy, you would drink 1, 2, 3, 5, in total 4 potions.<br>\nBut you can actually drink 1, 3, 4, 5, 6, in total 5 potions.</p>\n<p>A important idea used in this problem is also used similarly in doing LIS (Longest Increasing Subsequence) in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>:<br>\nWe want to try having as much hp as possible while having the maximum amount of potions drank in any timestep!<br>\nOur first priority is to drink as much as possible, but if we can’t, we can maybe still find ways to make our hp higher<br>\nby “undrinking” high cost potions we drank before and substitute them with ones that cost lower!<br>\nNow we have a good algorithm to solve this problem:<br>\nWe will traverse from left to right,<br>\nwith each potion, if the potion is positive, we drink it and update hp and our potion count.<br>\nif the potion is negative, if we can drink it we drink it, else we find the highest cost potion we drank before and check whether<br>\nsubstituting it with our current one would increase our hp.<br>\nNow just one last problem to solve: How do we find the highest cost potion we drank before?<br>\nLuckly, there is a data structure called “priority queue” that can help us achieve this in <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(logn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span>!<br>\nNow we successfully solved a 1600 greedy question with ease! Horray!<br>\nCode (I ommitted my templates):</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"type\">int</span> ans = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> hp = <span class=\"number\">0</span>;</span><br><span class=\"line\">    priority_queue&lt;<span class=\"type\">int</span>, vector&lt;<span class=\"type\">int</span>&gt;, greater&lt;<span class=\"type\">int</span>&gt;&gt; pq;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> val;</span><br><span class=\"line\">        cin &gt;&gt; val;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(val &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            ans += <span class=\"number\">1</span>;</span><br><span class=\"line\">            hp += val;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(hp + val &gt;= <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                ans += <span class=\"number\">1</span>;</span><br><span class=\"line\">                hp += val;</span><br><span class=\"line\">                pq.<span class=\"built_in\">push</span>(val);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pq.<span class=\"built_in\">size</span>() <span class=\"keyword\">and</span> val &gt; pq.<span class=\"built_in\">top</span>())&#123;</span><br><span class=\"line\">                hp += (val - pq.<span class=\"built_in\">top</span>());</span><br><span class=\"line\">                pq.<span class=\"built_in\">pop</span>();</span><br><span class=\"line\">                pq.<span class=\"built_in\">push</span>(val);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; ans &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(nlogn)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>Pretty nice question right?</p>\n"},{"title":"Nostalgic problem","date":"2023-09-29T01:54:00.000Z","_content":"While I was doing random 1700~2000 problem, I noticed one problem was the problem I did two years ago when I our club was choosing committee members. I was the only one that got full points in this problem!\nNow I revise this problem two years later, it was actually really easy. But 2021 yeedrag tried for nearly 3 days and dozens of attempts to get it accepted!\nThe problem: [1486C2 Guessing the Greatest (hard version)](https://codeforces.com/contest/1486/problem/C2)\nHere is a comparison of the code for the same problem I wrote two years apart:\n2021-05-25 code:\n\n```cpp\nint main(){\n    int n=0;\n    int firstsecond=0;\n    int temp=0;\n    int left=0;\n    int right=0;\n    int mid=0;\n    int a = 0;\n    cin>>n;\n    //ask all;\n    cout<<\"? 1 \"<<n;\n    cout<<endl;\n    cin>>firstsecond;\n    if(firstsecond==1){\n        a=1;\n    }else{\n        cout<<\"? \"<<1<<\" \"<<firstsecond<<endl;\n        cin>>temp;\n        if(temp==firstsecond){\n            a=0;\n        }else{\n            a=1;\n            }\n        }\n    if(!a){\n        left = 1;\n        right = firstsecond-1;\n        while(left!=right){\n            mid = (left + right+1)/2;\n            cout<<\"? \"<<mid<<\" \"<<n;\n            cout<<endl;\n            cin>>temp;\n            if(temp==firstsecond){\n                left = mid;\n            } else {\n                right = mid-1;\n            }\n        }\n        cout<<\"! \"<<left;\n        cout<<endl;\n        return 0;\n    } else {\n        left = firstsecond+1;\n        right = n;\n        while(left!=right){\n            mid = (left + right-1)/2;\n            cout<<\"? \"<<1<<\" \"<<mid;\n            cout<<endl;\n            cin>>temp;\n            if(temp==firstsecond){\n                right = mid;\n            } else {\n                left = mid+1;\n            }\n        }\n        cout<<\"! \"<<left;\n        cout<<endl;\n        return 0;\n    }\n}\n```\n\n2023-09-29 code:\n\n```cpp\nint query(int l, int r) {\n    cout << \"? \" << l << \" \" << r << endl;\n    int ret; \n    cin >> ret;\n    return ret;\n}\nvoid solve() {\n    int n;\n    cin >> n;\n    int second = query(1, n);\n    int l = 1, r = n;\n    int q;\n    if(second == 1) {\n        l = 2;\n        r = n;\n    } else if(second == n) {\n        l = 1;\n        r = n - 1;\n    } else {\n        q = query(1, second);\n        if(q != second) l = second + 1;\n        else r = second - 1;\n    }\n    while(r - l > 1) {\n        int m = (r + l) >> 1;\n        q = query(min(m, second), max(m, second)); \n        if(q != second) {\n            if(r < second) r = m - 1;\n            else l = m + 1;\n        } else {\n            if(r < second) l = m;\n            else r = m;\n        }\n    }\n    if(r < second) {\n        q = (query(r, second) == second) ? r : l;\n    } else {\n        q = (query(second, l) == second) ? l : r;\n    }\n    cout << \"! \" << q << endl;\n    return;\n}\n```\n\nAs you can see, the coding style, indents and whole organization was drastically different, so nostalgic :D\n","source":"_posts/nostalgic-problem.md","raw":"---\ntitle: Nostalgic problem\ndate: 2023-09-28 20:54:00\ntags: [\"CP\"]\n---\nWhile I was doing random 1700~2000 problem, I noticed one problem was the problem I did two years ago when I our club was choosing committee members. I was the only one that got full points in this problem!\nNow I revise this problem two years later, it was actually really easy. But 2021 yeedrag tried for nearly 3 days and dozens of attempts to get it accepted!\nThe problem: [1486C2 Guessing the Greatest (hard version)](https://codeforces.com/contest/1486/problem/C2)\nHere is a comparison of the code for the same problem I wrote two years apart:\n2021-05-25 code:\n\n```cpp\nint main(){\n    int n=0;\n    int firstsecond=0;\n    int temp=0;\n    int left=0;\n    int right=0;\n    int mid=0;\n    int a = 0;\n    cin>>n;\n    //ask all;\n    cout<<\"? 1 \"<<n;\n    cout<<endl;\n    cin>>firstsecond;\n    if(firstsecond==1){\n        a=1;\n    }else{\n        cout<<\"? \"<<1<<\" \"<<firstsecond<<endl;\n        cin>>temp;\n        if(temp==firstsecond){\n            a=0;\n        }else{\n            a=1;\n            }\n        }\n    if(!a){\n        left = 1;\n        right = firstsecond-1;\n        while(left!=right){\n            mid = (left + right+1)/2;\n            cout<<\"? \"<<mid<<\" \"<<n;\n            cout<<endl;\n            cin>>temp;\n            if(temp==firstsecond){\n                left = mid;\n            } else {\n                right = mid-1;\n            }\n        }\n        cout<<\"! \"<<left;\n        cout<<endl;\n        return 0;\n    } else {\n        left = firstsecond+1;\n        right = n;\n        while(left!=right){\n            mid = (left + right-1)/2;\n            cout<<\"? \"<<1<<\" \"<<mid;\n            cout<<endl;\n            cin>>temp;\n            if(temp==firstsecond){\n                right = mid;\n            } else {\n                left = mid+1;\n            }\n        }\n        cout<<\"! \"<<left;\n        cout<<endl;\n        return 0;\n    }\n}\n```\n\n2023-09-29 code:\n\n```cpp\nint query(int l, int r) {\n    cout << \"? \" << l << \" \" << r << endl;\n    int ret; \n    cin >> ret;\n    return ret;\n}\nvoid solve() {\n    int n;\n    cin >> n;\n    int second = query(1, n);\n    int l = 1, r = n;\n    int q;\n    if(second == 1) {\n        l = 2;\n        r = n;\n    } else if(second == n) {\n        l = 1;\n        r = n - 1;\n    } else {\n        q = query(1, second);\n        if(q != second) l = second + 1;\n        else r = second - 1;\n    }\n    while(r - l > 1) {\n        int m = (r + l) >> 1;\n        q = query(min(m, second), max(m, second)); \n        if(q != second) {\n            if(r < second) r = m - 1;\n            else l = m + 1;\n        } else {\n            if(r < second) l = m;\n            else r = m;\n        }\n    }\n    if(r < second) {\n        q = (query(r, second) == second) ? r : l;\n    } else {\n        q = (query(second, l) == second) ? l : r;\n    }\n    cout << \"! \" << q << endl;\n    return;\n}\n```\n\nAs you can see, the coding style, indents and whole organization was drastically different, so nostalgic :D\n","slug":"nostalgic-problem","published":1,"updated":"2024-12-26T01:29:58.507Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblhb001kb0u9apo3clf9","content":"<p>While I was doing random 1700~2000 problem, I noticed one problem was the problem I did two years ago when I our club was choosing committee members. I was the only one that got full points in this problem!<br>\nNow I revise this problem two years later, it was actually really easy. But 2021 yeedrag tried for nearly 3 days and dozens of attempts to get it accepted!<br>\nThe problem: <a href=\"https://codeforces.com/contest/1486/problem/C2\">1486C2 Guessing the Greatest (hard version)</a><br>\nHere is a comparison of the code for the same problem I wrote two years apart:<br>\n2021-05-25 code:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> firstsecond=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> left=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> right=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"comment\">//ask all;</span></span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;? 1 &quot;</span>&lt;&lt;n;</span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">    cin&gt;&gt;firstsecond;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(firstsecond==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        a=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;? &quot;</span>&lt;&lt;<span class=\"number\">1</span>&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;firstsecond&lt;&lt;endl;</span><br><span class=\"line\">        cin&gt;&gt;temp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp==firstsecond)&#123;</span><br><span class=\"line\">            a=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            a=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!a)&#123;</span><br><span class=\"line\">        left = <span class=\"number\">1</span>;</span><br><span class=\"line\">        right = firstsecond<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left!=right)&#123;</span><br><span class=\"line\">            mid = (left + right+<span class=\"number\">1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;? &quot;</span>&lt;&lt;mid&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;n;</span><br><span class=\"line\">            cout&lt;&lt;endl;</span><br><span class=\"line\">            cin&gt;&gt;temp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp==firstsecond)&#123;</span><br><span class=\"line\">                left = mid;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                right = mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;! &quot;</span>&lt;&lt;left;</span><br><span class=\"line\">        cout&lt;&lt;endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        left = firstsecond+<span class=\"number\">1</span>;</span><br><span class=\"line\">        right = n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left!=right)&#123;</span><br><span class=\"line\">            mid = (left + right<span class=\"number\">-1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;? &quot;</span>&lt;&lt;<span class=\"number\">1</span>&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;mid;</span><br><span class=\"line\">            cout&lt;&lt;endl;</span><br><span class=\"line\">            cin&gt;&gt;temp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp==firstsecond)&#123;</span><br><span class=\"line\">                right = mid;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                left = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;! &quot;</span>&lt;&lt;left;</span><br><span class=\"line\">        cout&lt;&lt;endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2023-09-29 code:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;? &quot;</span> &lt;&lt; l &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; r &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret; </span><br><span class=\"line\">    cin &gt;&gt; ret;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"type\">int</span> second = <span class=\"built_in\">query</span>(<span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"number\">1</span>, r = n;</span><br><span class=\"line\">    <span class=\"type\">int</span> q;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(second == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        l = <span class=\"number\">2</span>;</span><br><span class=\"line\">        r = n;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(second == n) &#123;</span><br><span class=\"line\">        l = <span class=\"number\">1</span>;</span><br><span class=\"line\">        r = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        q = <span class=\"built_in\">query</span>(<span class=\"number\">1</span>, second);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q != second) l = second + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> r = second - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r - l &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m = (r + l) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        q = <span class=\"built_in\">query</span>(<span class=\"built_in\">min</span>(m, second), <span class=\"built_in\">max</span>(m, second)); </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q != second) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r &lt; second) r = m - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> l = m + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r &lt; second) l = m;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> r = m;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt; second) &#123;</span><br><span class=\"line\">        q = (<span class=\"built_in\">query</span>(r, second) == second) ? r : l;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        q = (<span class=\"built_in\">query</span>(second, l) == second) ? l : r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;! &quot;</span> &lt;&lt; q &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>As you can see, the coding style, indents and whole organization was drastically different, so nostalgic :D</p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>While I was doing random 1700~2000 problem, I noticed one problem was the problem I did two years ago when I our club was choosing committee members. I was the only one that got full points in this problem!<br>\nNow I revise this problem two years later, it was actually really easy. But 2021 yeedrag tried for nearly 3 days and dozens of attempts to get it accepted!<br>\nThe problem: <a href=\"https://codeforces.com/contest/1486/problem/C2\">1486C2 Guessing the Greatest (hard version)</a><br>\nHere is a comparison of the code for the same problem I wrote two years apart:<br>\n2021-05-25 code:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> firstsecond=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> temp=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> left=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> right=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> mid=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> a = <span class=\"number\">0</span>;</span><br><span class=\"line\">    cin&gt;&gt;n;</span><br><span class=\"line\">    <span class=\"comment\">//ask all;</span></span><br><span class=\"line\">    cout&lt;&lt;<span class=\"string\">&quot;? 1 &quot;</span>&lt;&lt;n;</span><br><span class=\"line\">    cout&lt;&lt;endl;</span><br><span class=\"line\">    cin&gt;&gt;firstsecond;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(firstsecond==<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">        a=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;? &quot;</span>&lt;&lt;<span class=\"number\">1</span>&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;firstsecond&lt;&lt;endl;</span><br><span class=\"line\">        cin&gt;&gt;temp;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(temp==firstsecond)&#123;</span><br><span class=\"line\">            a=<span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            a=<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!a)&#123;</span><br><span class=\"line\">        left = <span class=\"number\">1</span>;</span><br><span class=\"line\">        right = firstsecond<span class=\"number\">-1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left!=right)&#123;</span><br><span class=\"line\">            mid = (left + right+<span class=\"number\">1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;? &quot;</span>&lt;&lt;mid&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;n;</span><br><span class=\"line\">            cout&lt;&lt;endl;</span><br><span class=\"line\">            cin&gt;&gt;temp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp==firstsecond)&#123;</span><br><span class=\"line\">                left = mid;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                right = mid<span class=\"number\">-1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;! &quot;</span>&lt;&lt;left;</span><br><span class=\"line\">        cout&lt;&lt;endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        left = firstsecond+<span class=\"number\">1</span>;</span><br><span class=\"line\">        right = n;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(left!=right)&#123;</span><br><span class=\"line\">            mid = (left + right<span class=\"number\">-1</span>)/<span class=\"number\">2</span>;</span><br><span class=\"line\">            cout&lt;&lt;<span class=\"string\">&quot;? &quot;</span>&lt;&lt;<span class=\"number\">1</span>&lt;&lt;<span class=\"string\">&quot; &quot;</span>&lt;&lt;mid;</span><br><span class=\"line\">            cout&lt;&lt;endl;</span><br><span class=\"line\">            cin&gt;&gt;temp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp==firstsecond)&#123;</span><br><span class=\"line\">                right = mid;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                left = mid+<span class=\"number\">1</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        cout&lt;&lt;<span class=\"string\">&quot;! &quot;</span>&lt;&lt;left;</span><br><span class=\"line\">        cout&lt;&lt;endl;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2023-09-29 code:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">query</span><span class=\"params\">(<span class=\"type\">int</span> l, <span class=\"type\">int</span> r)</span> </span>&#123;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;? &quot;</span> &lt;&lt; l &lt;&lt; <span class=\"string\">&quot; &quot;</span> &lt;&lt; r &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"type\">int</span> ret; </span><br><span class=\"line\">    cin &gt;&gt; ret;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"type\">int</span> second = <span class=\"built_in\">query</span>(<span class=\"number\">1</span>, n);</span><br><span class=\"line\">    <span class=\"type\">int</span> l = <span class=\"number\">1</span>, r = n;</span><br><span class=\"line\">    <span class=\"type\">int</span> q;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(second == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        l = <span class=\"number\">2</span>;</span><br><span class=\"line\">        r = n;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(second == n) &#123;</span><br><span class=\"line\">        l = <span class=\"number\">1</span>;</span><br><span class=\"line\">        r = n - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        q = <span class=\"built_in\">query</span>(<span class=\"number\">1</span>, second);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q != second) l = second + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> r = second - <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(r - l &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> m = (r + l) &gt;&gt; <span class=\"number\">1</span>;</span><br><span class=\"line\">        q = <span class=\"built_in\">query</span>(<span class=\"built_in\">min</span>(m, second), <span class=\"built_in\">max</span>(m, second)); </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(q != second) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r &lt; second) r = m - <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> l = m + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(r &lt; second) l = m;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> r = m;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(r &lt; second) &#123;</span><br><span class=\"line\">        q = (<span class=\"built_in\">query</span>(r, second) == second) ? r : l;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        q = (<span class=\"built_in\">query</span>(second, l) == second) ? l : r;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    cout &lt;&lt; <span class=\"string\">&quot;! &quot;</span> &lt;&lt; q &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>As you can see, the coding style, indents and whole organization was drastically different, so nostalgic :D</p>\n"},{"title":"Reroot DP","date":"2023-10-12T04:03:24.000Z","_content":"\nLast CF contest, I solved A~C really quickly, but got stuck for over an hour on a rerooting dp problem. In this blog, I want to learn how to do reroot dp!\n\n## When to reroot dp?\n\n(Disclaimer: I will refer $u$ as the parent node, and $v, c$ as the child node)\nReroot DP occurs when the problem wants a answer that would require making each node as the root of the tree.\nYou should be able to calculate one of the answers in maybe $O(n)$ time, and is able to transition subtree/outside subtree informations in less than the time to construct them individually with the help of some information gathered during the calculation of the first answer (subtree information, depth...etc).\n\nLets check out a basic problem to understand reroot dp more:\n\n## [LeetCode 834. Sum of Distances in Tree](https://leetcode.com/problems/sum-of-distances-in-tree/description/)\n\nThe problem is basically: For every node $i$, return the sum of depth if $i$ is the root of the tree.\nThe first step for reroot dp problems is to first determine the answer of a root, lets try to find the answer for node $0$.\nThis is quite trivial, we denote $sum[u]$ as the depth sum of subtree $u$, we can maintain $depth[v] = depth[u] + 1$ with $depth[0] = 0$, and $sum[u] = depth[u] + \\sum sum[v]$ with a simple dfs like this:\n\n```cpp\nfunction<void(int, int)> dfs1 = [&](int u, int p) {\n    for(auto v : graph[u]) {\n        if(v != p) {\n            depth[v] = depth[u] + 1;\n            dfs1(v, u);\n            dp[u] += dp[v];\n        }\n    }\n    dp[u] += depth[u];\n};\n```\n\nBut when thinking of how to build the answer for the first problem, you also want to start thinking about what information that you need in the rerooting process that can be maintained in the first dfs.\nIn this problem, we can start thinking of the transition process, then we can know what we want to track in first dfs.\n\n![depthchange](depthroot.png)\n\nThe numbers labeled in red is the depth when $0$ is the root, and green is when $2$ is the root. Notice the nodes inside the yellow circle (nodes that aren't in the subtree of $2$) all increased 1 depth, while the nodes inside the purple circle (nodes that are in the subtree of $2$) all decreased 1 depth.\n\n![depthchange2](depthroot2.png)\n\nAnother example is from $2$ to $3$, where green is the depth when $2$ is the root, and blue is $3$. You can also see the same transition. we can thus determine the dp transition between nodes:\n\nDenote $dp[i]$ as the answer with $i$ as the root, then\n\n$$dp[v] = dp[u] + (n - subtree[v]) - subtree[v] = dp[u] + n - (2 \\cdot subtree[v])$$\n\nWith $dp[0] = sum[0]$. We can do this transition with another dfs.\n\nNotice that we can also precalculate subtree[v] during the first dfs.\n\nCode:\n\n```cpp\nvector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {\n    vector<int> graph[n];\n    for(int i = 0; i < edges.size(); i++) {\n        graph[edges[i][0]].pb(edges[i][1]);\n        graph[edges[i][1]].pb(edges[i][0]);\n    }\n    vector<int> depth(n, 0);\n    vector<int> dp(n, 0);\n    vector<int> subtree(n, 0);\n    function<void(int, int)> dfs1 = [&](int u, int p) {\n        for(auto v : graph[u]) {\n            if(v != p) {\n                depth[v] = depth[u] + 1;\n                dfs1(v, u);\n                dp[u] += dp[v];\n                subtree[u] += subtree[v];\n            }\n        }\n        dp[u] += depth[u];\n        subtree[u] += 1;\n    };\n    dfs1(0, -1);\n    for(int i = 1; i < n; i++) dp[i] = 0;\n    //debug(dp, depth, subtree);\n    function<void(int, int)> dfs2 = [&](int u, int p) {\n        for(auto v : graph[u]) {\n            if(v != p) {\n                dp[v] = dp[u] + (n - subtree[v]) - subtree[v];\n                //    = dp[u] + n - (2 * subtree[v]);\n                dfs2(v, u);\n            }\n        }\n    };\n    dfs2(0, -1);\n    return dp;\n}\n```\n\nTime Complexity: $O(n)$\n\n## [Atcoder Edu DP Contest V - Subtree](https://atcoder.jp/contests/dp/tasks/dp_v)\n\nThis problem is much less trivial than the first one I would say, but lets think about how to get the answer for an initial root.\nWe can let $dp_1[i]$ denote the number of ways to color the subtree satisfying the condition plus no color on everything. The reason we want to include no coloring is to make the $dp_1$ transition much easier, as we can notice that\n$dp_1[u] = 1 + \\prod dp_1[v]$ with $dp[leaf] = 2$ (color it or not).\nWe can obtain the answer for root is $dp_1[root] - 1$ (removing the one where nothing is colored).\n\nNow, lets think of the transition in our second dfs:\n\nDenote $dp_2[i]$ as the number of ways to color the tree after removing $i$s subtree. This may seem pretty sudden, but it makes sense if you fully understood reroot dp (which I didn't so I struggled on this question for a long time)\n\nIn a reroot dp problem, you can treat the whole tree as two components: the subtree of a node $i$, and other parts of the tree. Since when you make $i$ the root instead, all the parts that didn't belong to the subtree will then be inside the subtree (with the original parent node as its child), so if we can maintain the value for this newly added part, we can calculate the answer similar to how we got the first root (as we would have the values for all $i$s child).\n\n$dp_2[v]$ here basically means the $dp_1$ we had, but for node $u$ when $v$ is the root instead.\n\nIn the picture, the red circle is $dp_2[2]$, and the green circle is $dp_1[2]$.\n\n![subtreecomp1](subtreecomp1.png)\n\n![subtreecomp2](subtreecomp2.png)\n\nIn this problem, the answer for node $u$ is obviously just $(\\sum dp_1[v] \\cdot dp_2[u]) = (dp_1[u] - 1) \\cdot dp_2[u]$\n(try to relating it to how we got the answer for root $1$, really helps understanding the concept!)\n\nNow, $dp_2[root] = 1$, how about others?\n\n![subtree3](subtreecomp2.png)\n\n$dp_2[2]$ is cricled in red, and $dp_2[3]$ is circled in green. We can see that $dp[3]$ added the nodes that were in the subtree before, but not in the current subtree, which is all the siblings of 3. We can write out the transision as:\n\n$$\\displaystyle dp_2[v] = dp_2[u] \\cdot (\\sum_{c, c \\neq v} dp_1[c]) + 1 = dp_2[u] \\cdot (\\frac{dp_1[u] - 1}{dp_1[v]}) + 1$$\n(I again, want you to try relating this transition to what we did with $dp_1$)\nWhich unfortunately, the first one would TLE, and we cannot do the second one because of modular division (and $m$ isn't guaranteed to be prime so it's hard to find inverse).\n\nFontunately, we can calculate $\\sum_{c, c \\neq v} dp_1[c]$ by making prefix/suffix products, this way we can avoid the troublesome division, yay! (and we can also calculate it during the first dfs, which is pretty nice!)\n\ncode:\n\n```cpp\nint mabs(int a, int mod) { \n    return (a % mod + mod) % mod;\n}\nint mmul(int a, int b, int mod) {\n    return mabs((a % mod) * (b % mod), mod);\n}\nint madd(int a, int b, int mod) { // a + b\n    return mabs(a % mod + b % mod, mod);\n}\nint mmin(int a, int b, int mod) { // a - b\n    return mabs(a % mod - b % mod, mod);\n}\nint fastpow(int a, int n, int mod) { // calculate a^n % mod\n    if(n == 0) return 1;\n    int half = fastpow(a, n >> 1, mod);\n    if(n & 1) return mmul(mmul(half, half, mod), a, mod);\n    else return mmul(half, half, mod);\n}\nint mdiv(int a, int b, int mod) { // (a / b) % mod\n    return mmul(a, fastpow(b,mod - 2, mod), mod);\n}\nvoid solve() {\n    int n, m;\n    cin >> n >> m;\n    vector<int> graph[n + 1];\n    for(int i = 0; i < n - 1; i++) {\n        int x, y;\n        cin >> x >> y;\n        graph[x].pb(y);\n        graph[y].pb(x);\n    }\n    vector<int> dp1(n + 1, 1);\n    vector<int> prefix[n + 1];\n    vector<int> suffix[n + 1];\n    function<void(int, int)> dfs1 = [&](int u, int p) {\n        if(graph[u].size() == 1 && graph[u][0] == p) { // leaf\n            dp1[u] = 2;\n            return;\n        }\n        prefix[u].pb(1);\n        suffix[u].pb(1);\n        for(auto v : graph[u]) {\n            if(v != p) {\n                dfs1(v, u);\n                dp1[u] = mmul(dp1[u], dp1[v], m); \n                prefix[u].pb(dp1[u]);\n            }\n        }\n        int tmp = 1;\n        for(int i = graph[u].size() - 1; i >= 0; i--) {\n            int v = graph[u][i];\n            if(v != p) {\n                tmp = mmul(tmp, dp1[v], m);\n                suffix[u].pb(tmp);\n            }\n        }\n        prefix[u].pb(1);\n        suffix[u].pb(1);\n        reverse(all(suffix[u]));\n        dp1[u] += 1;\n    };\n    dfs1(1, -1);\n    vector<int> dp2(n + 1, 0);\n    dp2[1] = 1;\n    function<void(int, int)> dfs2 = [&](int u, int p) {\n        bool flg = 0;\n        for(int i = 1; i <= graph[u].size(); i ++) {\n            int v = graph[u][i - 1];\n            if(v != p) {\n                dp2[v] = madd(mmul(dp2[u], mmul(prefix[u][i - 1 - flg], suffix[u][i + 1 - flg], m), m), 1, m);\n                // dp2[v] = (dp2[u] * \\sum dp1[c] (c is u's child && c != v)) + 1\n                dfs2(v, u);\n            } else flg = 1;\n        }\n    };    \n    dfs2(1, -1);\n    for(int i = 1; i <= n; i++) cout << mmul((dp1[i] - 1), dp2[i], m) << endl;\n    return;\n}\n```\n\nTime Complexity: $O(n)$\n\nNote: you can also write the first leetcode problem similar to this one too, let $dp_2[u]$ be the sum outside of the subtree $u$, and $dp$ as the sum of subtree $u$, both with $u$ as root. It's uglier because you need to update $dp$ too here because it changes, but I think writing it like this can make the steps of reroot dp clearer.\n\n```cpp\n// the same as before\ndfs1(0, -1);\nvector<int> dp2(n, 0);\nfunction<void(int, int)> dfs2 = [&](int u, int p) {\n    for(auto v : graph[u]) {\n        if(v != p) {\n            dp[v] -= depth[v] * subtree[v]; \n            dp2[v] = dp2[u] + (dp[u] - dp[v] + (n - (2 * subtree[v])));\n            dfs2(v, u);\n        }\n    }\n};\ndfs2(0, -1);\nvector<int> ans;\nfor(int i = 0; i < n; i++) ans.push_back(dp[i] + dp2[i]);\nreturn ans;\n```\n\nNow, let's actually solve the problem I was stuck in contest.\n\n## [CF 1882D. Tree XOR](https://codeforces.com/contest/1882/problem/D)\n\nLet's first think about how to obtain the answer for the root.\nFrom our root, we can greedily change every child $v$ into the value our root has with $(val[u] ⊕ val[v]) ⊕ subtree[v]$.\nWe also need to remember that the nodes after the child $c$ also changed to $(val[u] ⊕ val[v]) ⊕ val[c]$ when calculating.\nLet's denote the value that we want to apply to the $subtree[u]$ as $xor\\_val[u]$, which $xor\\_val[root]$ is 0.\ncalulating $xor\\_val$ during dfs is quite easy: $xor\\_val[v] = (xor\\_val[u] ⊕ val[v]) ⊕ val[1]$.\nBut there is acutally a pretty nice observation here:\n\n![treexor](treexor.jpg)\n\nThe part circled in yellow is the original value after the operation on node $2$, and the red part is the value after node $4$.\nThe value of every $xor\\_val[v]$ is just $val[u] ⊕ val[v]$!\nThis tells us the value to apply does not change with the root, which makes our lives much easier.\nSo, the first part of dfs should look like this:\n\n```cpp\nfunction<void(int, int)> dfs1 = [&](int u, int p) {\n    for(auto v : graph[u]) {\n        if(v != p) {\n            xor_val[v] = (val[u] ^ val[v]);\n            //xor_val[v] = (xor_val[u] ^ val[v]) ^ val[1];\n            dfs1(v, u);\n            subtree[u] += subtree[v];\n        }\n    }\n    subtree[u] += 1;\n};\n```\n\nand $ans[root] = \\sum_{i = 1}^{n} xor\\_val[i] \\cdot subtree[i]$.\n\nNow, for the rerooting part:\n\n$(xor\\_val[i] \\cdot subtree[i])$ does not change with the root. The only changing ones are the current root ($u$), and the next child ($v$).\n\n$u$ will become the child of $v$, so $xor\\_val[u] = val[v] ⊕ val[u] = xor\\_val[v]$, and the subtree size is just $n - subtree[v]$.\nFor $v$, $(xor\\_val[v] \\cdot subtree[v])$ is just $0$ since it's the new root.\nCombine them together, we have the following transition:\n$$ans[v] = ans[u] + (xor\\_val[v] \\cdot (n - subtree[v])) - (xor\\_val[v] \\cdot subtree[v])$$\nWhich equals\n$$ans[v] = ans[u] + xor\\_val[v] \\cdot (2 \\cdot subtree[v])$$\n\nCode:\n\n```cpp\nvoid solve() {\n    int n;\n    cin >> n;\n    vector<int> val(n + 1, 0);\n    for(int i = 1; i <= n; i++) {\n        cin >> val[i];\n    }\n    vector<int> graph[n + 1];\n    for(int i = 0; i < n - 1; i++) {\n        int x, y;\n        cin >> x >> y;\n        graph[x].pb(y);\n        graph[y].pb(x);\n    }\n    vector<int> dp1(n + 1, 0);\n    vector<int> subtree(n + 1, 0);\n    vector<int> xor_val(n + 1, 0);\n    xor_val[1] = 0;\n    function<void(int, int)> dfs1 = [&](int u, int p) {\n        for(auto v : graph[u]) {\n            if(v != p) {\n                xor_val[v] = (val[u] ^ val[v]);\n                //xor_val[v] = (xor_val[u] ^ val[v]) ^ val[1];\n                dfs1(v, u);\n                subtree[u] += subtree[v];\n            }\n        }\n        subtree[u] += 1;\n    };\n    dfs1(1, -1);\n    vi ans(n + 1);\n    for(int i = 1; i <= n; i++) ans[1] += (xor_val[i] * subtree[i]);\n    function<void(int, int)> dfs2 = [&](int u, int p) {\n        for(auto v : graph[u]) {\n            if(v != p) {\n                ans[v] = ans[u] + xor_val[v] * (n - (2 * subtree[v]));\n                dfs2(v, u);\n            }\n        }\n    };\n    dfs2(1, -1);\n    for(int i = 1; i <= n; i++) cout << ans[i] << \" \";\n    cout << endl;\n    return;\n}\n```\n\nTime Complexity: $O(n)$\n","source":"_posts/Reroot-DP.md","raw":"---\ntitle: Reroot DP\ndate: 2023-10-11 23:03:24\ntags: [\"CP\"]\n---\n\nLast CF contest, I solved A~C really quickly, but got stuck for over an hour on a rerooting dp problem. In this blog, I want to learn how to do reroot dp!\n\n## When to reroot dp?\n\n(Disclaimer: I will refer $u$ as the parent node, and $v, c$ as the child node)\nReroot DP occurs when the problem wants a answer that would require making each node as the root of the tree.\nYou should be able to calculate one of the answers in maybe $O(n)$ time, and is able to transition subtree/outside subtree informations in less than the time to construct them individually with the help of some information gathered during the calculation of the first answer (subtree information, depth...etc).\n\nLets check out a basic problem to understand reroot dp more:\n\n## [LeetCode 834. Sum of Distances in Tree](https://leetcode.com/problems/sum-of-distances-in-tree/description/)\n\nThe problem is basically: For every node $i$, return the sum of depth if $i$ is the root of the tree.\nThe first step for reroot dp problems is to first determine the answer of a root, lets try to find the answer for node $0$.\nThis is quite trivial, we denote $sum[u]$ as the depth sum of subtree $u$, we can maintain $depth[v] = depth[u] + 1$ with $depth[0] = 0$, and $sum[u] = depth[u] + \\sum sum[v]$ with a simple dfs like this:\n\n```cpp\nfunction<void(int, int)> dfs1 = [&](int u, int p) {\n    for(auto v : graph[u]) {\n        if(v != p) {\n            depth[v] = depth[u] + 1;\n            dfs1(v, u);\n            dp[u] += dp[v];\n        }\n    }\n    dp[u] += depth[u];\n};\n```\n\nBut when thinking of how to build the answer for the first problem, you also want to start thinking about what information that you need in the rerooting process that can be maintained in the first dfs.\nIn this problem, we can start thinking of the transition process, then we can know what we want to track in first dfs.\n\n![depthchange](depthroot.png)\n\nThe numbers labeled in red is the depth when $0$ is the root, and green is when $2$ is the root. Notice the nodes inside the yellow circle (nodes that aren't in the subtree of $2$) all increased 1 depth, while the nodes inside the purple circle (nodes that are in the subtree of $2$) all decreased 1 depth.\n\n![depthchange2](depthroot2.png)\n\nAnother example is from $2$ to $3$, where green is the depth when $2$ is the root, and blue is $3$. You can also see the same transition. we can thus determine the dp transition between nodes:\n\nDenote $dp[i]$ as the answer with $i$ as the root, then\n\n$$dp[v] = dp[u] + (n - subtree[v]) - subtree[v] = dp[u] + n - (2 \\cdot subtree[v])$$\n\nWith $dp[0] = sum[0]$. We can do this transition with another dfs.\n\nNotice that we can also precalculate subtree[v] during the first dfs.\n\nCode:\n\n```cpp\nvector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {\n    vector<int> graph[n];\n    for(int i = 0; i < edges.size(); i++) {\n        graph[edges[i][0]].pb(edges[i][1]);\n        graph[edges[i][1]].pb(edges[i][0]);\n    }\n    vector<int> depth(n, 0);\n    vector<int> dp(n, 0);\n    vector<int> subtree(n, 0);\n    function<void(int, int)> dfs1 = [&](int u, int p) {\n        for(auto v : graph[u]) {\n            if(v != p) {\n                depth[v] = depth[u] + 1;\n                dfs1(v, u);\n                dp[u] += dp[v];\n                subtree[u] += subtree[v];\n            }\n        }\n        dp[u] += depth[u];\n        subtree[u] += 1;\n    };\n    dfs1(0, -1);\n    for(int i = 1; i < n; i++) dp[i] = 0;\n    //debug(dp, depth, subtree);\n    function<void(int, int)> dfs2 = [&](int u, int p) {\n        for(auto v : graph[u]) {\n            if(v != p) {\n                dp[v] = dp[u] + (n - subtree[v]) - subtree[v];\n                //    = dp[u] + n - (2 * subtree[v]);\n                dfs2(v, u);\n            }\n        }\n    };\n    dfs2(0, -1);\n    return dp;\n}\n```\n\nTime Complexity: $O(n)$\n\n## [Atcoder Edu DP Contest V - Subtree](https://atcoder.jp/contests/dp/tasks/dp_v)\n\nThis problem is much less trivial than the first one I would say, but lets think about how to get the answer for an initial root.\nWe can let $dp_1[i]$ denote the number of ways to color the subtree satisfying the condition plus no color on everything. The reason we want to include no coloring is to make the $dp_1$ transition much easier, as we can notice that\n$dp_1[u] = 1 + \\prod dp_1[v]$ with $dp[leaf] = 2$ (color it or not).\nWe can obtain the answer for root is $dp_1[root] - 1$ (removing the one where nothing is colored).\n\nNow, lets think of the transition in our second dfs:\n\nDenote $dp_2[i]$ as the number of ways to color the tree after removing $i$s subtree. This may seem pretty sudden, but it makes sense if you fully understood reroot dp (which I didn't so I struggled on this question for a long time)\n\nIn a reroot dp problem, you can treat the whole tree as two components: the subtree of a node $i$, and other parts of the tree. Since when you make $i$ the root instead, all the parts that didn't belong to the subtree will then be inside the subtree (with the original parent node as its child), so if we can maintain the value for this newly added part, we can calculate the answer similar to how we got the first root (as we would have the values for all $i$s child).\n\n$dp_2[v]$ here basically means the $dp_1$ we had, but for node $u$ when $v$ is the root instead.\n\nIn the picture, the red circle is $dp_2[2]$, and the green circle is $dp_1[2]$.\n\n![subtreecomp1](subtreecomp1.png)\n\n![subtreecomp2](subtreecomp2.png)\n\nIn this problem, the answer for node $u$ is obviously just $(\\sum dp_1[v] \\cdot dp_2[u]) = (dp_1[u] - 1) \\cdot dp_2[u]$\n(try to relating it to how we got the answer for root $1$, really helps understanding the concept!)\n\nNow, $dp_2[root] = 1$, how about others?\n\n![subtree3](subtreecomp2.png)\n\n$dp_2[2]$ is cricled in red, and $dp_2[3]$ is circled in green. We can see that $dp[3]$ added the nodes that were in the subtree before, but not in the current subtree, which is all the siblings of 3. We can write out the transision as:\n\n$$\\displaystyle dp_2[v] = dp_2[u] \\cdot (\\sum_{c, c \\neq v} dp_1[c]) + 1 = dp_2[u] \\cdot (\\frac{dp_1[u] - 1}{dp_1[v]}) + 1$$\n(I again, want you to try relating this transition to what we did with $dp_1$)\nWhich unfortunately, the first one would TLE, and we cannot do the second one because of modular division (and $m$ isn't guaranteed to be prime so it's hard to find inverse).\n\nFontunately, we can calculate $\\sum_{c, c \\neq v} dp_1[c]$ by making prefix/suffix products, this way we can avoid the troublesome division, yay! (and we can also calculate it during the first dfs, which is pretty nice!)\n\ncode:\n\n```cpp\nint mabs(int a, int mod) { \n    return (a % mod + mod) % mod;\n}\nint mmul(int a, int b, int mod) {\n    return mabs((a % mod) * (b % mod), mod);\n}\nint madd(int a, int b, int mod) { // a + b\n    return mabs(a % mod + b % mod, mod);\n}\nint mmin(int a, int b, int mod) { // a - b\n    return mabs(a % mod - b % mod, mod);\n}\nint fastpow(int a, int n, int mod) { // calculate a^n % mod\n    if(n == 0) return 1;\n    int half = fastpow(a, n >> 1, mod);\n    if(n & 1) return mmul(mmul(half, half, mod), a, mod);\n    else return mmul(half, half, mod);\n}\nint mdiv(int a, int b, int mod) { // (a / b) % mod\n    return mmul(a, fastpow(b,mod - 2, mod), mod);\n}\nvoid solve() {\n    int n, m;\n    cin >> n >> m;\n    vector<int> graph[n + 1];\n    for(int i = 0; i < n - 1; i++) {\n        int x, y;\n        cin >> x >> y;\n        graph[x].pb(y);\n        graph[y].pb(x);\n    }\n    vector<int> dp1(n + 1, 1);\n    vector<int> prefix[n + 1];\n    vector<int> suffix[n + 1];\n    function<void(int, int)> dfs1 = [&](int u, int p) {\n        if(graph[u].size() == 1 && graph[u][0] == p) { // leaf\n            dp1[u] = 2;\n            return;\n        }\n        prefix[u].pb(1);\n        suffix[u].pb(1);\n        for(auto v : graph[u]) {\n            if(v != p) {\n                dfs1(v, u);\n                dp1[u] = mmul(dp1[u], dp1[v], m); \n                prefix[u].pb(dp1[u]);\n            }\n        }\n        int tmp = 1;\n        for(int i = graph[u].size() - 1; i >= 0; i--) {\n            int v = graph[u][i];\n            if(v != p) {\n                tmp = mmul(tmp, dp1[v], m);\n                suffix[u].pb(tmp);\n            }\n        }\n        prefix[u].pb(1);\n        suffix[u].pb(1);\n        reverse(all(suffix[u]));\n        dp1[u] += 1;\n    };\n    dfs1(1, -1);\n    vector<int> dp2(n + 1, 0);\n    dp2[1] = 1;\n    function<void(int, int)> dfs2 = [&](int u, int p) {\n        bool flg = 0;\n        for(int i = 1; i <= graph[u].size(); i ++) {\n            int v = graph[u][i - 1];\n            if(v != p) {\n                dp2[v] = madd(mmul(dp2[u], mmul(prefix[u][i - 1 - flg], suffix[u][i + 1 - flg], m), m), 1, m);\n                // dp2[v] = (dp2[u] * \\sum dp1[c] (c is u's child && c != v)) + 1\n                dfs2(v, u);\n            } else flg = 1;\n        }\n    };    \n    dfs2(1, -1);\n    for(int i = 1; i <= n; i++) cout << mmul((dp1[i] - 1), dp2[i], m) << endl;\n    return;\n}\n```\n\nTime Complexity: $O(n)$\n\nNote: you can also write the first leetcode problem similar to this one too, let $dp_2[u]$ be the sum outside of the subtree $u$, and $dp$ as the sum of subtree $u$, both with $u$ as root. It's uglier because you need to update $dp$ too here because it changes, but I think writing it like this can make the steps of reroot dp clearer.\n\n```cpp\n// the same as before\ndfs1(0, -1);\nvector<int> dp2(n, 0);\nfunction<void(int, int)> dfs2 = [&](int u, int p) {\n    for(auto v : graph[u]) {\n        if(v != p) {\n            dp[v] -= depth[v] * subtree[v]; \n            dp2[v] = dp2[u] + (dp[u] - dp[v] + (n - (2 * subtree[v])));\n            dfs2(v, u);\n        }\n    }\n};\ndfs2(0, -1);\nvector<int> ans;\nfor(int i = 0; i < n; i++) ans.push_back(dp[i] + dp2[i]);\nreturn ans;\n```\n\nNow, let's actually solve the problem I was stuck in contest.\n\n## [CF 1882D. Tree XOR](https://codeforces.com/contest/1882/problem/D)\n\nLet's first think about how to obtain the answer for the root.\nFrom our root, we can greedily change every child $v$ into the value our root has with $(val[u] ⊕ val[v]) ⊕ subtree[v]$.\nWe also need to remember that the nodes after the child $c$ also changed to $(val[u] ⊕ val[v]) ⊕ val[c]$ when calculating.\nLet's denote the value that we want to apply to the $subtree[u]$ as $xor\\_val[u]$, which $xor\\_val[root]$ is 0.\ncalulating $xor\\_val$ during dfs is quite easy: $xor\\_val[v] = (xor\\_val[u] ⊕ val[v]) ⊕ val[1]$.\nBut there is acutally a pretty nice observation here:\n\n![treexor](treexor.jpg)\n\nThe part circled in yellow is the original value after the operation on node $2$, and the red part is the value after node $4$.\nThe value of every $xor\\_val[v]$ is just $val[u] ⊕ val[v]$!\nThis tells us the value to apply does not change with the root, which makes our lives much easier.\nSo, the first part of dfs should look like this:\n\n```cpp\nfunction<void(int, int)> dfs1 = [&](int u, int p) {\n    for(auto v : graph[u]) {\n        if(v != p) {\n            xor_val[v] = (val[u] ^ val[v]);\n            //xor_val[v] = (xor_val[u] ^ val[v]) ^ val[1];\n            dfs1(v, u);\n            subtree[u] += subtree[v];\n        }\n    }\n    subtree[u] += 1;\n};\n```\n\nand $ans[root] = \\sum_{i = 1}^{n} xor\\_val[i] \\cdot subtree[i]$.\n\nNow, for the rerooting part:\n\n$(xor\\_val[i] \\cdot subtree[i])$ does not change with the root. The only changing ones are the current root ($u$), and the next child ($v$).\n\n$u$ will become the child of $v$, so $xor\\_val[u] = val[v] ⊕ val[u] = xor\\_val[v]$, and the subtree size is just $n - subtree[v]$.\nFor $v$, $(xor\\_val[v] \\cdot subtree[v])$ is just $0$ since it's the new root.\nCombine them together, we have the following transition:\n$$ans[v] = ans[u] + (xor\\_val[v] \\cdot (n - subtree[v])) - (xor\\_val[v] \\cdot subtree[v])$$\nWhich equals\n$$ans[v] = ans[u] + xor\\_val[v] \\cdot (2 \\cdot subtree[v])$$\n\nCode:\n\n```cpp\nvoid solve() {\n    int n;\n    cin >> n;\n    vector<int> val(n + 1, 0);\n    for(int i = 1; i <= n; i++) {\n        cin >> val[i];\n    }\n    vector<int> graph[n + 1];\n    for(int i = 0; i < n - 1; i++) {\n        int x, y;\n        cin >> x >> y;\n        graph[x].pb(y);\n        graph[y].pb(x);\n    }\n    vector<int> dp1(n + 1, 0);\n    vector<int> subtree(n + 1, 0);\n    vector<int> xor_val(n + 1, 0);\n    xor_val[1] = 0;\n    function<void(int, int)> dfs1 = [&](int u, int p) {\n        for(auto v : graph[u]) {\n            if(v != p) {\n                xor_val[v] = (val[u] ^ val[v]);\n                //xor_val[v] = (xor_val[u] ^ val[v]) ^ val[1];\n                dfs1(v, u);\n                subtree[u] += subtree[v];\n            }\n        }\n        subtree[u] += 1;\n    };\n    dfs1(1, -1);\n    vi ans(n + 1);\n    for(int i = 1; i <= n; i++) ans[1] += (xor_val[i] * subtree[i]);\n    function<void(int, int)> dfs2 = [&](int u, int p) {\n        for(auto v : graph[u]) {\n            if(v != p) {\n                ans[v] = ans[u] + xor_val[v] * (n - (2 * subtree[v]));\n                dfs2(v, u);\n            }\n        }\n    };\n    dfs2(1, -1);\n    for(int i = 1; i <= n; i++) cout << ans[i] << \" \";\n    cout << endl;\n    return;\n}\n```\n\nTime Complexity: $O(n)$\n","slug":"Reroot-DP","published":1,"updated":"2024-12-26T01:29:58.500Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cm5dnblhd001mb0u92fbn89an","content":"<p>Last CF contest, I solved A~C really quickly, but got stuck for over an hour on a rerooting dp problem. In this blog, I want to learn how to do reroot dp!</p>\n<h2 id=\"when-to-reroot-dp\">When to reroot dp?</h2>\n<p>(Disclaimer: I will refer <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> as the parent node, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo separator=\"true\">,</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">v, c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> as the child node)<br>\nReroot DP occurs when the problem wants a answer that would require making each node as the root of the tree.<br>\nYou should be able to calculate one of the answers in maybe <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> time, and is able to transition subtree/outside subtree informations in less than the time to construct them individually with the help of some information gathered during the calculation of the first answer (subtree information, depth…etc).</p>\n<p>Lets check out a basic problem to understand reroot dp more:</p>\n<h2 id=\"leetcode-834-sum-of-distances-in-tree\"><a href=\"https://leetcode.com/problems/sum-of-distances-in-tree/description/\">LeetCode 834. Sum of Distances in Tree</a></h2>\n<p>The problem is basically: For every node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, return the sum of depth if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> is the root of the tree.<br>\nThe first step for reroot dp problems is to first determine the answer of a root, lets try to find the answer for node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>.<br>\nThis is quite trivial, we denote <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">sum[u]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span></span></span></span> as the depth sum of subtree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>, we can maintain <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>d</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">depth[v] = depth[u] + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">depth[0] = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>d</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo>∑</mo><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">sum[u] = depth[u] + \\sum sum[v]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span></span></span></span> with a simple dfs like this:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; dfs1 = [&amp;](<span class=\"type\">int</span> u, <span class=\"type\">int</span> p) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : graph[u]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v != p) &#123;</span><br><span class=\"line\">            depth[v] = depth[u] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">dfs1</span>(v, u);</span><br><span class=\"line\">            dp[u] += dp[v];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp[u] += depth[u];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>But when thinking of how to build the answer for the first problem, you also want to start thinking about what information that you need in the rerooting process that can be maintained in the first dfs.<br>\nIn this problem, we can start thinking of the transition process, then we can know what we want to track in first dfs.</p>\n<p><img src=\"depthroot.png\" alt=\"depthchange\"></p>\n<p>The numbers labeled in red is the depth when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> is the root, and green is when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> is the root. Notice the nodes inside the yellow circle (nodes that aren’t in the subtree of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>) all increased 1 depth, while the nodes inside the purple circle (nodes that are in the subtree of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>) all decreased 1 depth.</p>\n<p><img src=\"depthroot2.png\" alt=\"depthchange2\"></p>\n<p>Another example is from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>, where green is the depth when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> is the root, and blue is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>. You can also see the same transition. we can thus determine the dp transition between nodes:</p>\n<p>Denote <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> as the answer with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> as the root, then</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>−</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>n</mi><mo>−</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo>⋅</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dp[v] = dp[u] + (n - subtree[v]) - subtree[v] = dp[u] + n - (2 \\cdot subtree[v])\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>With <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp[0] = sum[0]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span></span></span></span>. We can do this transition with another dfs.</p>\n<p>Notice that we can also precalculate subtree[v] during the first dfs.</p>\n<p>Code:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">sumOfDistancesInTree</span><span class=\"params\">(<span class=\"type\">int</span> n, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; graph[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; edges.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        graph[edges[i][<span class=\"number\">0</span>]].<span class=\"built_in\">pb</span>(edges[i][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        graph[edges[i][<span class=\"number\">1</span>]].<span class=\"built_in\">pb</span>(edges[i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">depth</span><span class=\"params\">(n, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(n, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">subtree</span><span class=\"params\">(n, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; dfs1 = [&amp;](<span class=\"type\">int</span> u, <span class=\"type\">int</span> p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : graph[u]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v != p) &#123;</span><br><span class=\"line\">                depth[v] = depth[u] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"built_in\">dfs1</span>(v, u);</span><br><span class=\"line\">                dp[u] += dp[v];</span><br><span class=\"line\">                subtree[u] += subtree[v];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dp[u] += depth[u];</span><br><span class=\"line\">        subtree[u] += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">dfs1</span>(<span class=\"number\">0</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) dp[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//debug(dp, depth, subtree);</span></span><br><span class=\"line\">    function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; dfs2 = [&amp;](<span class=\"type\">int</span> u, <span class=\"type\">int</span> p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : graph[u]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v != p) &#123;</span><br><span class=\"line\">                dp[v] = dp[u] + (n - subtree[v]) - subtree[v];</span><br><span class=\"line\">                <span class=\"comment\">//    = dp[u] + n - (2 * subtree[v]);</span></span><br><span class=\"line\">                <span class=\"built_in\">dfs2</span>(v, u);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(<span class=\"number\">0</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"atcoder-edu-dp-contest-v-subtree\"><a href=\"https://atcoder.jp/contests/dp/tasks/dp_v\">Atcoder Edu DP Contest V - Subtree</a></h2>\n<p>This problem is much less trivial than the first one I would say, but lets think about how to get the answer for an initial root.<br>\nWe can let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp_1[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> denote the number of ways to color the subtree satisfying the condition plus no color on everything. The reason we want to include no coloring is to make the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">dp_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> transition much easier, as we can notice that<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mn>1</mn><mo>+</mo><mo>∏</mo><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp_1[u] = 1 + \\prod dp_1[v]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>f</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">dp[leaf] = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> (color it or not).<br>\nWe can obtain the answer for root is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">dp_1[root] - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> (removing the one where nothing is colored).</p>\n<p>Now, lets think of the transition in our second dfs:</p>\n<p>Denote <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp_2[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> as the number of ways to color the tree after removing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>s subtree. This may seem pretty sudden, but it makes sense if you fully understood reroot dp (which I didn’t so I struggled on this question for a long time)</p>\n<p>In a reroot dp problem, you can treat the whole tree as two components: the subtree of a node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, and other parts of the tree. Since when you make <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> the root instead, all the parts that didn’t belong to the subtree will then be inside the subtree (with the original parent node as its child), so if we can maintain the value for this newly added part, we can calculate the answer similar to how we got the first root (as we would have the values for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>s child).</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp_2[v]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span></span></span></span> here basically means the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">dp_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> we had, but for node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span> is the root instead.</p>\n<p>In the picture, the red circle is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mn>2</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp_2[2]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mclose\">]</span></span></span></span>, and the green circle is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mn>2</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp_1[2]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mclose\">]</span></span></span></span>.</p>\n<p><img src=\"subtreecomp1.png\" alt=\"subtreecomp1\"></p>\n<p><img src=\"subtreecomp2.png\" alt=\"subtreecomp2\"></p>\n<p>In this problem, the answer for node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> is obviously just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>∑</mo><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>⋅</mo><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>⋅</mo><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">(\\sum dp_1[v] \\cdot dp_2[u]) = (dp_1[u] - 1) \\cdot dp_2[u]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mopen\">(</span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span></span></span></span><br>\n(try to relating it to how we got the answer for root <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, really helps understanding the concept!)</p>\n<p>Now, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">dp_2[root] = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, how about others?</p>\n<p><img src=\"subtreecomp2.png\" alt=\"subtree3\"></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mn>2</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp_2[2]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mclose\">]</span></span></span></span> is cricled in red, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mn>3</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp_2[3]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord\">3</span><span class=\"mclose\">]</span></span></span></span> is circled in green. We can see that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mn>3</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp[3]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord\">3</span><span class=\"mclose\">]</span></span></span></span> added the nodes that were in the subtree before, but not in the current subtree, which is all the siblings of 3. We can write out the transision as:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>⋅</mo><mo stretchy=\"false\">(</mo><munder><mo>∑</mo><mrow><mi>c</mi><mo separator=\"true\">,</mo><mi>c</mi><mo mathvariant=\"normal\">≠</mo><mi>v</mi></mrow></munder><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mi>c</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo>=</mo><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>⋅</mo><mo stretchy=\"false\">(</mo><mfrac><mrow><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mn>1</mn></mrow><mrow><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo></mrow></mfrac><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle dp_2[v] = dp_2[u] \\cdot (\\sum_{c, c \\neq v} dp_1[c]) + 1 = dp_2[u] \\cdot (\\frac{dp_1[u] - 1}{dp_1[v]}) + 1\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.488226em;vertical-align:-1.438221em;\"></span><span class=\"mopen\">(</span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">c</span><span class=\"mrel mtight\"><span class=\"mrel mtight\"><span class=\"mord vbox mtight\"><span class=\"thinbox mtight\"><span class=\"rlap mtight\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel mtight\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel mtight\">=</span></span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.438221em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.363em;vertical-align:-0.936em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span></p>\n<p>(I again, want you to try relating this transition to what we did with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">dp_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>)<br>\nWhich unfortunately, the first one would TLE, and we cannot do the second one because of modular division (and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> isn’t guaranteed to be prime so it’s hard to find inverse).</p>\n<p>Fontunately, we can calculate <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>c</mi><mo separator=\"true\">,</mo><mi>c</mi><mo mathvariant=\"normal\">≠</mo><mi>v</mi></mrow></msub><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mi>c</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{c, c \\neq v} dp_1[c]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.185818em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.18639799999999984em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">c</span><span class=\"mrel mtight\"><span class=\"mrel mtight\"><span class=\"mord vbox mtight\"><span class=\"thinbox mtight\"><span class=\"rlap mtight\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel mtight\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel mtight\">=</span></span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">]</span></span></span></span> by making prefix/suffix products, this way we can avoid the troublesome division, yay! (and we can also calculate it during the first dfs, which is pretty nice!)</p>\n<p>code:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mabs</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> mod)</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a % mod + mod) % mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mmul</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> mod)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mabs</span>((a % mod) * (b % mod), mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">madd</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> mod)</span> </span>&#123; <span class=\"comment\">// a + b</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mabs</span>(a % mod + b % mod, mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mmin</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> mod)</span> </span>&#123; <span class=\"comment\">// a - b</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mabs</span>(a % mod - b % mod, mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">fastpow</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> n, <span class=\"type\">int</span> mod)</span> </span>&#123; <span class=\"comment\">// calculate a^n % mod</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> half = <span class=\"built_in\">fastpow</span>(a, n &gt;&gt; <span class=\"number\">1</span>, mod);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">mmul</span>(<span class=\"built_in\">mmul</span>(half, half, mod), a, mod);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">mmul</span>(half, half, mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mdiv</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> mod)</span> </span>&#123; <span class=\"comment\">// (a / b) % mod</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mmul</span>(a, <span class=\"built_in\">fastpow</span>(b,mod - <span class=\"number\">2</span>, mod), mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; graph[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">        graph[x].<span class=\"built_in\">pb</span>(y);</span><br><span class=\"line\">        graph[y].<span class=\"built_in\">pb</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp1</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; prefix[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; suffix[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">    function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; dfs1 = [&amp;](<span class=\"type\">int</span> u, <span class=\"type\">int</span> p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(graph[u].<span class=\"built_in\">size</span>() == <span class=\"number\">1</span> &amp;&amp; graph[u][<span class=\"number\">0</span>] == p) &#123; <span class=\"comment\">// leaf</span></span><br><span class=\"line\">            dp1[u] = <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        prefix[u].<span class=\"built_in\">pb</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        suffix[u].<span class=\"built_in\">pb</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : graph[u]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v != p) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">dfs1</span>(v, u);</span><br><span class=\"line\">                dp1[u] = <span class=\"built_in\">mmul</span>(dp1[u], dp1[v], m); </span><br><span class=\"line\">                prefix[u].<span class=\"built_in\">pb</span>(dp1[u]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> tmp = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = graph[u].<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> v = graph[u][i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v != p) &#123;</span><br><span class=\"line\">                tmp = <span class=\"built_in\">mmul</span>(tmp, dp1[v], m);</span><br><span class=\"line\">                suffix[u].<span class=\"built_in\">pb</span>(tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        prefix[u].<span class=\"built_in\">pb</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        suffix[u].<span class=\"built_in\">pb</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">reverse</span>(<span class=\"built_in\">all</span>(suffix[u]));</span><br><span class=\"line\">        dp1[u] += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">dfs1</span>(<span class=\"number\">1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp2</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    dp2[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; dfs2 = [&amp;](<span class=\"type\">int</span> u, <span class=\"type\">int</span> p) &#123;</span><br><span class=\"line\">        <span class=\"type\">bool</span> flg = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= graph[u].<span class=\"built_in\">size</span>(); i ++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> v = graph[u][i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v != p) &#123;</span><br><span class=\"line\">                dp2[v] = <span class=\"built_in\">madd</span>(<span class=\"built_in\">mmul</span>(dp2[u], <span class=\"built_in\">mmul</span>(prefix[u][i - <span class=\"number\">1</span> - flg], suffix[u][i + <span class=\"number\">1</span> - flg], m), m), <span class=\"number\">1</span>, m);</span><br><span class=\"line\">                <span class=\"comment\">// dp2[v] = (dp2[u] * \\sum dp1[c] (c is u&#x27;s child &amp;&amp; c != v)) + 1</span></span><br><span class=\"line\">                <span class=\"built_in\">dfs2</span>(v, u);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> flg = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;    </span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(<span class=\"number\">1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) cout &lt;&lt; <span class=\"built_in\">mmul</span>((dp1[i] - <span class=\"number\">1</span>), dp2[i], m) &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>Note: you can also write the first leetcode problem similar to this one too, let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp_2[u]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span></span></span></span> be the sum outside of the subtree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span> as the sum of subtree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>, both with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> as root. It’s uglier because you need to update <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span> too here because it changes, but I think writing it like this can make the steps of reroot dp clearer.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// the same as before</span></span><br><span class=\"line\"><span class=\"built_in\">dfs1</span>(<span class=\"number\">0</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp2</span><span class=\"params\">(n, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; dfs2 = [&amp;](<span class=\"type\">int</span> u, <span class=\"type\">int</span> p) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : graph[u]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v != p) &#123;</span><br><span class=\"line\">            dp[v] -= depth[v] * subtree[v]; </span><br><span class=\"line\">            dp2[v] = dp2[u] + (dp[u] - dp[v] + (n - (<span class=\"number\">2</span> * subtree[v])));</span><br><span class=\"line\">            <span class=\"built_in\">dfs2</span>(v, u);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">dfs2</span>(<span class=\"number\">0</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; ans;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) ans.<span class=\"built_in\">push_back</span>(dp[i] + dp2[i]);</span><br><span class=\"line\"><span class=\"keyword\">return</span> ans;</span><br></pre></td></tr></table></figure>\n<p>Now, let’s actually solve the problem I was stuck in contest.</p>\n<h2 id=\"cf-1882d-tree-xor\"><a href=\"https://codeforces.com/contest/1882/problem/D\">CF 1882D. Tree XOR</a></h2>\n<p>Let’s first think about how to obtain the answer for the root.<br>\nFrom our root, we can greedily change every child <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span> into the value our root has with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>⊕</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>⊕</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">(val[u] ⊕ val[v]) ⊕ subtree[v]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span></span></span></span>.<br>\nWe also need to remember that the nodes after the child <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> also changed to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>⊕</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>⊕</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>c</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">(val[u] ⊕ val[v]) ⊕ val[c]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">]</span></span></span></span> when calculating.<br>\nLet’s denote the value that we want to apply to the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">subtree[u]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">xor\\_val[u]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span></span></span></span>, which <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">xor\\_val[root]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">]</span></span></span></span> is 0.<br>\ncalulating <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">xor\\_val</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00444em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> during dfs is quite easy: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>⊕</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>⊕</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">xor\\_val[v] = (xor\\_val[u] ⊕ val[v]) ⊕ val[1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>.<br>\nBut there is acutally a pretty nice observation here:</p>\n<p><img src=\"treexor.jpg\" alt=\"treexor\"></p>\n<p>The part circled in yellow is the original value after the operation on node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>, and the red part is the value after node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>.<br>\nThe value of every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">xor\\_val[v]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span></span></span></span> is just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>⊕</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">val[u] ⊕ val[v]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span></span></span></span>!<br>\nThis tells us the value to apply does not change with the root, which makes our lives much easier.<br>\nSo, the first part of dfs should look like this:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; dfs1 = [&amp;](<span class=\"type\">int</span> u, <span class=\"type\">int</span> p) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : graph[u]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v != p) &#123;</span><br><span class=\"line\">            xor_val[v] = (val[u] ^ val[v]);</span><br><span class=\"line\">            <span class=\"comment\">//xor_val[v] = (xor_val[u] ^ val[v]) ^ val[1];</span></span><br><span class=\"line\">            <span class=\"built_in\">dfs1</span>(v, u);</span><br><span class=\"line\">            subtree[u] += subtree[v];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    subtree[u] += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">]</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>⋅</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">ans[root] = \\sum_{i = 1}^{n} xor\\_val[i] \\cdot subtree[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.114292em;vertical-align:-0.31em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>.</p>\n<p>Now, for the rerooting part:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>⋅</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(xor\\_val[i] \\cdot subtree[i])</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span></span></span></span> does not change with the root. The only changing ones are the current root (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>), and the next child (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>).</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> will become the child of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>⊕</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">xor\\_val[u] = val[v] ⊕ val[u] = xor\\_val[v]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span></span></span></span>, and the subtree size is just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">n - subtree[v]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span></span></span></span>.<br>\nFor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>⋅</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(xor\\_val[v] \\cdot subtree[v])</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span></span></span></span> is just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> since it’s the new root.<br>\nCombine them together, we have the following transition:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>⋅</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>−</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>⋅</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">ans[v] = ans[u] + (xor\\_val[v] \\cdot (n - subtree[v])) - (xor\\_val[v] \\cdot subtree[v])\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>Which equals</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>⋅</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo>⋅</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">ans[v] = ans[u] + xor\\_val[v] \\cdot (2 \\cdot subtree[v])\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>Code:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">val</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; val[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; graph[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">        graph[x].<span class=\"built_in\">pb</span>(y);</span><br><span class=\"line\">        graph[y].<span class=\"built_in\">pb</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp1</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">subtree</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">xor_val</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    xor_val[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; dfs1 = [&amp;](<span class=\"type\">int</span> u, <span class=\"type\">int</span> p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : graph[u]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v != p) &#123;</span><br><span class=\"line\">                xor_val[v] = (val[u] ^ val[v]);</span><br><span class=\"line\">                <span class=\"comment\">//xor_val[v] = (xor_val[u] ^ val[v]) ^ val[1];</span></span><br><span class=\"line\">                <span class=\"built_in\">dfs1</span>(v, u);</span><br><span class=\"line\">                subtree[u] += subtree[v];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        subtree[u] += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">dfs1</span>(<span class=\"number\">1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"function\">vi <span class=\"title\">ans</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) ans[<span class=\"number\">1</span>] += (xor_val[i] * subtree[i]);</span><br><span class=\"line\">    function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; dfs2 = [&amp;](<span class=\"type\">int</span> u, <span class=\"type\">int</span> p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : graph[u]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v != p) &#123;</span><br><span class=\"line\">                ans[v] = ans[u] + xor_val[v] * (n - (<span class=\"number\">2</span> * subtree[v]));</span><br><span class=\"line\">                <span class=\"built_in\">dfs2</span>(v, u);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(<span class=\"number\">1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) cout &lt;&lt; ans[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n","site":{"data":{}},"cover":"transparent","excerpt":"","more":"<p>Last CF contest, I solved A~C really quickly, but got stuck for over an hour on a rerooting dp problem. In this blog, I want to learn how to do reroot dp!</p>\n<h2 id=\"when-to-reroot-dp\">When to reroot dp?</h2>\n<p>(Disclaimer: I will refer <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> as the parent node, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mo separator=\"true\">,</mo><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">v, c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> as the child node)<br>\nReroot DP occurs when the problem wants a answer that would require making each node as the root of the tree.<br>\nYou should be able to calculate one of the answers in maybe <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span> time, and is able to transition subtree/outside subtree informations in less than the time to construct them individually with the help of some information gathered during the calculation of the first answer (subtree information, depth…etc).</p>\n<p>Lets check out a basic problem to understand reroot dp more:</p>\n<h2 id=\"leetcode-834-sum-of-distances-in-tree\"><a href=\"https://leetcode.com/problems/sum-of-distances-in-tree/description/\">LeetCode 834. Sum of Distances in Tree</a></h2>\n<p>The problem is basically: For every node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, return the sum of depth if <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> is the root of the tree.<br>\nThe first step for reroot dp problems is to first determine the answer of a root, lets try to find the answer for node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>.<br>\nThis is quite trivial, we denote <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">sum[u]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span></span></span></span> as the depth sum of subtree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>, we can maintain <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>d</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">depth[v] = depth[u] + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">depth[0] = 0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>d</mi><mi>e</mi><mi>p</mi><mi>t</mi><mi>h</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo>∑</mo><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">sum[u] = depth[u] + \\sum sum[v]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">p</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\">h</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span></span></span></span> with a simple dfs like this:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; dfs1 = [&amp;](<span class=\"type\">int</span> u, <span class=\"type\">int</span> p) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : graph[u]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v != p) &#123;</span><br><span class=\"line\">            depth[v] = depth[u] + <span class=\"number\">1</span>;</span><br><span class=\"line\">            <span class=\"built_in\">dfs1</span>(v, u);</span><br><span class=\"line\">            dp[u] += dp[v];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    dp[u] += depth[u];</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>But when thinking of how to build the answer for the first problem, you also want to start thinking about what information that you need in the rerooting process that can be maintained in the first dfs.<br>\nIn this problem, we can start thinking of the transition process, then we can know what we want to track in first dfs.</p>\n<p><img src=\"depthroot.png\" alt=\"depthchange\"></p>\n<p>The numbers labeled in red is the depth when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> is the root, and green is when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> is the root. Notice the nodes inside the yellow circle (nodes that aren’t in the subtree of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>) all increased 1 depth, while the nodes inside the purple circle (nodes that are in the subtree of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>) all decreased 1 depth.</p>\n<p><img src=\"depthroot2.png\" alt=\"depthchange2\"></p>\n<p>Another example is from <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>, where green is the depth when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> is the root, and blue is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">3</span></span></span></span>. You can also see the same transition. we can thus determine the dp transition between nodes:</p>\n<p>Denote <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> as the answer with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> as the root, then</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>−</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>n</mi><mo>−</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo>⋅</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">dp[v] = dp[u] + (n - subtree[v]) - subtree[v] = dp[u] + n - (2 \\cdot subtree[v])\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>With <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo><mo>=</mo><mi>s</mi><mi>u</mi><mi>m</mi><mo stretchy=\"false\">[</mo><mn>0</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp[0] = sum[0]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">m</span><span class=\"mopen\">[</span><span class=\"mord\">0</span><span class=\"mclose\">]</span></span></span></span>. We can do this transition with another dfs.</p>\n<p>Notice that we can also precalculate subtree[v] during the first dfs.</p>\n<p>Code:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">sumOfDistancesInTree</span><span class=\"params\">(<span class=\"type\">int</span> n, vector&lt;vector&lt;<span class=\"type\">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; graph[n];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; edges.<span class=\"built_in\">size</span>(); i++) &#123;</span><br><span class=\"line\">        graph[edges[i][<span class=\"number\">0</span>]].<span class=\"built_in\">pb</span>(edges[i][<span class=\"number\">1</span>]);</span><br><span class=\"line\">        graph[edges[i][<span class=\"number\">1</span>]].<span class=\"built_in\">pb</span>(edges[i][<span class=\"number\">0</span>]);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">depth</span><span class=\"params\">(n, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp</span><span class=\"params\">(n, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">subtree</span><span class=\"params\">(n, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; dfs1 = [&amp;](<span class=\"type\">int</span> u, <span class=\"type\">int</span> p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : graph[u]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v != p) &#123;</span><br><span class=\"line\">                depth[v] = depth[u] + <span class=\"number\">1</span>;</span><br><span class=\"line\">                <span class=\"built_in\">dfs1</span>(v, u);</span><br><span class=\"line\">                dp[u] += dp[v];</span><br><span class=\"line\">                subtree[u] += subtree[v];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dp[u] += depth[u];</span><br><span class=\"line\">        subtree[u] += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">dfs1</span>(<span class=\"number\">0</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt; n; i++) dp[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">//debug(dp, depth, subtree);</span></span><br><span class=\"line\">    function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; dfs2 = [&amp;](<span class=\"type\">int</span> u, <span class=\"type\">int</span> p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : graph[u]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v != p) &#123;</span><br><span class=\"line\">                dp[v] = dp[u] + (n - subtree[v]) - subtree[v];</span><br><span class=\"line\">                <span class=\"comment\">//    = dp[u] + n - (2 * subtree[v]);</span></span><br><span class=\"line\">                <span class=\"built_in\">dfs2</span>(v, u);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(<span class=\"number\">0</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> dp;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<h2 id=\"atcoder-edu-dp-contest-v-subtree\"><a href=\"https://atcoder.jp/contests/dp/tasks/dp_v\">Atcoder Edu DP Contest V - Subtree</a></h2>\n<p>This problem is much less trivial than the first one I would say, but lets think about how to get the answer for an initial root.<br>\nWe can let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp_1[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> denote the number of ways to color the subtree satisfying the condition plus no color on everything. The reason we want to include no coloring is to make the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">dp_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> transition much easier, as we can notice that<br>\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mn>1</mn><mo>+</mo><mo>∏</mo><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp_1[u] = 1 + \\prod dp_1[v]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∏</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span></span></span></span> with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mi>l</mi><mi>e</mi><mi>a</mi><mi>f</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">dp[leaf] = 2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span> (color it or not).<br>\nWe can obtain the answer for root is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">dp_1[root] - 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span> (removing the one where nothing is colored).</p>\n<p>Now, lets think of the transition in our second dfs:</p>\n<p>Denote <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp_2[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span> as the number of ways to color the tree after removing <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>s subtree. This may seem pretty sudden, but it makes sense if you fully understood reroot dp (which I didn’t so I struggled on this question for a long time)</p>\n<p>In a reroot dp problem, you can treat the whole tree as two components: the subtree of a node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>, and other parts of the tree. Since when you make <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span> the root instead, all the parts that didn’t belong to the subtree will then be inside the subtree (with the original parent node as its child), so if we can maintain the value for this newly added part, we can calculate the answer similar to how we got the first root (as we would have the values for all <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>i</mi></mrow><annotation encoding=\"application/x-tex\">i</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.65952em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">i</span></span></span></span>s child).</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp_2[v]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span></span></span></span> here basically means the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">dp_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span> we had, but for node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> when <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span> is the root instead.</p>\n<p>In the picture, the red circle is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mn>2</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp_2[2]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mclose\">]</span></span></span></span>, and the green circle is <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mn>2</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp_1[2]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mclose\">]</span></span></span></span>.</p>\n<p><img src=\"subtreecomp1.png\" alt=\"subtreecomp1\"></p>\n<p><img src=\"subtreecomp2.png\" alt=\"subtreecomp2\"></p>\n<p>In this problem, the answer for node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> is obviously just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mo>∑</mo><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>⋅</mo><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mn>1</mn><mo stretchy=\"false\">)</mo><mo>⋅</mo><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">(\\sum dp_1[v] \\cdot dp_2[u]) = (dp_1[u] - 1) \\cdot dp_2[u]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00001em;vertical-align:-0.25001em;\"></span><span class=\"mopen\">(</span><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">1</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span></span></span></span><br>\n(try to relating it to how we got the answer for root <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, really helps understanding the concept!)</p>\n<p>Now, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">dp_2[root] = 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span>, how about others?</p>\n<p><img src=\"subtreecomp2.png\" alt=\"subtree3\"></p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mn>2</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp_2[2]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord\">2</span><span class=\"mclose\">]</span></span></span></span> is cricled in red, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mn>3</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp_2[3]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord\">3</span><span class=\"mclose\">]</span></span></span></span> is circled in green. We can see that <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi><mo stretchy=\"false\">[</mo><mn>3</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp[3]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span><span class=\"mopen\">[</span><span class=\"mord\">3</span><span class=\"mclose\">]</span></span></span></span> added the nodes that were in the subtree before, but not in the current subtree, which is all the siblings of 3. We can write out the transision as:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>⋅</mo><mo stretchy=\"false\">(</mo><munder><mo>∑</mo><mrow><mi>c</mi><mo separator=\"true\">,</mo><mi>c</mi><mo mathvariant=\"normal\">≠</mo><mi>v</mi></mrow></munder><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mi>c</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn><mo>=</mo><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>⋅</mo><mo stretchy=\"false\">(</mo><mfrac><mrow><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>−</mo><mn>1</mn></mrow><mrow><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo></mrow></mfrac><mo stretchy=\"false\">)</mo><mo>+</mo><mn>1</mn></mstyle></mrow><annotation encoding=\"application/x-tex\">\\displaystyle dp_2[v] = dp_2[u] \\cdot (\\sum_{c, c \\neq v} dp_1[c]) + 1 = dp_2[u] \\cdot (\\frac{dp_1[u] - 1}{dp_1[v]}) + 1\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.488226em;vertical-align:-1.438221em;\"></span><span class=\"mopen\">(</span><span class=\"mop op-limits\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.050005em;\"><span style=\"top:-1.8478869999999998em;margin-left:0em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">c</span><span class=\"mrel mtight\"><span class=\"mrel mtight\"><span class=\"mord vbox mtight\"><span class=\"thinbox mtight\"><span class=\"rlap mtight\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel mtight\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel mtight\">=</span></span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span><span style=\"top:-3.0500049999999996em;\"><span class=\"pstrut\" style=\"height:3.05em;\"></span><span><span class=\"mop op-symbol large-op\">∑</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.438221em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.363em;vertical-align:-0.936em;\"></span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.427em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span></span></span></span></span></p>\n<p>(I again, want you to try relating this transition to what we did with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub></mrow><annotation encoding=\"application/x-tex\">dp_1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span>)<br>\nWhich unfortunately, the first one would TLE, and we cannot do the second one because of modular division (and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span> isn’t guaranteed to be prime so it’s hard to find inverse).</p>\n<p>Fontunately, we can calculate <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mo>∑</mo><mrow><mi>c</mi><mo separator=\"true\">,</mo><mi>c</mi><mo mathvariant=\"normal\">≠</mo><mi>v</mi></mrow></msub><mi>d</mi><msub><mi>p</mi><mn>1</mn></msub><mo stretchy=\"false\">[</mo><mi>c</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">\\sum_{c, c \\neq v} dp_1[c]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.185818em;vertical-align:-0.43581800000000004em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.18639799999999984em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"mpunct mtight\">,</span><span class=\"mord mathnormal mtight\">c</span><span class=\"mrel mtight\"><span class=\"mrel mtight\"><span class=\"mord vbox mtight\"><span class=\"thinbox mtight\"><span class=\"rlap mtight\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"inner\"><span class=\"mrel mtight\"></span></span><span class=\"fix\"></span></span></span></span></span><span class=\"mrel mtight\">=</span></span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.43581800000000004em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">]</span></span></span></span> by making prefix/suffix products, this way we can avoid the troublesome division, yay! (and we can also calculate it during the first dfs, which is pretty nice!)</p>\n<p>code:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mabs</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> mod)</span> </span>&#123; </span><br><span class=\"line\">    <span class=\"keyword\">return</span> (a % mod + mod) % mod;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mmul</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> mod)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mabs</span>((a % mod) * (b % mod), mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">madd</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> mod)</span> </span>&#123; <span class=\"comment\">// a + b</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mabs</span>(a % mod + b % mod, mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mmin</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> mod)</span> </span>&#123; <span class=\"comment\">// a - b</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mabs</span>(a % mod - b % mod, mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">fastpow</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> n, <span class=\"type\">int</span> mod)</span> </span>&#123; <span class=\"comment\">// calculate a^n % mod</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n == <span class=\"number\">0</span>) <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"type\">int</span> half = <span class=\"built_in\">fastpow</span>(a, n &gt;&gt; <span class=\"number\">1</span>, mod);</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(n &amp; <span class=\"number\">1</span>) <span class=\"keyword\">return</span> <span class=\"built_in\">mmul</span>(<span class=\"built_in\">mmul</span>(half, half, mod), a, mod);</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">return</span> <span class=\"built_in\">mmul</span>(half, half, mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">int</span> <span class=\"title\">mdiv</span><span class=\"params\">(<span class=\"type\">int</span> a, <span class=\"type\">int</span> b, <span class=\"type\">int</span> mod)</span> </span>&#123; <span class=\"comment\">// (a / b) % mod</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">mmul</span>(a, <span class=\"built_in\">fastpow</span>(b,mod - <span class=\"number\">2</span>, mod), mod);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n, m;</span><br><span class=\"line\">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; graph[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">        graph[x].<span class=\"built_in\">pb</span>(y);</span><br><span class=\"line\">        graph[y].<span class=\"built_in\">pb</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp1</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; prefix[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; suffix[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">    function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; dfs1 = [&amp;](<span class=\"type\">int</span> u, <span class=\"type\">int</span> p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(graph[u].<span class=\"built_in\">size</span>() == <span class=\"number\">1</span> &amp;&amp; graph[u][<span class=\"number\">0</span>] == p) &#123; <span class=\"comment\">// leaf</span></span><br><span class=\"line\">            dp1[u] = <span class=\"number\">2</span>;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        prefix[u].<span class=\"built_in\">pb</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        suffix[u].<span class=\"built_in\">pb</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : graph[u]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v != p) &#123;</span><br><span class=\"line\">                <span class=\"built_in\">dfs1</span>(v, u);</span><br><span class=\"line\">                dp1[u] = <span class=\"built_in\">mmul</span>(dp1[u], dp1[v], m); </span><br><span class=\"line\">                prefix[u].<span class=\"built_in\">pb</span>(dp1[u]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"type\">int</span> tmp = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = graph[u].<span class=\"built_in\">size</span>() - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> v = graph[u][i];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v != p) &#123;</span><br><span class=\"line\">                tmp = <span class=\"built_in\">mmul</span>(tmp, dp1[v], m);</span><br><span class=\"line\">                suffix[u].<span class=\"built_in\">pb</span>(tmp);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        prefix[u].<span class=\"built_in\">pb</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        suffix[u].<span class=\"built_in\">pb</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"built_in\">reverse</span>(<span class=\"built_in\">all</span>(suffix[u]));</span><br><span class=\"line\">        dp1[u] += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">dfs1</span>(<span class=\"number\">1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp2</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    dp2[<span class=\"number\">1</span>] = <span class=\"number\">1</span>;</span><br><span class=\"line\">    function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; dfs2 = [&amp;](<span class=\"type\">int</span> u, <span class=\"type\">int</span> p) &#123;</span><br><span class=\"line\">        <span class=\"type\">bool</span> flg = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= graph[u].<span class=\"built_in\">size</span>(); i ++) &#123;</span><br><span class=\"line\">            <span class=\"type\">int</span> v = graph[u][i - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v != p) &#123;</span><br><span class=\"line\">                dp2[v] = <span class=\"built_in\">madd</span>(<span class=\"built_in\">mmul</span>(dp2[u], <span class=\"built_in\">mmul</span>(prefix[u][i - <span class=\"number\">1</span> - flg], suffix[u][i + <span class=\"number\">1</span> - flg], m), m), <span class=\"number\">1</span>, m);</span><br><span class=\"line\">                <span class=\"comment\">// dp2[v] = (dp2[u] * \\sum dp1[c] (c is u&#x27;s child &amp;&amp; c != v)) + 1</span></span><br><span class=\"line\">                <span class=\"built_in\">dfs2</span>(v, u);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> flg = <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;    </span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(<span class=\"number\">1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) cout &lt;&lt; <span class=\"built_in\">mmul</span>((dp1[i] - <span class=\"number\">1</span>), dp2[i], m) &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n<p>Note: you can also write the first leetcode problem similar to this one too, let <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><msub><mi>p</mi><mn>2</mn></msub><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">dp_2[u]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.30110799999999993em;\"><span style=\"top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span></span></span></span> be the sum outside of the subtree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>, and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span> as the sum of subtree <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>, both with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> as root. It’s uglier because you need to update <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>d</mi><mi>p</mi></mrow><annotation encoding=\"application/x-tex\">dp</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8888799999999999em;vertical-align:-0.19444em;\"></span><span class=\"mord mathnormal\">d</span><span class=\"mord mathnormal\">p</span></span></span></span> too here because it changes, but I think writing it like this can make the steps of reroot dp clearer.</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// the same as before</span></span><br><span class=\"line\"><span class=\"built_in\">dfs1</span>(<span class=\"number\">0</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\"><span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp2</span><span class=\"params\">(n, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; dfs2 = [&amp;](<span class=\"type\">int</span> u, <span class=\"type\">int</span> p) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : graph[u]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v != p) &#123;</span><br><span class=\"line\">            dp[v] -= depth[v] * subtree[v]; </span><br><span class=\"line\">            dp2[v] = dp2[u] + (dp[u] - dp[v] + (n - (<span class=\"number\">2</span> * subtree[v])));</span><br><span class=\"line\">            <span class=\"built_in\">dfs2</span>(v, u);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">dfs2</span>(<span class=\"number\">0</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">vector&lt;<span class=\"type\">int</span>&gt; ans;</span><br><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n; i++) ans.<span class=\"built_in\">push_back</span>(dp[i] + dp2[i]);</span><br><span class=\"line\"><span class=\"keyword\">return</span> ans;</span><br></pre></td></tr></table></figure>\n<p>Now, let’s actually solve the problem I was stuck in contest.</p>\n<h2 id=\"cf-1882d-tree-xor\"><a href=\"https://codeforces.com/contest/1882/problem/D\">CF 1882D. Tree XOR</a></h2>\n<p>Let’s first think about how to obtain the answer for the root.<br>\nFrom our root, we can greedily change every child <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span> into the value our root has with <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>⊕</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>⊕</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">(val[u] ⊕ val[v]) ⊕ subtree[v]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span></span></span></span>.<br>\nWe also need to remember that the nodes after the child <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>c</mi></mrow><annotation encoding=\"application/x-tex\">c</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">c</span></span></span></span> also changed to <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>⊕</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>⊕</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>c</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">(val[u] ⊕ val[v]) ⊕ val[c]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">c</span><span class=\"mclose\">]</span></span></span></span> when calculating.<br>\nLet’s denote the value that we want to apply to the <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">subtree[u]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span></span></span></span> as <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">xor\\_val[u]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span></span></span></span>, which <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">xor\\_val[root]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">]</span></span></span></span> is 0.<br>\ncalulating <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">xor\\_val</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.00444em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span> during dfs is quite easy: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>⊕</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo>⊕</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mn>1</mn><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">xor\\_val[v] = (xor\\_val[u] ⊕ val[v]) ⊕ val[1]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord\">1</span><span class=\"mclose\">]</span></span></span></span>.<br>\nBut there is acutally a pretty nice observation here:</p>\n<p><img src=\"treexor.jpg\" alt=\"treexor\"></p>\n<p>The part circled in yellow is the original value after the operation on node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">2</span></span></span></span>, and the red part is the value after node <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn></mrow><annotation encoding=\"application/x-tex\">4</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">4</span></span></span></span>.<br>\nThe value of every <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">xor\\_val[v]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span></span></span></span> is just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>⊕</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">val[u] ⊕ val[v]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span></span></span></span>!<br>\nThis tells us the value to apply does not change with the root, which makes our lives much easier.<br>\nSo, the first part of dfs should look like this:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; dfs1 = [&amp;](<span class=\"type\">int</span> u, <span class=\"type\">int</span> p) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : graph[u]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(v != p) &#123;</span><br><span class=\"line\">            xor_val[v] = (val[u] ^ val[v]);</span><br><span class=\"line\">            <span class=\"comment\">//xor_val[v] = (xor_val[u] ^ val[v]) ^ val[1];</span></span><br><span class=\"line\">            <span class=\"built_in\">dfs1</span>(v, u);</span><br><span class=\"line\">            subtree[u] += subtree[v];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    subtree[u] += <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>and <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mo stretchy=\"false\">]</mo><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>⋅</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">ans[root] = \\sum_{i = 1}^{n} xor\\_val[i] \\cdot subtree[i]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\">t</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.114292em;vertical-align:-0.31em;\"></span><span class=\"mop\"><span class=\"mop op-symbol small-op\" style=\"position:relative;top:-0.0000050000000000050004em;\">∑</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.804292em;\"><span style=\"top:-2.40029em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.2029em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.29971000000000003em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.16666666666666666em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span></span></span></span>.</p>\n<p>Now, for the rerooting part:</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo>⋅</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>i</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(xor\\_val[i] \\cdot subtree[i])</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">i</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span></span></span></span> does not change with the root. The only changing ones are the current root (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span>), and the next child (<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>).</p>\n<p><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span> will become the child of <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>, so <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>⊕</mo><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">xor\\_val[u] = val[v] ⊕ val[u] = xor\\_val[v]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⊕</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span></span></span></span>, and the subtree size is just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo>−</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">n - subtree[v]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span></span></span></span>.<br>\nFor <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">(</mo><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>⋅</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">(xor\\_val[v] \\cdot subtree[v])</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span></span></span></span> is just <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span></span></span></span> since it’s the new root.<br>\nCombine them together, we have the following transition:</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>⋅</mo><mo stretchy=\"false\">(</mo><mi>n</mi><mo>−</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo><mo stretchy=\"false\">)</mo><mo>−</mo><mo stretchy=\"false\">(</mo><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>⋅</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">ans[v] = ans[u] + (xor\\_val[v] \\cdot (n - subtree[v])) - (xor\\_val[v] \\cdot subtree[v])\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>Which equals</p>\n<p><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>=</mo><mi>a</mi><mi>n</mi><mi>s</mi><mo stretchy=\"false\">[</mo><mi>u</mi><mo stretchy=\"false\">]</mo><mo>+</mo><mi>x</mi><mi>o</mi><mi>r</mi><mi mathvariant=\"normal\">_</mi><mi>v</mi><mi>a</mi><mi>l</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo>⋅</mo><mo stretchy=\"false\">(</mo><mn>2</mn><mo>⋅</mo><mi>s</mi><mi>u</mi><mi>b</mi><mi>t</mi><mi>r</mi><mi>e</mi><mi>e</mi><mo stretchy=\"false\">[</mo><mi>v</mi><mo stretchy=\"false\">]</mo><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">ans[v] = ans[u] + xor\\_val[v] \\cdot (2 \\cdot subtree[v])\n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\">n</span><span class=\"mord mathnormal\">s</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\">u</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.06em;vertical-align:-0.31em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mord mathnormal\">o</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord\" style=\"margin-right:0.02778em;\">_</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mord mathnormal\">a</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">⋅</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">s</span><span class=\"mord mathnormal\">u</span><span class=\"mord mathnormal\">b</span><span class=\"mord mathnormal\">t</span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mord mathnormal\">e</span><span class=\"mord mathnormal\">e</span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span><span class=\"mclose\">]</span><span class=\"mclose\">)</span></span></span></span></span></p>\n<p>Code:</p>\n<figure class=\"highlight cpp\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"type\">void</span> <span class=\"title\">solve</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"type\">int</span> n;</span><br><span class=\"line\">    cin &gt;&gt; n;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">val</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) &#123;</span><br><span class=\"line\">        cin &gt;&gt; val[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    vector&lt;<span class=\"type\">int</span>&gt; graph[n + <span class=\"number\">1</span>];</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">0</span>; i &lt; n - <span class=\"number\">1</span>; i++) &#123;</span><br><span class=\"line\">        <span class=\"type\">int</span> x, y;</span><br><span class=\"line\">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class=\"line\">        graph[x].<span class=\"built_in\">pb</span>(y);</span><br><span class=\"line\">        graph[y].<span class=\"built_in\">pb</span>(x);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">dp1</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">subtree</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"function\">vector&lt;<span class=\"type\">int</span>&gt; <span class=\"title\">xor_val</span><span class=\"params\">(n + <span class=\"number\">1</span>, <span class=\"number\">0</span>)</span></span>;</span><br><span class=\"line\">    xor_val[<span class=\"number\">1</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">    function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; dfs1 = [&amp;](<span class=\"type\">int</span> u, <span class=\"type\">int</span> p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : graph[u]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v != p) &#123;</span><br><span class=\"line\">                xor_val[v] = (val[u] ^ val[v]);</span><br><span class=\"line\">                <span class=\"comment\">//xor_val[v] = (xor_val[u] ^ val[v]) ^ val[1];</span></span><br><span class=\"line\">                <span class=\"built_in\">dfs1</span>(v, u);</span><br><span class=\"line\">                subtree[u] += subtree[v];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        subtree[u] += <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">dfs1</span>(<span class=\"number\">1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"function\">vi <span class=\"title\">ans</span><span class=\"params\">(n + <span class=\"number\">1</span>)</span></span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) ans[<span class=\"number\">1</span>] += (xor_val[i] * subtree[i]);</span><br><span class=\"line\">    function&lt;<span class=\"type\">void</span>(<span class=\"type\">int</span>, <span class=\"type\">int</span>)&gt; dfs2 = [&amp;](<span class=\"type\">int</span> u, <span class=\"type\">int</span> p) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">auto</span> v : graph[u]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(v != p) &#123;</span><br><span class=\"line\">                ans[v] = ans[u] + xor_val[v] * (n - (<span class=\"number\">2</span> * subtree[v]));</span><br><span class=\"line\">                <span class=\"built_in\">dfs2</span>(v, u);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">dfs2</span>(<span class=\"number\">1</span>, <span class=\"number\">-1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"type\">int</span> i = <span class=\"number\">1</span>; i &lt;= n; i++) cout &lt;&lt; ans[i] &lt;&lt; <span class=\"string\">&quot; &quot;</span>;</span><br><span class=\"line\">    cout &lt;&lt; endl;</span><br><span class=\"line\">    <span class=\"keyword\">return</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>Time Complexity: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></p>\n"}],"PostAsset":[{"_id":"source/_posts/2024-Summer-REU-experience/1606.05908v3.pdf","post":"cm5dnblgk0001b0u9g8y5e4gm","slug":"1606.05908v3.pdf","modified":1,"renderable":1},{"_id":"source/_posts/2024-Summer-REU-experience/burger.jpg","post":"cm5dnblgk0001b0u9g8y5e4gm","slug":"burger.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2024-Summer-REU-experience/food.jpg","post":"cm5dnblgk0001b0u9g8y5e4gm","slug":"food.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2024-Summer-REU-experience/HPC.jpg","post":"cm5dnblgk0001b0u9g8y5e4gm","slug":"HPC.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2024-Summer-REU-experience/IMG_20240602_130433.jpg","post":"cm5dnblgk0001b0u9g8y5e4gm","slug":"IMG_20240602_130433.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2024-Summer-REU-experience/IMG_20240602_182202.jpg","post":"cm5dnblgk0001b0u9g8y5e4gm","slug":"IMG_20240602_182202.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2024-Summer-REU-experience/IMG_20240607_120039.jpg","post":"cm5dnblgk0001b0u9g8y5e4gm","slug":"IMG_20240607_120039.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2024-Summer-REU-experience/mayo1.jpg","post":"cm5dnblgk0001b0u9g8y5e4gm","slug":"mayo1.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2024-Summer-REU-experience/mayo2.jpg","post":"cm5dnblgk0001b0u9g8y5e4gm","slug":"mayo2.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2024-Summer-REU-experience/poster.jpg","post":"cm5dnblgk0001b0u9g8y5e4gm","slug":"poster.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2024-Summer-REU-experience/present.jpg","post":"cm5dnblgk0001b0u9g8y5e4gm","slug":"present.jpg","modified":1,"renderable":1},{"_id":"source/_posts/2024-Summer-REU-experience/reugang.jfif","post":"cm5dnblgk0001b0u9g8y5e4gm","slug":"reugang.jfif","modified":1,"renderable":1},{"_id":"source/_posts/2023-Meta-Hacker-Cup/image-6.png","post":"cm5dnblgn0002b0u9fdjagpbl","slug":"image-6.png","modified":1,"renderable":1},{"_id":"source/_posts/CF-1904D-Set-To-Max/dumb.png","post":"cm5dnblgq0005b0u9eifvajgs","slug":"dumb.png","modified":1,"renderable":1},{"_id":"source/_posts/End-of-2023-New-Year-s-Resolution/comeback.png","post":"cm5dnblgs0009b0u9hiy65ivl","slug":"comeback.png","modified":1,"renderable":1},{"_id":"source/_posts/End-of-2023-New-Year-s-Resolution/stuff.png","post":"cm5dnblgs0009b0u9hiy65ivl","slug":"stuff.png","modified":1,"renderable":1},{"_id":"source/_posts/Linear-Algebra-in-ML-1-PCA/PCA.png","post":"cm5dnblgz000jb0u95wjudl73","slug":"PCA.png","modified":1,"renderable":1},{"_id":"source/_posts/Mashup-grind-feast-1/mashup1.png","post":"cm5dnblh0000ob0u9admh9jzg","slug":"mashup1.png","modified":1,"renderable":1},{"_id":"source/_posts/NAQ-2023/scoreboard.png","post":"cm5dnblh3000wb0u97l7z5pxf","slug":"scoreboard.png","modified":1,"renderable":1},{"_id":"source/_posts/Open-source-contribution-cool-problems/merge.png","post":"cm5dnblh4000yb0u9c3fjcumw","slug":"merge.png","modified":1,"renderable":1},{"_id":"source/_posts/Paper-Reading-1-AlexNet-VGG-and-U-Net/unet.png","post":"cm5dnblh50012b0u9ezm96gfa","slug":"unet.png","modified":1,"renderable":1},{"_id":"source/_posts/Paper-Reading-2-R-CNN-Fast-R-CNN-Faster-R-CNN/compare.png","post":"cm5dnblh60014b0u94s16eto8","slug":"compare.png","modified":1,"renderable":1},{"_id":"source/_posts/Paper-Reading-2-R-CNN-Fast-R-CNN-Faster-R-CNN/R-CNN-Flow.png","post":"cm5dnblh60014b0u94s16eto8","slug":"R-CNN-Flow.png","modified":1,"renderable":1},{"_id":"source/_posts/Paper-Reading-2-R-CNN-Fast-R-CNN-Faster-R-CNN/selective.png","post":"cm5dnblh60014b0u94s16eto8","slug":"selective.png","modified":1,"renderable":1},{"_id":"source/_posts/Paper-Reading-3-BERT-RoBERTa-LoRA/image.png","post":"cm5dnblh60016b0u94gjie05v","slug":"image.png","modified":1,"renderable":1},{"_id":"source/_posts/Quick-Review-of-Janurary/score.png","post":"cm5dnblh7001ab0u9h0rnecht","slug":"score.png","modified":1,"renderable":1},{"_id":"source/_posts/Reroot-DP/depthroot.png","post":"cm5dnblhd001mb0u92fbn89an","slug":"depthroot.png","modified":1,"renderable":1},{"_id":"source/_posts/Reroot-DP/depthroot2.png","post":"cm5dnblhd001mb0u92fbn89an","slug":"depthroot2.png","modified":1,"renderable":1},{"_id":"source/_posts/Reroot-DP/subtree3.png","post":"cm5dnblhd001mb0u92fbn89an","slug":"subtree3.png","modified":1,"renderable":1},{"_id":"source/_posts/Reroot-DP/subtreecomp1.png","post":"cm5dnblhd001mb0u92fbn89an","slug":"subtreecomp1.png","modified":1,"renderable":1},{"_id":"source/_posts/Reroot-DP/subtreecomp2.png","post":"cm5dnblhd001mb0u92fbn89an","slug":"subtreecomp2.png","modified":1,"renderable":1},{"_id":"source/_posts/Reroot-DP/treexor.jpg","post":"cm5dnblhd001mb0u92fbn89an","slug":"treexor.jpg","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"cm5dnblgr0008b0u9g8iebbcq","tag_id":"cm5dnblgo0003b0u9dirr6a1z","_id":"cm5dnblgu000bb0u93nxi19nl"},{"post_id":"cm5dnblgk0001b0u9g8y5e4gm","tag_id":"cm5dnblgo0003b0u9dirr6a1z","_id":"cm5dnblgv000db0u9dh5o56ug"},{"post_id":"cm5dnblgk0001b0u9g8y5e4gm","tag_id":"cm5dnblgr0007b0u94fyedgxr","_id":"cm5dnblgw000gb0u9fooidd1l"},{"post_id":"cm5dnblgs0009b0u9hiy65ivl","tag_id":"cm5dnblgo0003b0u9dirr6a1z","_id":"cm5dnblgy000ib0u96p9ed5wl"},{"post_id":"cm5dnblgu000cb0u94eh70r99","tag_id":"cm5dnblgo0003b0u9dirr6a1z","_id":"cm5dnblgz000lb0u95yk68e97"},{"post_id":"cm5dnblgn0002b0u9fdjagpbl","tag_id":"cm5dnblgu000ab0u96axz1xpr","_id":"cm5dnblh0000nb0u9cwu1gvaa"},{"post_id":"cm5dnblgv000eb0u95p8g3pxp","tag_id":"cm5dnblgu000ab0u96axz1xpr","_id":"cm5dnblh1000qb0u9cfre3gy1"},{"post_id":"cm5dnblgx000hb0u90q8mfakt","tag_id":"cm5dnblgu000ab0u96axz1xpr","_id":"cm5dnblh2000sb0u989bgebs0"},{"post_id":"cm5dnblgp0004b0u9hm9kezsd","tag_id":"cm5dnblgu000ab0u96axz1xpr","_id":"cm5dnblh3000vb0u9f49999sm"},{"post_id":"cm5dnblh0000mb0u939gecae4","tag_id":"cm5dnblgo0003b0u9dirr6a1z","_id":"cm5dnblh4000xb0u9defwduhx"},{"post_id":"cm5dnblgq0005b0u9eifvajgs","tag_id":"cm5dnblgu000ab0u96axz1xpr","_id":"cm5dnblh4000zb0u91kildqme"},{"post_id":"cm5dnblh0000ob0u9admh9jzg","tag_id":"cm5dnblgu000ab0u96axz1xpr","_id":"cm5dnblh50011b0u937p2awf6"},{"post_id":"cm5dnblh2000rb0u9c2ox94g0","tag_id":"cm5dnblgo0003b0u9dirr6a1z","_id":"cm5dnblh50013b0u9glyofz4r"},{"post_id":"cm5dnblgr0006b0u96gaighpa","tag_id":"cm5dnblgu000ab0u96axz1xpr","_id":"cm5dnblh60015b0u93m9t1v0e"},{"post_id":"cm5dnblh2000tb0u951yt0r2y","tag_id":"cm5dnblgr0007b0u94fyedgxr","_id":"cm5dnblh60017b0u91udo5hyd"},{"post_id":"cm5dnblh3000wb0u97l7z5pxf","tag_id":"cm5dnblgu000ab0u96axz1xpr","_id":"cm5dnblh70019b0u98chh12n6"},{"post_id":"cm5dnblgz000jb0u95wjudl73","tag_id":"cm5dnblh3000ub0u9gc8j4bzw","_id":"cm5dnblh7001bb0u98h932okl"},{"post_id":"cm5dnblgz000jb0u95wjudl73","tag_id":"cm5dnblgr0007b0u94fyedgxr","_id":"cm5dnblh8001db0u95ht9arwd"},{"post_id":"cm5dnblh4000yb0u9c3fjcumw","tag_id":"cm5dnblgo0003b0u9dirr6a1z","_id":"cm5dnblh8001fb0u92qkshq1l"},{"post_id":"cm5dnblh4000yb0u9c3fjcumw","tag_id":"cm5dnblgu000ab0u96axz1xpr","_id":"cm5dnblh9001hb0u919y99h2s"},{"post_id":"cm5dnblh4000yb0u9c3fjcumw","tag_id":"cm5dnblgr0007b0u94fyedgxr","_id":"cm5dnblhb001jb0u9es69hr22"},{"post_id":"cm5dnblh40010b0u9a7o1atyl","tag_id":"cm5dnblgo0003b0u9dirr6a1z","_id":"cm5dnblhd001lb0u93tli9g79"},{"post_id":"cm5dnblh50012b0u9ezm96gfa","tag_id":"cm5dnblgr0007b0u94fyedgxr","_id":"cm5dnblhd001nb0u9g41b7xrn"},{"post_id":"cm5dnblh60014b0u94s16eto8","tag_id":"cm5dnblgr0007b0u94fyedgxr","_id":"cm5dnblhe001ob0u95zerhi7a"},{"post_id":"cm5dnblh60016b0u94gjie05v","tag_id":"cm5dnblgr0007b0u94fyedgxr","_id":"cm5dnblhe001pb0u9a6600daf"},{"post_id":"cm5dnblh60018b0u9b4oke8hb","tag_id":"cm5dnblgu000ab0u96axz1xpr","_id":"cm5dnblhe001qb0u92giu8ibx"},{"post_id":"cm5dnblh7001ab0u9h0rnecht","tag_id":"cm5dnblgo0003b0u9dirr6a1z","_id":"cm5dnblhe001rb0u9b6dba2bi"},{"post_id":"cm5dnblh7001cb0u960q711bf","tag_id":"cm5dnblgo0003b0u9dirr6a1z","_id":"cm5dnblhe001sb0u9b8335bo0"},{"post_id":"cm5dnblh7001cb0u960q711bf","tag_id":"cm5dnblgu000ab0u96axz1xpr","_id":"cm5dnblhe001tb0u96bby25b4"},{"post_id":"cm5dnblh8001eb0u9ello7jns","tag_id":"cm5dnblgo0003b0u9dirr6a1z","_id":"cm5dnblhe001ub0u93pe66uj4"},{"post_id":"cm5dnblh8001gb0u93veq55iv","tag_id":"cm5dnblgo0003b0u9dirr6a1z","_id":"cm5dnblhe001vb0u9hrd70031"},{"post_id":"cm5dnblh8001gb0u93veq55iv","tag_id":"cm5dnblgu000ab0u96axz1xpr","_id":"cm5dnblhe001wb0u9dcpse1mr"},{"post_id":"cm5dnblh9001ib0u9cskm5tmj","tag_id":"cm5dnblgo0003b0u9dirr6a1z","_id":"cm5dnblhe001xb0u9c0p280ez"},{"post_id":"cm5dnblh9001ib0u9cskm5tmj","tag_id":"cm5dnblgu000ab0u96axz1xpr","_id":"cm5dnblhe001yb0u90lov6nea"},{"post_id":"cm5dnblhb001kb0u9apo3clf9","tag_id":"cm5dnblgu000ab0u96axz1xpr","_id":"cm5dnblhe001zb0u984y5ghst"},{"post_id":"cm5dnblhd001mb0u92fbn89an","tag_id":"cm5dnblgu000ab0u96axz1xpr","_id":"cm5dnblhf0020b0u9307yfokz"}],"Tag":[{"name":"Life","_id":"cm5dnblgo0003b0u9dirr6a1z"},{"name":"AI","_id":"cm5dnblgr0007b0u94fyedgxr"},{"name":"CP","_id":"cm5dnblgu000ab0u96axz1xpr"},{"name":"Math","_id":"cm5dnblh3000ub0u9gc8j4bzw"}]}}